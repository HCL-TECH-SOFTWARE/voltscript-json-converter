{"classname":"JsonBasicObjectConverter","comment":"Custom converter to convert a JSON value to a VoltScript object, potentially using a passed JsonConversionHelper","valuetype":"AbstractJsonConverter","filenamebase":"JsonBasicObjectConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter","qn":"JsonBasicObjectConverter","codesample":"","signaturecode":3072,"instancecode":1024,"parentclassname":"AbstractJsonConverter","classtype":"Derived","classderivetype":"AbstractJsonConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"A97C465A3EABAAE780258935004D5F20","signature":"Public Class JsonBasicObjectConverter As AbstractJsonConverter","modifiers":"Public","classname":"JsonBasicObjectConverter","constructorsignature":"Public Sub New(className As String, libName As String)","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Custom converter to convert a JSON value to a VoltScript object, potentially using a passed JsonConversionHelper&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Custom converter to convert a JSON value to a VoltScript object, potentially using a passed JsonConversionHelper","inlinecomment":" \t &apos; Custom converter to convert a JSON value to a VoltScript object, potentially using a passed JsonConversionHelper","codesamplehtml":"", "methods":[{"label":"fromHelper","comment":"Overrides base method","valuetype":"AbstractJsonConverter","filenamebase":"fromHelper_Method","fqnprefix":"VoltScriptJSONConverter.JsonBasicObjectConverter","qn":"fromHelper","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(helper As JsonConversionHelper)","signature":"Public Function fromHelper(helper As JsonConversionHelper) As AbstractJsonConverter","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overrides base method&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overrides base method","inlinecomment":" \t &apos; Overrides base method","parentclassname":"JsonBasicObjectConverter","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"helper","comment":"Helper from which the converter is being used","valuetype":"JsonConversionHelper","filenamebase":"helper_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonBasicObjectConverterfromHelper","qn":"helper","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Helper from which the converter is being used&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Helper from which the converter is being used","inlinecomment":" \t &apos; Helper from which the converter is being used"}]},{"label":"fromJson","comment":"Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","valuetype":"Variant","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptJSONConverter.JsonBasicObjectConverter","qn":"fromJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty\n%END REM\nSub deserialize(holder as JsonConversionHolder, source as JsonObject)\n   Call deserializeToProperty(holder, fromJson(source), source.label)\nEnd Sub","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As JsonObject)","signature":"Public Function fromJson(source As JsonObject) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","inlinecomment":" \t &apos; Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","parentclassname":"JsonBasicObjectConverter","codesamplehtml":"%REM&lt;br /&gt;The following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty&lt;br /&gt;%END REM&lt;br /&gt;Sub deserialize(holder as JsonConversionHolder, source as JsonObject)&lt;br /&gt;   Call deserializeToProperty(holder, fromJson(source), source.label)&lt;br /&gt;End Sub", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonBasicObjectConverterfromJson","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JSON object to deserialize from&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &apos; JSON object to deserialize from"}]},{"label":"toJson","comment":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","valuetype":"Variant","filenamebase":"toJson_Method","fqnprefix":"VoltScriptJSONConverter.JsonBasicObjectConverter","qn":"toJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.serialize. It extracts a property value, passes it to the derived class&amp;apos;s toJson function and passes the result to AbstractJsonConverter.serializeToProperty\n%END REM\nSub serialize(source as Variant, target as JsonObject)\n    Dim propName as String\n    Dim execString as String\n    propName = Me.labelName\n    Set samsaraObj = source\n    execString = |If (isObject(samsaraObj.| &amp;amp; propName &amp;amp; |)) Then\n        Set samsaraVal = samsaraObj.| &amp;amp; propName &amp;amp; |\n    Else\n        samsaraVal = samsaraObj.| &amp;amp; propName &amp;amp; |\n    End If|\n    Call serializeToProperty(toJson(samsaraVal), target)\nEnd Sub","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant)","signature":"Public Function toJson(source As Variant) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","inlinecomment":" \t &apos; Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","parentclassname":"JsonBasicObjectConverter","codesamplehtml":"%REM&lt;br /&gt;The following code is an abbreviated version of code in AbstractJsonConverter.serialize. It extracts a property value, passes it to the derived class&amp;apos;s toJson function and passes the result to AbstractJsonConverter.serializeToProperty&lt;br /&gt;%END REM&lt;br /&gt;Sub serialize(source as Variant, target as JsonObject)&lt;br /&gt;    Dim propName as String&lt;br /&gt;    Dim execString as String&lt;br /&gt;    propName = Me.labelName&lt;br /&gt;    Set samsaraObj = source&lt;br /&gt;    execString = |If (isObject(samsaraObj.| &amp;amp; propName &amp;amp; |)) Then&lt;br /&gt;        Set samsaraVal = samsaraObj.| &amp;amp; propName &amp;amp; |&lt;br /&gt;    Else&lt;br /&gt;        samsaraVal = samsaraObj.| &amp;amp; propName &amp;amp; |&lt;br /&gt;    End If|&lt;br /&gt;    Call serializeToProperty(toJson(samsaraVal), target)&lt;br /&gt;End Sub", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Variant containing the property to be serialized","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonBasicObjectConvertertoJson","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Variant containing the property to be serialized&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Variant containing the property to be serialized","inlinecomment":" \t &apos; Variant containing the property to be serialized"}]},{"label":"withHelper","comment":"Passes a JsonConversionHelper with which to convert the object","valuetype":"JsonBasicObjectConverter","filenamebase":"withHelper_Method","fqnprefix":"VoltScriptJSONConverter.JsonBasicObjectConverter","qn":"withHelper","codesample":"%REM\nThe following code is from ser-40.txt. It creates a JsonConversionHelper to convert &amp;quot;name&amp;quot; and &amp;quot;type&amp;quot; properties as scalars and passes it to a JsonBasicObjectConverter.\n%END REM\nDim petHelper as New JsonConversionHelper()\nCall petHelper.withScalarConverter(&amp;quot;name&amp;quot;)\nCall petHelper.withScalarConverter(&amp;quot;type&amp;quot;)\nDim petConverter as New JsonBasicObjectConverter(&amp;quot;Pet&amp;quot;, &amp;quot;ser-40&amp;quot;)\nCall petConverter.withHelper(petHelper)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(helper As JsonConversionHelper)","signature":"Public Function withHelper(helper As JsonConversionHelper) As JsonBasicObjectConverter","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Passes a JsonConversionHelper with which to convert the object&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Passes a JsonConversionHelper with which to convert the object","inlinecomment":" \t &apos; Passes a JsonConversionHelper with which to convert the object","parentclassname":"JsonBasicObjectConverter","codesamplehtml":"%REM&lt;br /&gt;The following code is from ser-40.txt. It creates a JsonConversionHelper to convert &amp;quot;name&amp;quot; and &amp;quot;type&amp;quot; properties as scalars and passes it to a JsonBasicObjectConverter.&lt;br /&gt;%END REM&lt;br /&gt;Dim petHelper as New JsonConversionHelper()&lt;br /&gt;Call petHelper.withScalarConverter(&amp;quot;name&amp;quot;)&lt;br /&gt;Call petHelper.withScalarConverter(&amp;quot;type&amp;quot;)&lt;br /&gt;Dim petConverter as New JsonBasicObjectConverter(&amp;quot;Pet&amp;quot;, &amp;quot;ser-40&amp;quot;)&lt;br /&gt;Call petConverter.withHelper(petHelper)", "signatureelements":["Public","Function"], "arguments":[{"label":"helper","comment":"JsonConversionHelper with settings to use during conversion","valuetype":"JsonConversionHelper","filenamebase":"helper_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonBasicObjectConverterwithHelper","qn":"helper","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JsonConversionHelper with settings to use during conversion&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JsonConversionHelper with settings to use during conversion","inlinecomment":" \t &apos; JsonConversionHelper with settings to use during conversion"}]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.JsonBasicObjectConverter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(className As String, libName As String)","signature":"Public Sub New(className As String, libName As String)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"JsonBasicObjectConverter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"className","comment":"Class to create an instance of","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonBasicObjectConverterNew","qn":"className","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class to create an instance of&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class to create an instance of","inlinecomment":" \t &apos; Class to create an instance of"},{"label":"libName","comment":"Script file where the class is defined","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonBasicObjectConverterNew","qn":"libName","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Script file where the class is defined&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Script file where the class is defined","inlinecomment":" \t &apos; Script file where the class is defined"}]}]}
