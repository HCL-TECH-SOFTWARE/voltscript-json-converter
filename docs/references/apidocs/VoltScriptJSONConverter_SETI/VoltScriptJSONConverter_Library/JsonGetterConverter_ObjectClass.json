{"classname":"JsonGetterConverter","comment":"Custom getter converter","containerclasstype":"","filenamebase":"JsonGetterConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","fqn":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonGetterConverter","codesample":"%REM\nThe following code is an abbreviated version of code in CustomGetterTest. Custom Getters are used in serialization - conversion to JSON. This code calls a getName(order as Boolean) function, writing the result to the &amp;quot;name&amp;quot; label in the resulting JSON object.\n%END REM\nDim helper as New JsonConversionHelper()\nDim nameGetter as New JsonGetterConverter()\nDim jsonObj as JsonObject\n\nCall nameGetter.forGetter(&amp;quot;getName&amp;quot;).withLiteralParam(true)\nSet jsonObj = helper.withCustomConverter(&amp;quot;name, nameGetter)","signaturecode":128,"instancecode":128,"parentclassname":"AbstractJsonFunctionConverter","classtype":"Derived","classderivetype":"AbstractJsonFunctionConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"2E3A64DF0B0E3B9B802589350044A7D9","signature":"Class JsonGetterConverter","modifiers":"","classname":"JsonGetterConverter","constructorsignature":"Function New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Custom getter converter&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Custom getter converter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in CustomGetterTest. Custom Getters are used in serialization - conversion to JSON. This code calls a getName(order as Boolean) function, writing the result to the &amp;quot;name&amp;quot; label in the resulting JSON object.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim nameGetter as New JsonGetterConverter()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Call nameGetter.forGetter(&amp;quot;getName&amp;quot;).withLiteralParam(true)&amp;lt;br /&amp;gt;Set jsonObj = helper.withCustomConverter(&amp;quot;name, nameGetter)", "methods":[{"label":"New","comment":"","valuetype":"JsonGetterConverter","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonGetterConverter","fqn":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonGetterConverter.New","codesample":"","signaturecode":8,"instancecode":8,"signature":"Function New()","modifiers":"","commentblock":"","commenthtml":"","parentclassname":"JsonGetterConverter","codesamplehtml":"", "signatureelements":["Function"]},{"label":"deserialize","comment":"Overridden function, throws error for that class - getters are only for serialization.","containerclasstype":"","filenamebase":"deserialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonGetterConverter","fqn":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonGetterConverter.deserialize","codesample":"","signaturecode":4,"instancecode":4,"signature":"Sub deserialize(holder As JsonConversionHolder, source As JsonObject)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function, throws error for that class - getters are only for serialization.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function, throws error for that class - getters are only for serialization.","parentclassname":"JsonGetterConverter","codesamplehtml":"", "signatureelements":["Sub"], "arguments":[{"label":"holder","comment":"Object to deserialize to","valuetype":"JsonConversionHolder","filenamebase":"holder_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterdeserialize","fqn":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterdeserialize.holder","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Object to deserialize to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Object to deserialize to"},{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterdeserialize","fqn":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterdeserialize.source","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from"}]},{"label":"forGetter","comment":"Passes the getter name to look for in the relevant class","valuetype":"JsonGetterConverter","filenamebase":"forGetter_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonGetterConverter","fqn":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonGetterConverter.forGetter","codesample":"%REM\nThe following code is an abbreviated version of code in CustomGetterTest. Custom Getters are used in serialization - conversion to JSON. This code calls a getName(order as Boolean) function, writing the result to the &amp;quot;name&amp;quot; label in the resulting JSON object.\n%END REM\nDim person as New Person(&amp;quot;John&amp;quot;, &amp;quot;Doe&amp;quot;, 42)\nDim helper as New JsonConversionHelper()\nDim nameGetter as New JsonGetterConverter()\nDim jsonObj as JsonObject\nCall nameGetter.forGetter(&amp;quot;getName&amp;quot;).withLiteralParam(true)\nSet jsonObj = helper.withCustomConverter(&amp;quot;name&amp;quot;, nameGetter).toJson(person)","signaturecode":8,"instancecode":8,"signature":"Function forGetter(getterName As String) As JsonGetterConverter","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes the getter name to look for in the relevant class&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes the getter name to look for in the relevant class","parentclassname":"JsonGetterConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in CustomGetterTest. Custom Getters are used in serialization - conversion to JSON. This code calls a getName(order as Boolean) function, writing the result to the &amp;quot;name&amp;quot; label in the resulting JSON object.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim person as New Person(&amp;quot;John&amp;quot;, &amp;quot;Doe&amp;quot;, 42)&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim nameGetter as New JsonGetterConverter()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Call nameGetter.forGetter(&amp;quot;getName&amp;quot;).withLiteralParam(true)&amp;lt;br /&amp;gt;Set jsonObj = helper.withCustomConverter(&amp;quot;name&amp;quot;, nameGetter).toJson(person)", "signatureelements":["Function"], "arguments":[{"label":"getterName","comment":"Function in the target class","valuetype":"String","filenamebase":"getterName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterforGetter","fqn":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterforGetter.getterName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Function in the target class&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Function in the target class"}]},{"label":"serialize","comment":"Overridden function","containerclasstype":"","filenamebase":"serialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonGetterConverter","fqn":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonGetterConverter.serialize","codesample":"%REM\nConverters are required for every property to be serialized to JSON, because we cannot use reflection to know what properties exist. So this code loops through all converters in the JsonConversionHelper and call their serialize method, which populates the JSON object from the global SamsaraObj, which has already been populated with a VoltScript object (e.g. an instance of a Person class).\nThe code is an abbreviated version of code in JsonConversionHelper.processObjectToJson()\n%END REM\nDim returnObj as New JsonObject()\nForAll converters in Me.converters\n    Call converter.serialize(samsaraObj, returnObj)\nEnd ForAll","signaturecode":4,"instancecode":4,"signature":"Sub serialize(source As Variant, target As JsonObject)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function","parentclassname":"JsonGetterConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Converters are required for every property to be serialized to JSON, because we cannot use reflection to know what properties exist. So this code loops through all converters in the JsonConversionHelper and call their serialize method, which populates the JSON object from the global SamsaraObj, which has already been populated with a VoltScript object (e.g. an instance of a Person class).&amp;lt;br /&amp;gt;The code is an abbreviated version of code in JsonConversionHelper.processObjectToJson()&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim returnObj as New JsonObject()&amp;lt;br /&amp;gt;ForAll converters in Me.converters&amp;lt;br /&amp;gt;    Call converter.serialize(samsaraObj, returnObj)&amp;lt;br /&amp;gt;End ForAll", "signatureelements":["Sub"], "arguments":[{"label":"source","comment":"VoltScript object from which to serialize","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterserialize","fqn":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterserialize.source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;VoltScript object from which to serialize&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"VoltScript object from which to serialize"},{"label":"target","comment":"JsonObject to write to","valuetype":"JsonObject","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterserialize","fqn":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterserialize.target","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject to write to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject to write to"}]}]}
