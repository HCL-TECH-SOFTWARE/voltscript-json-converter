{"classname":"JsonCustomConstructor","comment":"Base implementation of AbstractJsonConstructor for constructors that take parameters.","containerclasstype":"","filenamebase":"JsonCustomConstructor_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"JsonCustomConstructor","codesample":"%REM\nCreates a custom constructor to call a Pet&amp;apos;s New method, which takes two parameters - name and type, in that order.\nThis code is found in deser-80 sample.\n%END REM\nDim pet as Pet\nDim helper as New JsonConversionHelper\nDim petConstructor as New JsonCustomConstructor()\nCall petConstructor.withParam(&amp;quot;name&amp;quot;, &amp;quot;&amp;quot;).withParam(&amp;quot;type&amp;quot;, &amp;quot;&amp;quot;)\nSet pet = helper.withCustomConstructor(petConstructor)._\n    toObject(source, &amp;quot;Pet&amp;quot;, &amp;quot;deser-80&amp;quot;)._\n    fromJson(source)","signaturecode":1024,"instancecode":1024,"parentclassname":"AbstractJsonConstructor","classtype":"Derived","classderivetype":"AbstractJsonConstructor","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"D55720B9BB3943158025893500502317","signature":"Class JsonCustomConstructor","modifiers":"","classname":"JsonCustomConstructor","constructorsignature":"Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Base implementation of AbstractJsonConstructor for constructors that take parameters.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Base implementation of AbstractJsonConstructor for constructors that take parameters.","inlinecomment":" \t &amp;apos; Base implementation of AbstractJsonConstructor for constructors that take parameters.","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Creates a custom constructor to call a Pet&amp;apos;s New method, which takes two parameters - name and type, in that order.&amp;lt;br /&amp;gt;This code is found in deser-80 sample.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim pet as Pet&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Dim petConstructor as New JsonCustomConstructor()&amp;lt;br /&amp;gt;Call petConstructor.withParam(&amp;quot;name&amp;quot;, &amp;quot;&amp;quot;).withParam(&amp;quot;type&amp;quot;, &amp;quot;&amp;quot;)&amp;lt;br /&amp;gt;Set pet = helper.withCustomConstructor(petConstructor)._&amp;lt;br /&amp;gt;    toObject(source, &amp;quot;Pet&amp;quot;, &amp;quot;deser-80&amp;quot;)._&amp;lt;br /&amp;gt;    fromJson(source)", "methods":[{"label":"cleanup","comment":"Resets globals","containerclasstype":"","filenamebase":"cleanup_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"cleanup","codesample":"See AbstractJsonConverter.cleanup()","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub cleanup()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Resets globals&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Resets globals","inlinecomment":" \t &amp;apos; Resets globals","parentclassname":"JsonCustomConstructor","codesamplehtml":"See AbstractJsonConverter.cleanup()", "signatureelements":["Sub"]},{"label":"createObject","comment":"Overridden function","valuetype":"Variant","filenamebase":"createObject_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"createObject","codesample":"%REM\nCreates an instance of className as defined in a script file called libName, and assigns it to mainHolder&amp;apos;s contents property.\nThe code is an abbreviated version of code in JsonConversionHelper.toObject().\n%END REM\nMe.mainHolder.isObject = True\nDim noArgsConstructor as New JsonNoArgsConstructor()\nSet Me.mainHolder.contents = noArgsConstructor.createObject(className, libName)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function createObject(className As String, libName As String) As Variant","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function","inlinecomment":" \t &amp;apos; Overridden function","parentclassname":"JsonCustomConstructor","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Creates an instance of className as defined in a script file called libName, and assigns it to mainHolder&amp;apos;s contents property.&amp;lt;br /&amp;gt;The code is an abbreviated version of code in JsonConversionHelper.toObject().&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Me.mainHolder.isObject = True&amp;lt;br /&amp;gt;Dim noArgsConstructor as New JsonNoArgsConstructor()&amp;lt;br /&amp;gt;Set Me.mainHolder.contents = noArgsConstructor.createObject(className, libName)", "signatureelements":["Function"], "arguments":[{"label":"className","comment":"Class to create an instance of","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorcreateObject","qn":"className","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class to create an instance of&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class to create an instance of","inlinecomment":" \t &amp;apos; Class to create an instance of"},{"label":"libName","comment":"Script file where the class is defined","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorcreateObject","qn":"libName","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Script file where the class is defined&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Script file where the class is defined","inlinecomment":" \t &amp;apos; Script file where the class is defined"}]},{"label":"Delete","comment":"Destructor, erases converter list","containerclasstype":"","filenamebase":"Delete_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"Delete","codesample":"","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub Delete()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Destructor, erases converter list&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Destructor, erases converter list","inlinecomment":" \t &amp;apos; Destructor, erases converter list","parentclassname":"JsonCustomConstructor","codesamplehtml":"", "signatureelements":["Sub"]},{"label":"New","comment":"","containerclasstype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"New","codesample":"","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub New()","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonCustomConstructor","codesamplehtml":"", "signatureelements":["Sub"]},{"label":"withContext","comment":"Passes a JSON object from which to extract parameter values","valuetype":"JsonCustomConstructor","filenamebase":"withContext_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"withContext","codesample":"%REM\nIf a constructor is defined for the JsonConversionHelper, it is used to create an instance of className as defined in a script file called libName, using as its context a JsonObject (source) and the current jsonConversionHelper&amp;apos;s list of converters.\nThe code is an abbreviated version of code in JsonConversionHelper.toObject().\n%END REM\nIf Not Me.constructor is Nothing Then\n    SetMe. mainHolder.contents = Me.constructor.withContext(source, Me.converters).createObject(className, libName)\nEnd If","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function withContext(source As JsonObject, converters List As AbstractJsonConverter) As JsonCustomConstructor","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes a JSON object from which to extract parameter values&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes a JSON object from which to extract parameter values","inlinecomment":" \t &amp;apos; Passes a JSON object from which to extract parameter values","parentclassname":"JsonCustomConstructor","codesamplehtml":"%REM&amp;lt;br /&amp;gt;If a constructor is defined for the JsonConversionHelper, it is used to create an instance of className as defined in a script file called libName, using as its context a JsonObject (source) and the current jsonConversionHelper&amp;apos;s list of converters.&amp;lt;br /&amp;gt;The code is an abbreviated version of code in JsonConversionHelper.toObject().&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;If Not Me.constructor is Nothing Then&amp;lt;br /&amp;gt;    SetMe. mainHolder.contents = Me.constructor.withContext(source, Me.converters).createObject(className, libName)&amp;lt;br /&amp;gt;End If", "signatureelements":["Function"], "arguments":[{"label":"source","comment":"JsonObject from which to extract parameters for constructor","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorwithContext","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject from which to extract parameters for constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject from which to extract parameters for constructor","inlinecomment":" \t &amp;apos; JsonObject from which to extract parameters for constructor"},{"label":"converters","comment":"List of AbstractJsonConverters with which to convert the parameters","valuetype":"AbstractJsonConverter","filenamebase":"converters_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorwithContext","qn":"converters","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;List of AbstractJsonConverters with which to convert the parameters&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"List of AbstractJsonConverters with which to convert the parameters","inlinecomment":" \t &amp;apos; List of AbstractJsonConverters with which to convert the parameters", "attributes":["List"]}]},{"label":"withLiteralParam","comment":"Fluent method to pass a literal value as a parameter for the constructor","valuetype":"JsonCustomConstructor","filenamebase":"withLiteralParam_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"withLiteralParam","codesample":"%REM\nEnsures that when extracting the gender element from a JSON object, the target class&amp;apos;s setGender method is called with the literal value &amp;quot;M&amp;quot;. \nThis is found in the CustomSetterTest sample, a hard-coded test for validation purposes only.\n%END REM\nDim helper as New JsonConversionHelper()\nDim genderConverter as New JsonSetterConverter()\nCall genderConverter.forSetter(setGender).withLiteralParam(&amp;quot;M&amp;quot;)\nCall helper.withCustomConverter(&amp;quot;gender&amp;quot;, genderConverter)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function withLiteralParam(paramVal As Variant) As JsonCustomConstructor","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Fluent method to pass a literal value as a parameter for the constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Fluent method to pass a literal value as a parameter for the constructor","inlinecomment":" \t &amp;apos; Fluent method to pass a literal value as a parameter for the constructor","parentclassname":"JsonCustomConstructor","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Ensures that when extracting the gender element from a JSON object, the target class&amp;apos;s setGender method is called with the literal value &amp;quot;M&amp;quot;. &amp;lt;br /&amp;gt;This is found in the CustomSetterTest sample, a hard-coded test for validation purposes only.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim genderConverter as New JsonSetterConverter()&amp;lt;br /&amp;gt;Call genderConverter.forSetter(setGender).withLiteralParam(&amp;quot;M&amp;quot;)&amp;lt;br /&amp;gt;Call helper.withCustomConverter(&amp;quot;gender&amp;quot;, genderConverter)", "signatureelements":["Function"], "arguments":[{"label":"paramVal","comment":"Literal value to pass to the constructor as nth parameter","valuetype":"Variant","filenamebase":"paramVal_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorwithLiteralParam","qn":"paramVal","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Literal value to pass to the constructor as nth parameter&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Literal value to pass to the constructor as nth parameter","inlinecomment":" \t &amp;apos; Literal value to pass to the constructor as nth parameter"}]},{"label":"withParam","comment":"Fluent method to retrieve a parameter value for the constructor from the JSON object or a default value to use if the label is not in the JSON object.","valuetype":"JsonCustomConstructor","filenamebase":"withParam_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"withParam","codesample":"%REM\nThe code below calls the Session class&amp;apos;s New method passing two parameters, the JSON object&amp;apos;s &amp;quot;id&amp;quot; and &amp;quot;title&amp;quot; elements, in that order.\nThe code can be found in the deser-70.txt example.\n%END REM\nDim sess as Session\nDim helper as New JsonConversionHelper\nDim sessionConstructor as New JsonCustomConstructor\nDim json as String\n  \njson = |{&amp;quot;id&amp;quot;:&amp;quot;Ad01&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Domino HA&amp;quot;}|\nCall sessionConstructor.withParam(&amp;quot;id&amp;quot;, &amp;quot;&amp;quot;).withTitle(&amp;quot;title&amp;quot;, &amp;quot;&amp;quot;)\nSet sess = helper.withCustomConstructor(sessionConstructor).fromJsonString(json, &amp;quot;Session&amp;quot;, &amp;quot;deser-70&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function withParam(labelName As String, defaultValue As Variant) As JsonCustomConstructor","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Fluent method to retrieve a parameter value for the constructor from the JSON object or a default value to use if the label is not in the JSON object.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Fluent method to retrieve a parameter value for the constructor from the JSON object or a default value to use if the label is not in the JSON object.","inlinecomment":" \t &amp;apos; Fluent method to retrieve a parameter value for the constructor from the JSON object or a default value to use if the label is not in the JSON object.","parentclassname":"JsonCustomConstructor","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The code below calls the Session class&amp;apos;s New method passing two parameters, the JSON object&amp;apos;s &amp;quot;id&amp;quot; and &amp;quot;title&amp;quot; elements, in that order.&amp;lt;br /&amp;gt;The code can be found in the deser-70.txt example.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim sess as Session&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Dim sessionConstructor as New JsonCustomConstructor&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;  &amp;lt;br /&amp;gt;json = |{&amp;quot;id&amp;quot;:&amp;quot;Ad01&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Domino HA&amp;quot;}|&amp;lt;br /&amp;gt;Call sessionConstructor.withParam(&amp;quot;id&amp;quot;, &amp;quot;&amp;quot;).withTitle(&amp;quot;title&amp;quot;, &amp;quot;&amp;quot;)&amp;lt;br /&amp;gt;Set sess = helper.withCustomConstructor(sessionConstructor).fromJsonString(json, &amp;quot;Session&amp;quot;, &amp;quot;deser-70&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"labelName","comment":"Label to find in the JSON object","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorwithParam","qn":"labelName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label to find in the JSON object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label to find in the JSON object","inlinecomment":" \t &amp;apos; Label to find in the JSON object"},{"label":"defaultValue","comment":"Default to use, if the label is not in the JSON","valuetype":"Variant","filenamebase":"defaultValue_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorwithParam","qn":"defaultValue","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Default to use, if the label is not in the JSON&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Default to use, if the label is not in the JSON","inlinecomment":" \t &amp;apos; Default to use, if the label is not in the JSON"}]}], "variables":[{"label":"params","comment":"","valuetype":"ConverterParam","filenamebase":"params_Variable","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"params","codesample":"","signaturecode":2064,"instancecode":16,"f_returnsobject":1,"signature":"Public params As ConverterParam Array","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonCustomConstructor","codesamplehtml":"", "attributes":["Array","Public"], "signatureelements":["Public"]}]}
