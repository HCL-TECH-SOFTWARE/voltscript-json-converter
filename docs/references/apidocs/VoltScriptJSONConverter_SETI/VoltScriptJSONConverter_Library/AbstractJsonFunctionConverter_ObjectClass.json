{"classname":"AbstractJsonFunctionConverter","comment":"Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. Used as the abstract class for JsonGetterConverter and JsonSetterConverter.","containerclasstype":"","filenamebase":"AbstractJsonFunctionConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","fqn":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","codesample":"See JsonGetterConverter and JsonSetterConverter","signaturecode":128,"instancecode":128,"parentclassname":"AbstractJsonConverter","classtype":"Derived","classderivetype":"AbstractJsonConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"70C54CFEABBE9D84802589350041EE25","signature":"Class AbstractJsonFunctionConverter","modifiers":"","classname":"AbstractJsonFunctionConverter","constructorsignature":"Function New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. Used as the abstract class for JsonGetterConverter and JsonSetterConverter.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. Used as the abstract class for JsonGetterConverter and JsonSetterConverter.","codesamplehtml":"See JsonGetterConverter and JsonSetterConverter", "methods":[{"label":"Delete","comment":"Destructor, erases converters List","containerclasstype":"","filenamebase":"Delete_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","fqn":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter.Delete","codesample":"","signaturecode":4,"instancecode":4,"signature":"Sub Delete()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Destructor, erases converters List&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Destructor, erases converters List","parentclassname":"AbstractJsonFunctionConverter","codesamplehtml":"", "signatureelements":["Sub"]},{"label":"New","comment":"","valuetype":"AbstractJsonFunctionConverter","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","fqn":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter.New","codesample":"","signaturecode":8,"instancecode":8,"signature":"Function New()","modifiers":"","commentblock":"","commenthtml":"","parentclassname":"AbstractJsonFunctionConverter","codesamplehtml":"", "signatureelements":["Function"]},{"label":"serialize","comment":"Overridden function","containerclasstype":"","filenamebase":"serialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","fqn":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter.serialize","codesample":"","signaturecode":4,"instancecode":4,"signature":"Sub serialize(source As Variant, target As JsonObject)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function","parentclassname":"AbstractJsonFunctionConverter","codesamplehtml":"", "signatureelements":["Sub"], "arguments":[{"label":"source","comment":"VoltScript object from which to serialize","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterserialize","fqn":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterserialize.source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;VoltScript object from which to serialize&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"VoltScript object from which to serialize"},{"label":"target","comment":"JsonObject to write to","valuetype":"JsonObject","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterserialize","fqn":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterserialize.target","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject to write to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject to write to"}]},{"label":"deserialize","comment":"Overridden function","containerclasstype":"","filenamebase":"deserialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","fqn":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter.deserialize","codesample":"","signaturecode":4,"instancecode":4,"signature":"Sub deserialize(holder As JsonConversionHolder, source As JsonObject)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function","parentclassname":"AbstractJsonFunctionConverter","codesamplehtml":"", "signatureelements":["Sub"], "arguments":[{"label":"holder","comment":"Object to deserialize to","valuetype":"JsonConversionHolder","filenamebase":"holder_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterdeserialize","fqn":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterdeserialize.holder","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Object to deserialize to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Object to deserialize to"},{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterdeserialize","fqn":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterdeserialize.source","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from"}]},{"label":"withLiteralParam","comment":"Fluent method to pass a literal value as a parameter for the converter","valuetype":"Variant","filenamebase":"withLiteralParam_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","fqn":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter.withLiteralParam","codesample":"%REM\nEnsures that when extracting the gender element from a JSON object, the target class&amp;apos;s setGender method is called with the literal value &amp;quot;M&amp;quot;. \nThis is found in the CustomSetterTest sample, a hard-coded test for validation purposes only.\n%END REM\nDim helper as New JsonConversionHelper()\nDim genderConverter as New JsonSetterConverter()\nCall genderConverter.forSetter(setGender).withLiteralParam(&amp;quot;M&amp;quot;)\nCall helper.withCustomConverter(&amp;quot;gender&amp;quot;, genderConverter)","signaturecode":8,"instancecode":8,"signature":"Function withLiteralParam(paramVal As Variant) As Variant","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Fluent method to pass a literal value as a parameter for the converter&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Fluent method to pass a literal value as a parameter for the converter","parentclassname":"AbstractJsonFunctionConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Ensures that when extracting the gender element from a JSON object, the target class&amp;apos;s setGender method is called with the literal value &amp;quot;M&amp;quot;. &amp;lt;br /&amp;gt;This is found in the CustomSetterTest sample, a hard-coded test for validation purposes only.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim genderConverter as New JsonSetterConverter()&amp;lt;br /&amp;gt;Call genderConverter.forSetter(setGender).withLiteralParam(&amp;quot;M&amp;quot;)&amp;lt;br /&amp;gt;Call helper.withCustomConverter(&amp;quot;gender&amp;quot;, genderConverter)", "signatureelements":["Function"], "arguments":[{"label":"paramVal","comment":"Literal value to pass to the relevant setter as nth parameter","valuetype":"Variant","filenamebase":"paramVal_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterwithLiteralParam","fqn":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterwithLiteralParam.paramVal","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Literal value to pass to the relevant setter as nth parameter&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Literal value to pass to the relevant setter as nth parameter"}]},{"label":"withCustomConverter","comment":"Passes a custom converter to this AbstractJsonFunctionConverter. The converter will be used to convert the relevant label to a VoltScript object rather than a scalar or scalar array.","valuetype":"Variant","filenamebase":"withCustomConverter_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","fqn":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter.withCustomConverter","codesample":"%REM\nRun a class&amp;apos;s setName(firstName, lastName) function, but convert last name to upper case before passing it in.\n%END REM\nDim converter as New JsonSetterConverter\nDim upperCaseConverter as New ConvertToUCaseConverter()\nCall converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)\nCall converter.withCustomConverter(&amp;quot;lastName&amp;quot;, upperCaseConverter)","signaturecode":8,"instancecode":8,"signature":"Function withCustomConverter(labelName As String, converter As AbstractJsonConverter) As Variant","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes a custom converter to this AbstractJsonFunctionConverter. The converter will be used to convert the relevant label to a VoltScript object rather than a scalar or scalar array.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes a custom converter to this AbstractJsonFunctionConverter. The converter will be used to convert the relevant label to a VoltScript object rather than a scalar or scalar array.","parentclassname":"AbstractJsonFunctionConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Run a class&amp;apos;s setName(firstName, lastName) function, but convert last name to upper case before passing it in.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim converter as New JsonSetterConverter&amp;lt;br /&amp;gt;Dim upperCaseConverter as New ConvertToUCaseConverter()&amp;lt;br /&amp;gt;Call converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)&amp;lt;br /&amp;gt;Call converter.withCustomConverter(&amp;quot;lastName&amp;quot;, upperCaseConverter)", "signatureelements":["Function"], "arguments":[{"label":"labelName","comment":"Label to look for in the parent JSON object","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterwithCustomConverter","fqn":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterwithCustomConverter.labelName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label to look for in the parent JSON object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label to look for in the parent JSON object"},{"label":"converter","comment":"AbstractJsonConverter to use when deserializing the value","valuetype":"AbstractJsonConverter","filenamebase":"converter_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterwithCustomConverter","fqn":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterwithCustomConverter.converter","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;AbstractJsonConverter to use when deserializing the value&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"AbstractJsonConverter to use when deserializing the value"}]}], "variables":[{"label":"params","comment":"","valuetype":"ConverterParam","filenamebase":"params_Variable","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","fqn":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter.params","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public params() As ConverterParam","modifiers":"","commentblock":"","commenthtml":"","parentclassname":"AbstractJsonFunctionConverter","codesamplehtml":"", "attributes":["Array"], "signatureelements":["Type"]}]}
