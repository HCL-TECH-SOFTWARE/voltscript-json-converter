{"classname":"JsonBasicObjectConverter","comment":"Custom converter to convert a JSON value to a VoltScript object, potentially using a passed JsonConversionHelper","valuetype":"AbstractJsonConverter","filenamebase":"JsonBasicObjectConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"JsonBasicObjectConverter","codesample":"","signaturecode":3072,"instancecode":1024,"parentclassname":"AbstractJsonConverter","classtype":"Derived","classderivetype":"AbstractJsonConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"A97C465A3EABAAE780258935004D5F20","signature":"Public Class JsonBasicObjectConverter As AbstractJsonConverter","modifiers":"Public","classname":"JsonBasicObjectConverter","constructorsignature":"Public Sub New(className As String, libName As String)","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Custom converter to convert a JSON value to a VoltScript object, potentially using a passed JsonConversionHelper&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Custom converter to convert a JSON value to a VoltScript object, potentially using a passed JsonConversionHelper","inlinecomment":" \t &amp;apos; Custom converter to convert a JSON value to a VoltScript object, potentially using a passed JsonConversionHelper","codesamplehtml":"", "methods":[{"label":"fromJson","comment":"Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","valuetype":"Variant","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonBasicObjectConverter","qn":"fromJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty\n%END REM\nSub deserialize(holder as JsonConversionHolder, source as JsonObject)\n   Call deserializeToProperty(holder, fromJson(source), source.label)\nEnd Sub","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As JsonObject)","signature":"Public Function fromJson(source As JsonObject) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","inlinecomment":" \t &amp;apos; Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","parentclassname":"JsonBasicObjectConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Sub deserialize(holder as JsonConversionHolder, source as JsonObject)&amp;lt;br /&amp;gt;   Call deserializeToProperty(holder, fromJson(source), source.label)&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectConverterfromJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"}]},{"label":"toJson","comment":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","valuetype":"Variant","filenamebase":"toJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonBasicObjectConverter","qn":"toJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.serialize. It extracts a property value, passes it to the derived class&amp;apos;s toJson function and passes the result to AbstractJsonConverter.serializeToProperty\n%END REM\nSub serialize(source as Variant, target as JsonObject)\n    Dim propName as String\n    Dim execString as String\n    propName = Me.labelName\n    Set samsaraObj = source\n    execString = |If (isObject(samsaraObj.| &amp; propName &amp; |)) Then\n        Set samsaraVal = samsaraObj.| &amp; propName &amp; |\n    Else\n        samsaraVal = samsaraObj.| &amp; propName &amp; |\n    End If|\n    Call serializeToProperty(toJson(samsaraVal), target)\nEnd Sub","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant)","signature":"Public Function toJson(source As Variant) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","inlinecomment":" \t &amp;apos; Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","parentclassname":"JsonBasicObjectConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in AbstractJsonConverter.serialize. It extracts a property value, passes it to the derived class&amp;apos;s toJson function and passes the result to AbstractJsonConverter.serializeToProperty&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Sub serialize(source as Variant, target as JsonObject)&amp;lt;br /&amp;gt;    Dim propName as String&amp;lt;br /&amp;gt;    Dim execString as String&amp;lt;br /&amp;gt;    propName = Me.labelName&amp;lt;br /&amp;gt;    Set samsaraObj = source&amp;lt;br /&amp;gt;    execString = |If (isObject(samsaraObj.| &amp; propName &amp; |)) Then&amp;lt;br /&amp;gt;        Set samsaraVal = samsaraObj.| &amp; propName &amp; |&amp;lt;br /&amp;gt;    Else&amp;lt;br /&amp;gt;        samsaraVal = samsaraObj.| &amp; propName &amp; |&amp;lt;br /&amp;gt;    End If|&amp;lt;br /&amp;gt;    Call serializeToProperty(toJson(samsaraVal), target)&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Variant containing the property to be serialized","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectConvertertoJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant containing the property to be serialized&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant containing the property to be serialized","inlinecomment":" \t &amp;apos; Variant containing the property to be serialized"}]},{"label":"withHelper","comment":"Passes a JsonConversionHelper with which to convert the object","valuetype":"JsonBasicObjectConverter","filenamebase":"withHelper_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonBasicObjectConverter","qn":"withHelper","codesample":"%REM\nThe following code is from ser-40.txt. It creates a JsonConversionHelper to convert &amp;quot;name&amp;quot; and &amp;quot;type&amp;quot; properties as scalars and passes it to a JsonBasicObjectConverter.\n%END REM\nDim petHelper as New JsonConversionHelper()\nCall petHelper.withScalarConverter(&amp;quot;name&amp;quot;)\nCall petHelper.withScalarConverter(&amp;quot;type&amp;quot;)\nDim petConverter as New JsonBasicObjectConverter(&amp;quot;Pet&amp;quot;, &amp;quot;ser-40&amp;quot;)\nCall petConverter.withHelper(petHelper)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(helper As JsonConversionHelper)","signature":"Public Function withHelper(helper As JsonConversionHelper) As JsonBasicObjectConverter","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes a JsonConversionHelper with which to convert the object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes a JsonConversionHelper with which to convert the object","inlinecomment":" \t &amp;apos; Passes a JsonConversionHelper with which to convert the object","parentclassname":"JsonBasicObjectConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is from ser-40.txt. It creates a JsonConversionHelper to convert &amp;quot;name&amp;quot; and &amp;quot;type&amp;quot; properties as scalars and passes it to a JsonBasicObjectConverter.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim petHelper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Call petHelper.withScalarConverter(&amp;quot;name&amp;quot;)&amp;lt;br /&amp;gt;Call petHelper.withScalarConverter(&amp;quot;type&amp;quot;)&amp;lt;br /&amp;gt;Dim petConverter as New JsonBasicObjectConverter(&amp;quot;Pet&amp;quot;, &amp;quot;ser-40&amp;quot;)&amp;lt;br /&amp;gt;Call petConverter.withHelper(petHelper)", "signatureelements":["Public","Function"], "arguments":[{"label":"helper","comment":"JsonConversionHelper with settings to use during conversion","valuetype":"JsonConversionHelper","filenamebase":"helper_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectConverterwithHelper","qn":"helper","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonConversionHelper with settings to use during conversion&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonConversionHelper with settings to use during conversion","inlinecomment":" \t &amp;apos; JsonConversionHelper with settings to use during conversion"}]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonBasicObjectConverter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(className As String, libName As String)","signature":"Public Sub New(className As String, libName As String)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","inlinecomment":" \t &amp;apos; Constructor","parentclassname":"JsonBasicObjectConverter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"className","comment":"Class to create an instance of","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectConverterNew","qn":"className","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class to create an instance of&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class to create an instance of","inlinecomment":" \t &amp;apos; Class to create an instance of"},{"label":"libName","comment":"Script file where the class is defined","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectConverterNew","qn":"libName","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Script file where the class is defined&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Script file where the class is defined","inlinecomment":" \t &amp;apos; Script file where the class is defined"}]}]}
