{"classname":"AbstractJsonConverter","comment":"Base Converter to convert JSON to VoltScript datatype or object and vice versa.\nThis is an abstract class only, a derived class must be used.","containerclasstype":"","filenamebase":"AbstractJsonConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"AbstractJsonConverter","codesample":"","signaturecode":1024,"instancecode":1024,"classtype":"Base","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"3ECED7EDAEAD3D6080258935003F276C","signature":"Class AbstractJsonConverter","modifiers":"","classname":"AbstractJsonConverter","parentclassname":"None","constructorsignature":"Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Base Converter to convert JSON to VoltScript datatype or object and vice versa.&amp;lt;br /&amp;gt;This is an abstract class only, a derived class must be used.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","inlinecomment":" \t &amp;apos; Base Converter to convert JSON to VoltScript datatype or object and vice versa.\nThis is an abstract class only, a derived class must be used.","commenthtml":"Base Converter to convert JSON to VoltScript datatype or object and vice versa.&amp;lt;br /&amp;gt;This is an abstract class only, a derived class must be used.","codesamplehtml":"", "methods":[{"label":"cleanup","comment":"Resets globals","containerclasstype":"","filenamebase":"cleanup_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"cleanup","codesample":"%REM\nRuns an execute statement, which needs global variables to store the value and the object from which to extract it. Whether successful or unsoccessful, the finally block&amp;apos;s call to cleanup() sub re-initialises samsaraObj, samsaraVal and samsaraParamVals to empty variants.\n%END REM\nTry\n    execString = |samsaraVal = samsaraObj.| &amp; propName\n    Execute(execString)\nCatch\n    Error 1400, &amp;quot;Unable to set &amp;quot; &amp; labelName &amp; &amp;quot; to extracted value&amp;quot;\nFinally\n    Call Me.cleanup()\nEnd Try","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub cleanup()","argumentsuffix":"()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Resets globals&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Resets globals","inlinecomment":" \t &amp;apos; Resets globals","parentclassname":"AbstractJsonConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Runs an execute statement, which needs global variables to store the value and the object from which to extract it. Whether successful or unsoccessful, the finally block&amp;apos;s call to cleanup() sub re-initialises samsaraObj, samsaraVal and samsaraParamVals to empty variants.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;    execString = |samsaraVal = samsaraObj.| &amp; propName&amp;lt;br /&amp;gt;    Execute(execString)&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;    Error 1400, &amp;quot;Unable to set &amp;quot; &amp; labelName &amp; &amp;quot; to extracted value&amp;quot;&amp;lt;br /&amp;gt;Finally&amp;lt;br /&amp;gt;    Call Me.cleanup()&amp;lt;br /&amp;gt;End Try", "signatureelements":["Sub"]},{"label":"deserialize","comment":"Deserializes a JSON object into a property in a holder object","containerclasstype":"","filenamebase":"deserialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"deserialize","codesample":"","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub deserialize(holder As JsonConversionHolder, source As JsonObject)","argumentsuffix":"(holder As JsonConversionHolder, source As JsonObject)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Deserializes a JSON object into a property in a holder object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Deserializes a JSON object into a property in a holder object","inlinecomment":" \t &amp;apos; Deserializes a JSON object into a property in a holder object","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Sub"], "arguments":[{"label":"holder","comment":"Object to deseralize into","valuetype":"JsonConversionHolder","filenamebase":"holder_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConverterdeserialize","qn":"holder","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Object to deseralize into&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Object to deseralize into","inlinecomment":" \t &amp;apos; Object to deseralize into"},{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConverterdeserialize","qn":"source","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"}]},{"label":"forPropertyName","comment":"Defines a custom property name from the relevant Class to use.\nIf not used, the code will look for a property that matches the label in the JSON","valuetype":"AbstractJsonConverter","filenamebase":"forPropertyName_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"forPropertyName","codesample":"%REM\nEnsures that when the surnameConverter extracts its value, it writes it to the lastName property of the target VoltScript object.\n%END REM\nDim surnameConverter as New JsonScalarConverter\nCall surnameConverter.forPropertyName(&amp;quot;lastName&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function forPropertyName(propertyName As String) As AbstractJsonConverter","argumentsuffix":"(propertyName As String)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Defines a custom property name from the relevant Class to use.&amp;lt;br /&amp;gt;If not used, the code will look for a property that matches the label in the JSON&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Defines a custom property name from the relevant Class to use.&amp;lt;br /&amp;gt;If not used, the code will look for a property that matches the label in the JSON","inlinecomment":" \t &amp;apos; Defines a custom property name from the relevant Class to use.\nIf not used, the code will look for a property that matches the label in the JSON","parentclassname":"AbstractJsonConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Ensures that when the surnameConverter extracts its value, it writes it to the lastName property of the target VoltScript object.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim surnameConverter as New JsonScalarConverter&amp;lt;br /&amp;gt;Call surnameConverter.forPropertyName(&amp;quot;lastName&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"propertyName","comment":"Property name to look for in the relevant Class. E.g. if the JSON has a label &amp;quot;lastName&amp;quot; but your class uses the property &amp;quot;surname&amp;quot;, pass &amp;quot;surname&amp;quot; as the property to write to","valuetype":"String","filenamebase":"propertyName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConverterforPropertyName","qn":"propertyName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Property name to look for in the relevant Class. E.g. if the JSON has a label &amp;quot;lastName&amp;quot; but your class uses the property &amp;quot;surname&amp;quot;, pass &amp;quot;surname&amp;quot; as the property to write to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Property name to look for in the relevant Class. E.g. if the JSON has a label &amp;quot;lastName&amp;quot; but your class uses the property &amp;quot;surname&amp;quot;, pass &amp;quot;surname&amp;quot; as the property to write to","inlinecomment":" \t &amp;apos; Property name to look for in the relevant Class. E.g. if the JSON has a label &amp;quot;lastName&amp;quot; but your class uses the property &amp;quot;surname&amp;quot;, pass &amp;quot;surname&amp;quot; as the property to write to"}]},{"label":"fromJson","comment":"Main function to convert JSON value to VltScript value. Needs to be overridden in derived class.","valuetype":"Variant","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"fromJson","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":0,"signature":"Function fromJson(source As JsonObject) As Variant","argumentsuffix":"(source As JsonObject)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Main function to convert JSON value to VltScript value. Needs to be overridden in derived class.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Main function to convert JSON value to VltScript value. Needs to be overridden in derived class.","inlinecomment":" \t &amp;apos; Main function to convert JSON value to VltScript value. Needs to be overridden in derived class.","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Function"], "arguments":[{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConverterfromJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"}]},{"label":"getMeTypeForDebug","comment":"Creates a prefix for debug messages","valuetype":"String","filenamebase":"getMeTypeForDebug_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"getMeTypeForDebug","codesample":"%REM\nThe following code can be included in a base class&amp;apos;s method. TypeName() will be called on the current object. So if debug is enabled, a message will be written that makes it clear which derived class&amp;apos;s fromJson() method is being called.\n%END REM\nCall DebugPrint_Samsara(&amp;quot;Entering &amp;quot; &amp; Me.getMeTypeForDebug &amp; &amp;quot;.fromJson&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function getMeTypeForDebug() As String","argumentsuffix":"()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Creates a prefix for debug messages&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Creates a prefix for debug messages","inlinecomment":" \t &amp;apos; Creates a prefix for debug messages","parentclassname":"AbstractJsonConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code can be included in a base class&amp;apos;s method. TypeName() will be called on the current object. So if debug is enabled, a message will be written that makes it clear which derived class&amp;apos;s fromJson() method is being called.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Call DebugPrint_Samsara(&amp;quot;Entering &amp;quot; &amp; Me.getMeTypeForDebug &amp; &amp;quot;.fromJson&amp;quot;)", "signatureelements":["Function"]},{"label":"isReturnObj","comment":"Whether or not the converter returns a VoltScript object or VoltScript scalar or scalar array.\nThis function is used to determine whether &amp;quot;Set&amp;quot; needs to be used to write the result to a variable.\nDefault version of the function returns True.","valuetype":"Boolean","filenamebase":"isReturnObj_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"isReturnObj","codesample":"%REM\nA converter is expected to know whether it should return a scalar or a VoltScript object. The default is false, that it only returns scalars. This function is used to determine whether or not there is a need to call Set. In future versions, where Return is implemented in functions, this may no longer be required.\n%END REM\nDim returnVal as Variant\nIf Me.isReturnObj Then\n    Set returnVal = Me.fromJson(jsonObj)\nElse\n    returnVal = Me.fromJson(jsonObj)\nEnd If","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function isReturnObj() As Boolean","argumentsuffix":"()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether or not the converter returns a VoltScript object or VoltScript scalar or scalar array.&amp;lt;br /&amp;gt;This function is used to determine whether &amp;quot;Set&amp;quot; needs to be used to write the result to a variable.&amp;lt;br /&amp;gt;Default version of the function returns True.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether or not the converter returns a VoltScript object or VoltScript scalar or scalar array.&amp;lt;br /&amp;gt;This function is used to determine whether &amp;quot;Set&amp;quot; needs to be used to write the result to a variable.&amp;lt;br /&amp;gt;Default version of the function returns True.","inlinecomment":" \t &amp;apos; Whether or not the converter returns a VoltScript object or VoltScript scalar or scalar array.\nThis function is used to determine whether &amp;quot;Set&amp;quot; needs to be used to write the result to a variable.\nDefault version of the function returns True.","parentclassname":"AbstractJsonConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;A converter is expected to know whether it should return a scalar or a VoltScript object. The default is false, that it only returns scalars. This function is used to determine whether or not there is a need to call Set. In future versions, where Return is implemented in functions, this may no longer be required.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim returnVal as Variant&amp;lt;br /&amp;gt;If Me.isReturnObj Then&amp;lt;br /&amp;gt;    Set returnVal = Me.fromJson(jsonObj)&amp;lt;br /&amp;gt;Else&amp;lt;br /&amp;gt;    returnVal = Me.fromJson(jsonObj)&amp;lt;br /&amp;gt;End If", "signatureelements":["Function"]},{"label":"New","comment":"Constructor","containerclasstype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"New","codesample":"","signaturecode":32,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Sub New()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","inlinecomment":" \t &amp;apos; Constructor","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Sub"]},{"label":"serialize","comment":"Serializes a VoltScript value into a JSON object.","containerclasstype":"","filenamebase":"serialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"serialize","codesample":"","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub serialize(source As Variant, target As JsonObject)","argumentsuffix":"(source As Variant, target As JsonObject)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Serializes a VoltScript value into a JSON object.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Serializes a VoltScript value into a JSON object.","inlinecomment":" \t &amp;apos; Serializes a VoltScript value into a JSON object.","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Sub"], "arguments":[{"label":"source","comment":"VoltScript object from which to serialize","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConverterserialize","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;VoltScript object from which to serialize&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"VoltScript object from which to serialize","inlinecomment":" \t &amp;apos; VoltScript object from which to serialize"},{"label":"target","comment":"JsonObject to write value to","valuetype":"JsonObject","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConverterserialize","qn":"target","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject to write value to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject to write value to","inlinecomment":" \t &amp;apos; JsonObject to write value to"}]},{"label":"toJson","comment":"Main function to convert VoltScript value to JSON value. Needs to be overridden in derived class.","valuetype":"Variant","filenamebase":"toJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"toJson","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function toJson(source As Variant) As Variant","argumentsuffix":"(source As Variant)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Main function to convert VoltScript value to JSON value. Needs to be overridden in derived class.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Main function to convert VoltScript value to JSON value. Needs to be overridden in derived class.","inlinecomment":" \t &amp;apos; Main function to convert VoltScript value to JSON value. Needs to be overridden in derived class.","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Function"], "arguments":[{"label":"source","comment":"Variant containing the propery to be serialized","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConvertertoJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant containing the propery to be serialized&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant containing the propery to be serialized","inlinecomment":" \t &amp;apos; Variant containing the propery to be serialized"}]}], "variables":[]}
