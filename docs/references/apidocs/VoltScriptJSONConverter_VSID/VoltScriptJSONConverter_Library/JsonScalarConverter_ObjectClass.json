{"classname":"JsonScalarConverter","comment":"Cusom Converter to convert a JSON value to VoltScript scalar. This is used as the default for any conversion.","containerclasstype":"","filenamebase":"JsonScalarConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"JsonScalarConverter","codesample":"%REM\nThe following code is used in ser-10.txt. Converts to strings and numerics for firstName, lastName and age.\n%END REM\nDim json as String\nDim helper as New JsonConversionHelper()\nDim jd as New Person()\njd.firstName = &amp;quot;John&amp;quot;\njd.lastName = &amp;quot;Doe&amp;quot;\njd.age = 42\njson = helper.withScalarConverter(&amp;quot;firstName&amp;quot;)._\n    withScalarConverter(&amp;quot;lastName&amp;quot;)._\n    withScalarConverter(&amp;quot;age&amp;quot;)\n    toJsonString(jd, false)","signaturecode":1024,"instancecode":1024,"parentclassname":"AbstractJsonConverter","classtype":"Derived","classderivetype":"AbstractJsonConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"B724066E5F04247780258935004512DC","signature":"Class JsonScalarConverter","modifiers":"","classname":"JsonScalarConverter","constructorsignature":"Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Cusom Converter to convert a JSON value to VoltScript scalar. This is used as the default for any conversion.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Cusom Converter to convert a JSON value to VoltScript scalar. This is used as the default for any conversion.","inlinecomment":" \t &amp;apos; Cusom Converter to convert a JSON value to VoltScript scalar. This is used as the default for any conversion.","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is used in ser-10.txt. Converts to strings and numerics for firstName, lastName and age.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim jd as New Person()&amp;lt;br /&amp;gt;jd.firstName = &amp;quot;John&amp;quot;&amp;lt;br /&amp;gt;jd.lastName = &amp;quot;Doe&amp;quot;&amp;lt;br /&amp;gt;jd.age = 42&amp;lt;br /&amp;gt;json = helper.withScalarConverter(&amp;quot;firstName&amp;quot;)._&amp;lt;br /&amp;gt;    withScalarConverter(&amp;quot;lastName&amp;quot;)._&amp;lt;br /&amp;gt;    withScalarConverter(&amp;quot;age&amp;quot;)&amp;lt;br /&amp;gt;    toJsonString(jd, false)", "methods":[{"label":"fromJson","comment":"Overridden function, uses scalar value from JSON object. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","valuetype":"Variant","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonScalarConverter","qn":"fromJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty\n%END REM\nSub deserialize(holder as JsonConversionHolder, source as JsonObject)\n   Call deserializeToProperty(holder, fromJson(source), source.label)\nEnd Sub","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function fromJson(source As JsonObject) As Variant","argumentsuffix":"(source As JsonObject)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function, uses scalar value from JSON object. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function, uses scalar value from JSON object. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","inlinecomment":" \t &amp;apos; Overridden function, uses scalar value from JSON object. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","parentclassname":"JsonScalarConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Sub deserialize(holder as JsonConversionHolder, source as JsonObject)&amp;lt;br /&amp;gt;   Call deserializeToProperty(holder, fromJson(source), source.label)&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Function"], "arguments":[{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonScalarConverterfromJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"}]},{"label":"isReturnObj","comment":"Overridden function, always returning False for this Class","valuetype":"Boolean","filenamebase":"isReturnObj_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonScalarConverter","qn":"isReturnObj","codesample":"%REM\nThe actual code for this function\n%END REM\nFunction isReturnObj As Boolean\n    isReturnObj = False\nEnd Function","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function isReturnObj() As Boolean","argumentsuffix":"()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function, always returning False for this Class&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function, always returning False for this Class","inlinecomment":" \t &amp;apos; Overridden function, always returning False for this Class","parentclassname":"JsonScalarConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The actual code for this function&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Function isReturnObj As Boolean&amp;lt;br /&amp;gt;    isReturnObj = False&amp;lt;br /&amp;gt;End Function", "signatureelements":["Function"]},{"label":"New","comment":"","containerclasstype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonScalarConverter","qn":"New","codesample":"","signaturecode":32,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Sub New()","modifiers":"","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonScalarConverter","codesamplehtml":"", "signatureelements":["Sub"]},{"label":"toJson","comment":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","valuetype":"Variant","filenamebase":"toJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonScalarConverter","qn":"toJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.serialize. It extracts a property value, passes it to the derived class&amp;apos;s toJson function and passes the result to AbstractJsonConverter.serializeToProperty\n%END REM\nSub serialize(source as Variant, target as JsonObject)\n    Dim propName as String\n    Dim execString as String\n    propName = Me.labelName\n    Set samsaraObj = source\n    execString = |If (isObject(samsaraObj.| &amp; propName &amp; |)) Then\n        Set samsaraVal = samsaraObj.| &amp; propName &amp; |\n    Else\n        samsaraVal = samsaraObj.| &amp; propName &amp; |\n    End If|\n    Call serializeToProperty(toJson(samsaraVal), target)\nEnd Sub","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function toJson(source As Variant) As Variant","argumentsuffix":"(source As Variant)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","inlinecomment":" \t &amp;apos; Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","parentclassname":"JsonScalarConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in AbstractJsonConverter.serialize. It extracts a property value, passes it to the derived class&amp;apos;s toJson function and passes the result to AbstractJsonConverter.serializeToProperty&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Sub serialize(source as Variant, target as JsonObject)&amp;lt;br /&amp;gt;    Dim propName as String&amp;lt;br /&amp;gt;    Dim execString as String&amp;lt;br /&amp;gt;    propName = Me.labelName&amp;lt;br /&amp;gt;    Set samsaraObj = source&amp;lt;br /&amp;gt;    execString = |If (isObject(samsaraObj.| &amp; propName &amp; |)) Then&amp;lt;br /&amp;gt;        Set samsaraVal = samsaraObj.| &amp; propName &amp; |&amp;lt;br /&amp;gt;    Else&amp;lt;br /&amp;gt;        samsaraVal = samsaraObj.| &amp; propName &amp; |&amp;lt;br /&amp;gt;    End If|&amp;lt;br /&amp;gt;    Call serializeToProperty(toJson(samsaraVal), target)&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Function"], "arguments":[{"label":"source","comment":"Variant containing the property to be serialized","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonScalarConvertertoJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant containing the property to be serialized&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant containing the property to be serialized","inlinecomment":" \t &amp;apos; Variant containing the property to be serialized"}]}]}
