{"label":"VoltScriptJSONConverter","comment":"JSON Serialization and Deserialization for VoltScript.\nThe global variables exist so Execute statements can be used. Do not set or read values manually.","valuetype":"","filenamebase":"VoltScriptJSONConverter_Library","fqnprefix":"VoltScriptJSONConverter","qn":"VoltScriptJSONConverter","codesample":"","signaturecode":65536,"instancecode":65536,"description":"","codesamplehtml":"","scriptcreator":"Paul Withers","signature":"Library VoltScriptJSONConverter","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON Serialization and Deserialization for VoltScript.&amp;lt;br /&amp;gt;The global variables exist so Execute statements can be used. Do not set or read values manually.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON Serialization and Deserialization for VoltScript.&amp;lt;br /&amp;gt;The global variables exist so Execute statements can be used. Do not set or read values manually.","inlinecomment":" \t &amp;apos; JSON Serialization and Deserialization for VoltScript.\nThe global variables exist so Execute statements can be used. Do not set or read values manually.", "methods":[{"label":"DebugPrint_Samsara","comment":"Prints a message to the console, if running with the debug flag. The debug flag is a private global variable, enabled by calling JsonConversionHelper.enableDebug(). Typically used to log key steps or data in the process flow.","valuetype":"","filenamebase":"DebugPrintSamsara_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"DebugPrintSamsara","codesample":"%REM\nPrints &amp;quot;Starting serialize&amp;quot; if debugging is enabled by calling enableDebug on a JsonConversionHelper.\n%END REM\nCall debugPrint_Samsara(&amp;quot;Starting serialize&amp;quot;)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(msg As String)","signature":"Public Sub DebugPrint_Samsara(msg As String)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Prints a message to the console, if running with the debug flag. The debug flag is a private global variable, enabled by calling JsonConversionHelper.enableDebug(). Typically used to log key steps or data in the process flow.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Prints a message to the console, if running with the debug flag. The debug flag is a private global variable, enabled by calling JsonConversionHelper.enableDebug(). Typically used to log key steps or data in the process flow.","inlinecomment":" \t &amp;apos; Prints a message to the console, if running with the debug flag. The debug flag is a private global variable, enabled by calling JsonConversionHelper.enableDebug(). Typically used to log key steps or data in the process flow.","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Prints &amp;quot;Starting serialize&amp;quot; if debugging is enabled by calling enableDebug on a JsonConversionHelper.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Call debugPrint_Samsara(&amp;quot;Starting serialize&amp;quot;)", "signatureelements":["Public","Sub"], "arguments":[{"label":"msg","comment":"String to print","valuetype":"String","filenamebase":"msg_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterDebugPrintSamsara","qn":"msg","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;String to print&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"String to print","inlinecomment":" \t &amp;apos; String to print"}]},{"label":"extractParam","comment":"Extracts a parameter to a specific index of SamsaraParamVals, using a ConverterParam and list of converters.","valuetype":"","filenamebase":"extractParam_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"extractParam","codesample":"%REM\nThe following code is from JsonSetterConverter.loadParamValuesForJsonObject.\nLoops through Me.params and constructs a corresponding Variant array of values. If the currParam&amp;apos;s label exists in the parent JSON object (source), it is extracted. If a converter exists for that label, it will be used from the converters array. If the currParam&amp;apos;s label does not exist in the parent JSON object, the currParam&amp;apos;s default will be used instead.\n%END REM\nDim currParam as CoverterParam\nDim i as Integer\nFor i = 0 to UBound(Me.params)\n    Set currParam = Me.params(i)\n    Select Case currParam.paramType\n    Case &amp;quot;Parent&amp;quot;:\n        Call extractParam(source, i, currParam, converters)\n    End Select\nNext","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(source As JsonObject, idex As Integer, currParam As ConverterParam, converters List As AbstractJsonConverter)","signature":"Public Sub extractParam(source As JsonObject, idex As Integer, currParam As ConverterParam, converters List As AbstractJsonConverter)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Extracts a parameter to a specific index of SamsaraParamVals, using a ConverterParam and list of converters.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Extracts a parameter to a specific index of SamsaraParamVals, using a ConverterParam and list of converters.","inlinecomment":" \t &amp;apos; Extracts a parameter to a specific index of SamsaraParamVals, using a ConverterParam and list of converters.","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is from JsonSetterConverter.loadParamValuesForJsonObject.&amp;lt;br /&amp;gt;Loops through Me.params and constructs a corresponding Variant array of values. If the currParam&amp;apos;s label exists in the parent JSON object (source), it is extracted. If a converter exists for that label, it will be used from the converters array. If the currParam&amp;apos;s label does not exist in the parent JSON object, the currParam&amp;apos;s default will be used instead.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim currParam as CoverterParam&amp;lt;br /&amp;gt;Dim i as Integer&amp;lt;br /&amp;gt;For i = 0 to UBound(Me.params)&amp;lt;br /&amp;gt;    Set currParam = Me.params(i)&amp;lt;br /&amp;gt;    Select Case currParam.paramType&amp;lt;br /&amp;gt;    Case &amp;quot;Parent&amp;quot;:&amp;lt;br /&amp;gt;        Call extractParam(source, i, currParam, converters)&amp;lt;br /&amp;gt;    End Select&amp;lt;br /&amp;gt;Next", "signatureelements":["Public","Sub"], "arguments":[{"label":"source","comment":"JsonObject from which to extract parameters for a function","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterextractParam","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject from which to extract parameters for a function&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject from which to extract parameters for a function","inlinecomment":" \t &amp;apos; JsonObject from which to extract parameters for a function"},{"label":"idex","comment":"index of parameters into which to extract the value","valuetype":"Integer","filenamebase":"idex_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterextractParam","qn":"idex","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;index of parameters into which to extract the value&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"index of parameters into which to extract the value","inlinecomment":" \t &amp;apos; index of parameters into which to extract the value"},{"label":"currParam","comment":"ConverterParam object containing default value","valuetype":"ConverterParam","filenamebase":"currParam_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterextractParam","qn":"currParam","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;ConverterParam object containing default value&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"ConverterParam object containing default value","inlinecomment":" \t &amp;apos; ConverterParam object containing default value"},{"label":"converters","comment":"List of AbstractSamsaraConverters to use to convert the value","valuetype":"AbstractJsonConverter","filenamebase":"converters_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterextractParam","qn":"converters","argumentindex":4,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;List of AbstractSamsaraConverters to use to convert the value&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"List of AbstractSamsaraConverters to use to convert the value","inlinecomment":" \t &amp;apos; List of AbstractSamsaraConverters to use to convert the value", "attributes":["List"]}]},{"label":"samsaraTouchFunction","comment":"Logs a function as encountered, if running with the debug flag","valuetype":"","filenamebase":"samsaraTouchFunction_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"samsaraTouchFunction","codesample":"%REM\nIf running in debug mode, adds the passed string (&amp;quot;resetSamsaraGlobals&amp;quot;) to SamsaraFunctionsTouched variant array\n%END REM\nCall samsaraTouchFunction(&amp;quot;resetSamsaraGlobals&amp;quot;)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(functionName As String)","signature":"Public Sub samsaraTouchFunction(functionName As String)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Logs a function as encountered, if running with the debug flag&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Logs a function as encountered, if running with the debug flag","inlinecomment":" \t &amp;apos; Logs a function as encountered, if running with the debug flag","codesamplehtml":"%REM&amp;lt;br /&amp;gt;If running in debug mode, adds the passed string (&amp;quot;resetSamsaraGlobals&amp;quot;) to SamsaraFunctionsTouched variant array&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Call samsaraTouchFunction(&amp;quot;resetSamsaraGlobals&amp;quot;)", "signatureelements":["Public","Sub"], "arguments":[{"label":"functionName","comment":"Function being touched","valuetype":"String","filenamebase":"functionName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConvertersamsaraTouchFunction","qn":"functionName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Function being touched&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Function being touched","inlinecomment":" \t &amp;apos; Function being touched"}]}], "classes":[{"classname":"AbstractJsonConstructor","comment":"Abstract class for calling any constructor that takes arguments when creating an object.","valuetype":"","filenamebase":"AbstractJsonConstructor_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"AbstractJsonConstructor","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"089B236582A1828580258935004FCFCE","signature":"Public Class AbstractJsonConstructor","modifiers":"Public","classname":"AbstractJsonConstructor","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Abstract class for calling any constructor that takes arguments when creating an object.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","inlinecomment":" \t &amp;apos; Abstract class for calling any constructor that takes arguments when creating an object.","commenthtml":"Abstract class for calling any constructor that takes arguments when creating an object.","codesamplehtml":"", "methods":[{"label":"createObject","comment":"Function to call relevant &amp;quot;New&amp;quot; method of the class. Must be overridden.","valuetype":"Variant","filenamebase":"createObject_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConstructor","qn":"createObject","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(className As String, libName As String)","signature":"Public Function createObject(className As String, libName As String) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Function to call relevant &amp;quot;New&amp;quot; method of the class. Must be overridden.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Function to call relevant &amp;quot;New&amp;quot; method of the class. Must be overridden.","inlinecomment":" \t &amp;apos; Function to call relevant &amp;quot;New&amp;quot; method of the class. Must be overridden.","parentclassname":"AbstractJsonConstructor","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"className","comment":"Class to create an instance of","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConstructorcreateObject","qn":"className","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class to create an instance of&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class to create an instance of","inlinecomment":" \t &amp;apos; Class to create an instance of"},{"label":"libName","comment":"Script file where the class is defined","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConstructorcreateObject","qn":"libName","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Script file where the class is defined&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Script file where the class is defined","inlinecomment":" \t &amp;apos; Script file where the class is defined"}]},{"label":"getMeTypeForDebug","comment":"Creates a prefix for debug messages","valuetype":"String","filenamebase":"getMeTypeForDebug_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConstructor","qn":"getMeTypeForDebug","codesample":"%REM\nThe following code can be included in a base class&amp;apos;s method. TypeName() will be called on the current object. So if debug is enabled, a message will be written that makes it clear which derived class&amp;apos;s createObject() method is being called.\n%END REM\nCall DebugPrint_Samsara(&amp;quot;Entering &amp;quot; &amp; Me.getMeTypeForDebug &amp; &amp;quot;.createObject&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getMeTypeForDebug() As String","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Creates a prefix for debug messages&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Creates a prefix for debug messages","inlinecomment":" \t &amp;apos; Creates a prefix for debug messages","parentclassname":"AbstractJsonConstructor","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code can be included in a base class&amp;apos;s method. TypeName() will be called on the current object. So if debug is enabled, a message will be written that makes it clear which derived class&amp;apos;s createObject() method is being called.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Call DebugPrint_Samsara(&amp;quot;Entering &amp;quot; &amp; Me.getMeTypeForDebug &amp; &amp;quot;.createObject&amp;quot;)", "signatureelements":["Public","Function"]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConstructor","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"AbstractJsonConstructor","codesamplehtml":"", "signatureelements":["Public","Sub"]}]},{"classname":"AbstractJsonConverter","comment":"Base Converter to convert JSON to VoltScript datatype or object and vice versa.\nThis is an abstract class only, a derived class must be used.","valuetype":"","filenamebase":"AbstractJsonConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"AbstractJsonConverter","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"3ECED7EDAEAD3D6080258935003F276C","signature":"Public Class AbstractJsonConverter","modifiers":"Public","classname":"AbstractJsonConverter","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Base Converter to convert JSON to VoltScript datatype or object and vice versa.&amp;lt;br /&amp;gt;This is an abstract class only, a derived class must be used.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Base Converter to convert JSON to VoltScript datatype or object and vice versa.&amp;lt;br /&amp;gt;This is an abstract class only, a derived class must be used.","inlinecomment":" \t &amp;apos; Base Converter to convert JSON to VoltScript datatype or object and vice versa.\nThis is an abstract class only, a derived class must be used.","codesamplehtml":"", "methods":[{"label":"forPropertyName","comment":"Defines a custom property name from the relevant Class to use.\nIf not used, the code will look for a property that matches the label in the JSON","valuetype":"AbstractJsonConverter","filenamebase":"forPropertyName_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"forPropertyName","codesample":"%REM\nEnsures that when the surnameConverter extracts its value, it writes it to the lastName property of the target VoltScript object.\n%END REM\nDim surnameConverter as New JsonScalarConverter\nCall surnameConverter.forPropertyName(&amp;quot;lastName&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(propertyName As String)","signature":"Public Function forPropertyName(propertyName As String) As AbstractJsonConverter","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Defines a custom property name from the relevant Class to use.&amp;lt;br /&amp;gt;If not used, the code will look for a property that matches the label in the JSON&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Defines a custom property name from the relevant Class to use.&amp;lt;br /&amp;gt;If not used, the code will look for a property that matches the label in the JSON","inlinecomment":" \t &amp;apos; Defines a custom property name from the relevant Class to use.\nIf not used, the code will look for a property that matches the label in the JSON","parentclassname":"AbstractJsonConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Ensures that when the surnameConverter extracts its value, it writes it to the lastName property of the target VoltScript object.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim surnameConverter as New JsonScalarConverter&amp;lt;br /&amp;gt;Call surnameConverter.forPropertyName(&amp;quot;lastName&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"propertyName","comment":"Property name to look for in the relevant Class. E.g. if the JSON has a label &amp;quot;lastName&amp;quot; but your class uses the property &amp;quot;surname&amp;quot;, pass &amp;quot;surname&amp;quot; as the property to write to","valuetype":"String","filenamebase":"propertyName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConverterforPropertyName","qn":"propertyName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Property name to look for in the relevant Class. E.g. if the JSON has a label &amp;quot;lastName&amp;quot; but your class uses the property &amp;quot;surname&amp;quot;, pass &amp;quot;surname&amp;quot; as the property to write to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Property name to look for in the relevant Class. E.g. if the JSON has a label &amp;quot;lastName&amp;quot; but your class uses the property &amp;quot;surname&amp;quot;, pass &amp;quot;surname&amp;quot; as the property to write to","inlinecomment":" \t &amp;apos; Property name to look for in the relevant Class. E.g. if the JSON has a label &amp;quot;lastName&amp;quot; but your class uses the property &amp;quot;surname&amp;quot;, pass &amp;quot;surname&amp;quot; as the property to write to"}]},{"label":"fromJson","comment":"Main function to convert JSON value to VltScript value. Needs to be overridden in derived class.","valuetype":"Variant","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"fromJson","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As JsonObject)","signature":"Public Function fromJson(source As JsonObject) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Main function to convert JSON value to VltScript value. Needs to be overridden in derived class.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Main function to convert JSON value to VltScript value. Needs to be overridden in derived class.","inlinecomment":" \t &amp;apos; Main function to convert JSON value to VltScript value. Needs to be overridden in derived class.","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConverterfromJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"}]},{"label":"getMeTypeForDebug","comment":"Creates a prefix for debug messages","valuetype":"String","filenamebase":"getMeTypeForDebug_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"getMeTypeForDebug","codesample":"%REM\nThe following code can be included in a base class&amp;apos;s method. TypeName() will be called on the current object. So if debug is enabled, a message will be written that makes it clear which derived class&amp;apos;s fromJson() method is being called.\n%END REM\nCall DebugPrint_Samsara(&amp;quot;Entering &amp;quot; &amp; Me.getMeTypeForDebug &amp; &amp;quot;.fromJson&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getMeTypeForDebug() As String","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Creates a prefix for debug messages&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Creates a prefix for debug messages","inlinecomment":" \t &amp;apos; Creates a prefix for debug messages","parentclassname":"AbstractJsonConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code can be included in a base class&amp;apos;s method. TypeName() will be called on the current object. So if debug is enabled, a message will be written that makes it clear which derived class&amp;apos;s fromJson() method is being called.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Call DebugPrint_Samsara(&amp;quot;Entering &amp;quot; &amp; Me.getMeTypeForDebug &amp; &amp;quot;.fromJson&amp;quot;)", "signatureelements":["Public","Function"]},{"label":"isReturnObj","comment":"Whether or not the converter returns a VoltScript object or VoltScript scalar or scalar array.\nThis function is used to determine whether &amp;quot;Set&amp;quot; needs to be used to write the result to a variable.\nDefault version of the function returns True.","valuetype":"Boolean","filenamebase":"isReturnObj_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"isReturnObj","codesample":"%REM\nA converter is expected to know whether it should return a scalar or a VoltScript object. The default is false, that it only returns scalars. This function is used to determine whether or not there is a need to call Set. In future versions, where Return is implemented in functions, this may no longer be required.\n%END REM\nDim returnVal as Variant\nIf Me.isReturnObj Then\n    Set returnVal = Me.fromJson(jsonObj)\nElse\n    returnVal = Me.fromJson(jsonObj)\nEnd If","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function isReturnObj() As Boolean","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether or not the converter returns a VoltScript object or VoltScript scalar or scalar array.&amp;lt;br /&amp;gt;This function is used to determine whether &amp;quot;Set&amp;quot; needs to be used to write the result to a variable.&amp;lt;br /&amp;gt;Default version of the function returns True.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether or not the converter returns a VoltScript object or VoltScript scalar or scalar array.&amp;lt;br /&amp;gt;This function is used to determine whether &amp;quot;Set&amp;quot; needs to be used to write the result to a variable.&amp;lt;br /&amp;gt;Default version of the function returns True.","inlinecomment":" \t &amp;apos; Whether or not the converter returns a VoltScript object or VoltScript scalar or scalar array.\nThis function is used to determine whether &amp;quot;Set&amp;quot; needs to be used to write the result to a variable.\nDefault version of the function returns True.","parentclassname":"AbstractJsonConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;A converter is expected to know whether it should return a scalar or a VoltScript object. The default is false, that it only returns scalars. This function is used to determine whether or not there is a need to call Set. In future versions, where Return is implemented in functions, this may no longer be required.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim returnVal as Variant&amp;lt;br /&amp;gt;If Me.isReturnObj Then&amp;lt;br /&amp;gt;    Set returnVal = Me.fromJson(jsonObj)&amp;lt;br /&amp;gt;Else&amp;lt;br /&amp;gt;    returnVal = Me.fromJson(jsonObj)&amp;lt;br /&amp;gt;End If", "signatureelements":["Public","Function"]},{"label":"toJson","comment":"Main function to convert VoltScript value to JSON value. Needs to be overridden in derived class.","valuetype":"Variant","filenamebase":"toJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"toJson","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant)","signature":"Public Function toJson(source As Variant) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Main function to convert VoltScript value to JSON value. Needs to be overridden in derived class.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Main function to convert VoltScript value to JSON value. Needs to be overridden in derived class.","inlinecomment":" \t &amp;apos; Main function to convert VoltScript value to JSON value. Needs to be overridden in derived class.","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Variant containing the propery to be serialized","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConvertertoJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant containing the propery to be serialized&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant containing the propery to be serialized","inlinecomment":" \t &amp;apos; Variant containing the propery to be serialized"}]},{"label":"cleanup","comment":"Resets globals","valuetype":"","filenamebase":"cleanup_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"cleanup","codesample":"%REM\nRuns an execute statement, which needs global variables to store the value and the object from which to extract it. Whether successful or unsoccessful, the finally block&amp;apos;s call to cleanup() sub re-initialises samsaraObj, samsaraVal and samsaraParamVals to empty variants.\n%END REM\nTry\n    execString = |samsaraVal = samsaraObj.| &amp; propName\n    Execute(execString)\nCatch\n    Error 1400, &amp;quot;Unable to set &amp;quot; &amp; labelName &amp; &amp;quot; to extracted value&amp;quot;\nFinally\n    Call Me.cleanup()\nEnd Try","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub cleanup()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Resets globals&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Resets globals","inlinecomment":" \t &amp;apos; Resets globals","parentclassname":"AbstractJsonConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Runs an execute statement, which needs global variables to store the value and the object from which to extract it. Whether successful or unsoccessful, the finally block&amp;apos;s call to cleanup() sub re-initialises samsaraObj, samsaraVal and samsaraParamVals to empty variants.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;    execString = |samsaraVal = samsaraObj.| &amp; propName&amp;lt;br /&amp;gt;    Execute(execString)&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;    Error 1400, &amp;quot;Unable to set &amp;quot; &amp; labelName &amp; &amp;quot; to extracted value&amp;quot;&amp;lt;br /&amp;gt;Finally&amp;lt;br /&amp;gt;    Call Me.cleanup()&amp;lt;br /&amp;gt;End Try", "signatureelements":["Public","Sub"]},{"label":"deserialize","comment":"Deserializes a JSON object into a property in a holder object","valuetype":"","filenamebase":"deserialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"deserialize","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(holder As JsonConversionHolder, source As JsonObject)","signature":"Public Sub deserialize(holder As JsonConversionHolder, source As JsonObject)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Deserializes a JSON object into a property in a holder object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Deserializes a JSON object into a property in a holder object","inlinecomment":" \t &amp;apos; Deserializes a JSON object into a property in a holder object","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"holder","comment":"Object to deseralize into","valuetype":"JsonConversionHolder","filenamebase":"holder_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConverterdeserialize","qn":"holder","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Object to deseralize into&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Object to deseralize into","inlinecomment":" \t &amp;apos; Object to deseralize into"},{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConverterdeserialize","qn":"source","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"}]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","inlinecomment":" \t &amp;apos; Constructor","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"serialize","comment":"Serializes a VoltScript value into a JSON object.","valuetype":"","filenamebase":"serialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonConverter","qn":"serialize","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(source As Variant, target As JsonObject)","signature":"Public Sub serialize(source As Variant, target As JsonObject)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Serializes a VoltScript value into a JSON object.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Serializes a VoltScript value into a JSON object.","inlinecomment":" \t &amp;apos; Serializes a VoltScript value into a JSON object.","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"source","comment":"VoltScript object from which to serialize","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConverterserialize","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;VoltScript object from which to serialize&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"VoltScript object from which to serialize","inlinecomment":" \t &amp;apos; VoltScript object from which to serialize"},{"label":"target","comment":"JsonObject to write value to","valuetype":"JsonObject","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonConverterserialize","qn":"target","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject to write value to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject to write value to","inlinecomment":" \t &amp;apos; JsonObject to write value to"}]}], "variables":[]},{"classname":"AbstractJsonFunctionConverter","comment":"Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. Used as the abstract class for JsonGetterConverter and JsonSetterConverter.","valuetype":"AbstractJsonConverter","filenamebase":"AbstractJsonFunctionConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"AbstractJsonFunctionConverter","codesample":"See JsonGetterConverter and JsonSetterConverter","signaturecode":3072,"instancecode":1024,"parentclassname":"AbstractJsonConverter","classtype":"Derived","classderivetype":"AbstractJsonConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"70C54CFEABBE9D84802589350041EE25","signature":"Public Class AbstractJsonFunctionConverter As AbstractJsonConverter","modifiers":"Public","classname":"AbstractJsonFunctionConverter","constructorsignature":"Public Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. Used as the abstract class for JsonGetterConverter and JsonSetterConverter.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. Used as the abstract class for JsonGetterConverter and JsonSetterConverter.","inlinecomment":" \t &amp;apos; Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. Used as the abstract class for JsonGetterConverter and JsonSetterConverter.","codesamplehtml":"See JsonGetterConverter and JsonSetterConverter", "methods":[{"label":"withCustomConverter","comment":"Passes a custom converter to this AbstractJsonFunctionConverter. The converter will be used to convert the relevant label to a VoltScript object rather than a scalar or scalar array.","valuetype":"Variant","filenamebase":"withCustomConverter_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","qn":"withCustomConverter","codesample":"%REM\nRun a class&amp;apos;s setName(firstName, lastName) function, but convert last name to upper case before passing it in.\n%END REM\nDim converter as New JsonSetterConverter\nDim upperCaseConverter as New ConvertToUCaseConverter()\nCall converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)\nCall converter.withCustomConverter(&amp;quot;lastName&amp;quot;, upperCaseConverter)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String, converter As AbstractJsonConverter)","signature":"Public Function withCustomConverter(labelName As String, converter As AbstractJsonConverter) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes a custom converter to this AbstractJsonFunctionConverter. The converter will be used to convert the relevant label to a VoltScript object rather than a scalar or scalar array.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes a custom converter to this AbstractJsonFunctionConverter. The converter will be used to convert the relevant label to a VoltScript object rather than a scalar or scalar array.","inlinecomment":" \t &amp;apos; Passes a custom converter to this AbstractJsonFunctionConverter. The converter will be used to convert the relevant label to a VoltScript object rather than a scalar or scalar array.","parentclassname":"AbstractJsonFunctionConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Run a class&amp;apos;s setName(firstName, lastName) function, but convert last name to upper case before passing it in.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim converter as New JsonSetterConverter&amp;lt;br /&amp;gt;Dim upperCaseConverter as New ConvertToUCaseConverter()&amp;lt;br /&amp;gt;Call converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)&amp;lt;br /&amp;gt;Call converter.withCustomConverter(&amp;quot;lastName&amp;quot;, upperCaseConverter)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label to look for in the parent JSON object","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterwithCustomConverter","qn":"labelName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label to look for in the parent JSON object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label to look for in the parent JSON object","inlinecomment":" \t &amp;apos; Label to look for in the parent JSON object"},{"label":"converter","comment":"AbstractJsonConverter to use when deserializing the value","valuetype":"AbstractJsonConverter","filenamebase":"converter_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterwithCustomConverter","qn":"converter","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;AbstractJsonConverter to use when deserializing the value&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"AbstractJsonConverter to use when deserializing the value","inlinecomment":" \t &amp;apos; AbstractJsonConverter to use when deserializing the value"}]},{"label":"withLiteralParam","comment":"Fluent method to pass a literal value as a parameter for the converter","valuetype":"AbstractJsonFunctionConverter","filenamebase":"withLiteralParam_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","qn":"withLiteralParam","codesample":"%REM\nEnsures that when extracting the gender element from a JSON object, the target class&amp;apos;s setGender method is called with the literal value &amp;quot;M&amp;quot;. \nThis is found in the CustomSetterTest sample, a hard-coded test for validation purposes only.\n%END REM\nDim helper as New JsonConversionHelper()\nDim genderConverter as New JsonSetterConverter()\nCall genderConverter.forSetter(setGender).withLiteralParam(&amp;quot;M&amp;quot;)\nCall helper.withCustomConverter(&amp;quot;gender&amp;quot;, genderConverter)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(paramVal As Variant)","signature":"Public Function withLiteralParam(paramVal As Variant) As AbstractJsonFunctionConverter","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Fluent method to pass a literal value as a parameter for the converter&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Fluent method to pass a literal value as a parameter for the converter","inlinecomment":" \t &amp;apos; Fluent method to pass a literal value as a parameter for the converter","parentclassname":"AbstractJsonFunctionConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Ensures that when extracting the gender element from a JSON object, the target class&amp;apos;s setGender method is called with the literal value &amp;quot;M&amp;quot;. &amp;lt;br /&amp;gt;This is found in the CustomSetterTest sample, a hard-coded test for validation purposes only.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim genderConverter as New JsonSetterConverter()&amp;lt;br /&amp;gt;Call genderConverter.forSetter(setGender).withLiteralParam(&amp;quot;M&amp;quot;)&amp;lt;br /&amp;gt;Call helper.withCustomConverter(&amp;quot;gender&amp;quot;, genderConverter)", "signatureelements":["Public","Function"], "arguments":[{"label":"paramVal","comment":"Literal value to pass to the relevant setter as nth parameter","valuetype":"Variant","filenamebase":"paramVal_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterwithLiteralParam","qn":"paramVal","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Literal value to pass to the relevant setter as nth parameter&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Literal value to pass to the relevant setter as nth parameter","inlinecomment":" \t &amp;apos; Literal value to pass to the relevant setter as nth parameter"}]},{"label":"deserialize","comment":"Overridden function","valuetype":"","filenamebase":"deserialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","qn":"deserialize","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(holder As JsonConversionHolder, source As JsonObject)","signature":"Public Sub deserialize(holder As JsonConversionHolder, source As JsonObject)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function","inlinecomment":" \t &amp;apos; Overridden function","parentclassname":"AbstractJsonFunctionConverter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"holder","comment":"Object to deserialize to","valuetype":"JsonConversionHolder","filenamebase":"holder_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterdeserialize","qn":"holder","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Object to deserialize to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Object to deserialize to","inlinecomment":" \t &amp;apos; Object to deserialize to"},{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterdeserialize","qn":"source","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"}]},{"label":"Delete","comment":"Destructor, erases converters List","valuetype":"","filenamebase":"Delete_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","qn":"Delete","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub Delete()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Destructor, erases converters List&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Destructor, erases converters List","inlinecomment":" \t &amp;apos; Destructor, erases converters List","parentclassname":"AbstractJsonFunctionConverter","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"AbstractJsonFunctionConverter","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"serialize","comment":"Overridden function","valuetype":"","filenamebase":"serialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.AbstractJsonFunctionConverter","qn":"serialize","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(source As Variant, target As JsonObject)","signature":"Public Sub serialize(source As Variant, target As JsonObject)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function","inlinecomment":" \t &amp;apos; Overridden function","parentclassname":"AbstractJsonFunctionConverter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"source","comment":"VoltScript object from which to serialize","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterserialize","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;VoltScript object from which to serialize&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"VoltScript object from which to serialize","inlinecomment":" \t &amp;apos; VoltScript object from which to serialize"},{"label":"target","comment":"JsonObject to write to","valuetype":"JsonObject","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterAbstractJsonFunctionConverterserialize","qn":"target","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject to write to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject to write to","inlinecomment":" \t &amp;apos; JsonObject to write to"}]}], "variables":[]},{"classname":"ConverterParam","comment":"Class to hold details from which to extract a parameter for a setter or constructor.","valuetype":"","filenamebase":"ConverterParam_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"ConverterParam","codesample":"%REM\nAdds a ConverterParam to retrieve an element from the current JSON object for the labelName passed, falling back to a defaultValue passed.\nThis is an abbreviated version of code in JsonCustomConstructor.withParam\n%END REM\nFunction withParam(labelName as String, defaultValue as Variant) as JsonCustomConstructor\n    Call redimParams()\n    Set Me.params(UBound(params)) = new ConverterParam(&amp;quot;JSON&amp;quot;, labelName, defaultValue)\n    Return Me\nEnd Function","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"6763DEA73B35F96880258935003EC469","signature":"Public Class ConverterParam","modifiers":"Public","classname":"ConverterParam","parentclassname":"None","constructorsignature":"Public Sub New(paramType As String, label As String, defaultValue As Variant)","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class to hold details from which to extract a parameter for a setter or constructor.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class to hold details from which to extract a parameter for a setter or constructor.","inlinecomment":" \t &amp;apos; Class to hold details from which to extract a parameter for a setter or constructor.","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Adds a ConverterParam to retrieve an element from the current JSON object for the labelName passed, falling back to a defaultValue passed.&amp;lt;br /&amp;gt;This is an abbreviated version of code in JsonCustomConstructor.withParam&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Function withParam(labelName as String, defaultValue as Variant) as JsonCustomConstructor&amp;lt;br /&amp;gt;    Call redimParams()&amp;lt;br /&amp;gt;    Set Me.params(UBound(params)) = new ConverterParam(&amp;quot;JSON&amp;quot;, labelName, defaultValue)&amp;lt;br /&amp;gt;    Return Me&amp;lt;br /&amp;gt;End Function", "methods":[{"label":"label","comment":"Label in the relevant JSON object from which to extract the value.","valuetype":"String","filenamebase":"label_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.ConverterParam","qn":"Get.label","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get label As String","modifiers":"Public Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label in the relevant JSON object from which to extract the value.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label in the relevant JSON object from which to extract the value.","inlinecomment":" \t &amp;apos; Label in the relevant JSON object from which to extract the value.","parentclassname":"ConverterParam","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"paramType","comment":"Parameter type, &amp;quot;ScalarValue&amp;quot;, &amp;quot;JSON&amp;quot;, &amp;quot;Parent&amp;quot;, or &amp;quot;Literal&amp;quot;","valuetype":"String","filenamebase":"paramType_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.ConverterParam","qn":"Get.paramType","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get paramType As String","modifiers":"Public Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Parameter type, &amp;quot;ScalarValue&amp;quot;, &amp;quot;JSON&amp;quot;, &amp;quot;Parent&amp;quot;, or &amp;quot;Literal&amp;quot;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Parameter type, &amp;quot;ScalarValue&amp;quot;, &amp;quot;JSON&amp;quot;, &amp;quot;Parent&amp;quot;, or &amp;quot;Literal&amp;quot;","inlinecomment":" \t &amp;apos; Parameter type, &amp;quot;ScalarValue&amp;quot;, &amp;quot;JSON&amp;quot;, &amp;quot;Parent&amp;quot;, or &amp;quot;Literal&amp;quot;","parentclassname":"ConverterParam","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Public","Property","Get"]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.ConverterParam","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(paramType As String, label As String, defaultValue As Variant)","signature":"Public Sub New(paramType As String, label As String, defaultValue As Variant)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","inlinecomment":" \t &amp;apos; Constructor","parentclassname":"ConverterParam","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"paramType","comment":"&amp;quot;ScalarValue&amp;quot; (only relevant to setters), &amp;quot;JSON&amp;quot; (only relevant to constructors), &amp;quot;Parent&amp;quot; (only relevant to setters, used to get siblings), &amp;quot;Literal&amp;quot;","valuetype":"String","filenamebase":"paramType_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterConverterParamNew","qn":"paramType","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;&amp;quot;ScalarValue&amp;quot; (only relevant to setters), &amp;quot;JSON&amp;quot; (only relevant to constructors), &amp;quot;Parent&amp;quot; (only relevant to setters, used to get siblings), &amp;quot;Literal&amp;quot;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"&amp;quot;ScalarValue&amp;quot; (only relevant to setters), &amp;quot;JSON&amp;quot; (only relevant to constructors), &amp;quot;Parent&amp;quot; (only relevant to setters, used to get siblings), &amp;quot;Literal&amp;quot;","inlinecomment":" \t &amp;apos; &amp;quot;ScalarValue&amp;quot; (only relevant to setters), &amp;quot;JSON&amp;quot; (only relevant to constructors), &amp;quot;Parent&amp;quot; (only relevant to setters, used to get siblings), &amp;quot;Literal&amp;quot;"},{"label":"label","comment":"Label in the relevant JSON object from which to extract a value","valuetype":"String","filenamebase":"label_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterConverterParamNew","qn":"label","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label in the relevant JSON object from which to extract a value&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label in the relevant JSON object from which to extract a value","inlinecomment":" \t &amp;apos; Label in the relevant JSON object from which to extract a value"},{"label":"defaultValue","comment":"Default to use if label is not found","valuetype":"Variant","filenamebase":"defaultValue_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterConverterParamNew","qn":"defaultValue","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Default to use if label is not found&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Default to use if label is not found","inlinecomment":" \t &amp;apos; Default to use if label is not found"}]}], "variables":[]},{"classname":"JsonArrayConverter","comment":"Custom converter to convert a JSON value to VoltScript array","valuetype":"AbstractJsonConverter","filenamebase":"JsonArrayConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"JsonArrayConverter","codesample":"","signaturecode":3072,"instancecode":1024,"parentclassname":"AbstractJsonConverter","classtype":"Derived","classderivetype":"AbstractJsonConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"A27903E8CCE3DA7280258935004C8DDB","signature":"Public Class JsonArrayConverter As AbstractJsonConverter","modifiers":"Public","classname":"JsonArrayConverter","constructorsignature":"Public Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Custom converter to convert a JSON value to VoltScript array&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Custom converter to convert a JSON value to VoltScript array","inlinecomment":" \t &amp;apos; Custom converter to convert a JSON value to VoltScript array","codesamplehtml":"", "methods":[{"label":"fromJson","comment":"Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","valuetype":"Variant","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonArrayConverter","qn":"fromJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty\n%END REM\nSub deserialize(holder as JsonConversionHolder, source as JsonObject)\n   Call deserializeToProperty(holder, fromJson(source), source.label)\nEnd Sub","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As JsonObject)","signature":"Public Function fromJson(source As JsonObject) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","inlinecomment":" \t &amp;apos; Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","parentclassname":"JsonArrayConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Sub deserialize(holder as JsonConversionHolder, source as JsonObject)&amp;lt;br /&amp;gt;   Call deserializeToProperty(holder, fromJson(source), source.label)&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonArrayConverterfromJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"}]},{"label":"toJson","comment":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","valuetype":"Variant","filenamebase":"toJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonArrayConverter","qn":"toJson","codesample":"%REM\nCalls a customConverter&amp;apos;s toJson method to convert an element in an array (arrayVal) to a JSON-compatible scalar.\nThe code is an abbreviated version of code used in various places, including JsonArrayConverter.toJson().\n%END REM\nIf Not customConverter is Nothing Then\n    Call returnObj.appendToJsonArray(customConverter.toJson(arrayVal))\nEnd If","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant)","signature":"Public Function toJson(source As Variant) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","inlinecomment":" \t &amp;apos; Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","parentclassname":"JsonArrayConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Calls a customConverter&amp;apos;s toJson method to convert an element in an array (arrayVal) to a JSON-compatible scalar.&amp;lt;br /&amp;gt;The code is an abbreviated version of code used in various places, including JsonArrayConverter.toJson().&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;If Not customConverter is Nothing Then&amp;lt;br /&amp;gt;    Call returnObj.appendToJsonArray(customConverter.toJson(arrayVal))&amp;lt;br /&amp;gt;End If", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Scalar or array variant containing serialized value","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonArrayConvertertoJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Scalar or array variant containing serialized value&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Scalar or array variant containing serialized value","inlinecomment":" \t &amp;apos; Scalar or array variant containing serialized value"}]},{"label":"withCustomConverter","comment":"Passes a custom converter to this JsonArrayConverter. The converter will be used to convert each element in the array to a VoltScript object rather than a scalar or scalar array.","valuetype":"JsonArrayConverter","filenamebase":"withCustomConverter_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonArrayConverter","qn":"withCustomConverter","codesample":"%REM\nConverts a JSON object with an array of dates, converting each element in the array to a ZuluLSX DateTimeObject. The arrayConverter is mapped to the &amp;quot;modified&amp;quot; property of the JSON object, but the dateConverter just needs to run on each element in the array. So a label to look for does not need to be passed.\n%END REM\nDim dateConverter as New ZuluDateTimeSerializer()\nDim arrayConverter as new JsonArrayConverter()\nDim helper as New JsonConversionHelper\nDim jsonString as String\nDim obj as ObjectSummary\njsonString = |{&amp;quot;unid&amp;quot;:&amp;quot;12345678901234567890123456789012&amp;quot;,&amp;quot;modified&amp;quot;:[&amp;quot;2023-02-01T13:00:00Z&amp;quot;,&amp;quot;2023-02-01T13:15:12Z&amp;quot;,&amp;quot;2023-02-02T09:00:00Z&amp;quot;]}|\nCall helper.withCustomConverter(&amp;quot;modified&amp;quot;, arrayConverter.withCustomConverter(dateConverter))\nSet obj = helper.fromJsonString(jsonString, &amp;quot;ObjectSummary&amp;quot;, &amp;quot;ObjectClass&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(converter As AbstractJsonConverter)","signature":"Public Function withCustomConverter(converter As AbstractJsonConverter) As JsonArrayConverter","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes a custom converter to this JsonArrayConverter. The converter will be used to convert each element in the array to a VoltScript object rather than a scalar or scalar array.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes a custom converter to this JsonArrayConverter. The converter will be used to convert each element in the array to a VoltScript object rather than a scalar or scalar array.","inlinecomment":" \t &amp;apos; Passes a custom converter to this JsonArrayConverter. The converter will be used to convert each element in the array to a VoltScript object rather than a scalar or scalar array.","parentclassname":"JsonArrayConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Converts a JSON object with an array of dates, converting each element in the array to a ZuluLSX DateTimeObject. The arrayConverter is mapped to the &amp;quot;modified&amp;quot; property of the JSON object, but the dateConverter just needs to run on each element in the array. So a label to look for does not need to be passed.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim dateConverter as New ZuluDateTimeSerializer()&amp;lt;br /&amp;gt;Dim arrayConverter as new JsonArrayConverter()&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Dim jsonString as String&amp;lt;br /&amp;gt;Dim obj as ObjectSummary&amp;lt;br /&amp;gt;jsonString = |{&amp;quot;unid&amp;quot;:&amp;quot;12345678901234567890123456789012&amp;quot;,&amp;quot;modified&amp;quot;:[&amp;quot;2023-02-01T13:00:00Z&amp;quot;,&amp;quot;2023-02-01T13:15:12Z&amp;quot;,&amp;quot;2023-02-02T09:00:00Z&amp;quot;]}|&amp;lt;br /&amp;gt;Call helper.withCustomConverter(&amp;quot;modified&amp;quot;, arrayConverter.withCustomConverter(dateConverter))&amp;lt;br /&amp;gt;Set obj = helper.fromJsonString(jsonString, &amp;quot;ObjectSummary&amp;quot;, &amp;quot;ObjectClass&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"converter","comment":"Converter to use when deserializing","valuetype":"AbstractJsonConverter","filenamebase":"converter_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonArrayConverterwithCustomConverter","qn":"converter","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Converter to use when deserializing&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Converter to use when deserializing","inlinecomment":" \t &amp;apos; Converter to use when deserializing"}]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonArrayConverter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonArrayConverter","codesamplehtml":"", "signatureelements":["Public","Sub"]}]},{"classname":"JsonBasicObjectArrayConverter","comment":"Custom converter to convert a JSON value to an array of VoltScript objects, potentially using passed JsonConversionHelper.","valuetype":"AbstractJsonConverter","filenamebase":"JsonBasicObjectArrayConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"JsonBasicObjectArrayConverter","codesample":"","signaturecode":3072,"instancecode":1024,"parentclassname":"AbstractJsonConverter","classtype":"Derived","classderivetype":"AbstractJsonConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"BF39338A9A99EA6D80258935004DDA60","signature":"Public Class JsonBasicObjectArrayConverter As AbstractJsonConverter","modifiers":"Public","classname":"JsonBasicObjectArrayConverter","constructorsignature":"Public Sub New(className As String, libName As String)","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Custom converter to convert a JSON value to an array of VoltScript objects, potentially using passed JsonConversionHelper.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Custom converter to convert a JSON value to an array of VoltScript objects, potentially using passed JsonConversionHelper.","inlinecomment":" \t &amp;apos; Custom converter to convert a JSON value to an array of VoltScript objects, potentially using passed JsonConversionHelper.","codesamplehtml":"", "methods":[{"label":"fromJson","comment":"Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","valuetype":"Variant","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonBasicObjectArrayConverter","qn":"fromJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty\n%END REM\nSub deserialize(holder as JsonConversionHolder, source as JsonObject)\n   Call deserializeToProperty(holder, fromJson(source), source.label)\nEnd Sub","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As JsonObject)","signature":"Public Function fromJson(source As JsonObject) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","inlinecomment":" \t &amp;apos; Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","parentclassname":"JsonBasicObjectArrayConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Sub deserialize(holder as JsonConversionHolder, source as JsonObject)&amp;lt;br /&amp;gt;   Call deserializeToProperty(holder, fromJson(source), source.label)&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectArrayConverterfromJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"}]},{"label":"toJson","comment":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","valuetype":"Variant","filenamebase":"toJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonBasicObjectArrayConverter","qn":"toJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.serialize. It extracts a property value, passes it to the derived class&amp;apos;s toJson function and passes the result to AbstractJsonConverter.serializeToProperty\n%END REM\nSub serialize(source as Variant, target as JsonObject)\n    Dim propName as String\n    Dim execString as String\n    propName = Me.labelName\n    Set samsaraObj = source\n    execString = |If (isObject(samsaraObj.| &amp; propName &amp; |)) Then\n        Set samsaraVal = samsaraObj.| &amp; propName &amp; |\n    Else\n        samsaraVal = samsaraObj.| &amp; propName &amp; |\n    End If|\n    Call serializeToProperty(toJson(samsaraVal), target)\nEnd Sub","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant)","signature":"Public Function toJson(source As Variant) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","inlinecomment":" \t &amp;apos; Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","parentclassname":"JsonBasicObjectArrayConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in AbstractJsonConverter.serialize. It extracts a property value, passes it to the derived class&amp;apos;s toJson function and passes the result to AbstractJsonConverter.serializeToProperty&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Sub serialize(source as Variant, target as JsonObject)&amp;lt;br /&amp;gt;    Dim propName as String&amp;lt;br /&amp;gt;    Dim execString as String&amp;lt;br /&amp;gt;    propName = Me.labelName&amp;lt;br /&amp;gt;    Set samsaraObj = source&amp;lt;br /&amp;gt;    execString = |If (isObject(samsaraObj.| &amp; propName &amp; |)) Then&amp;lt;br /&amp;gt;        Set samsaraVal = samsaraObj.| &amp; propName &amp; |&amp;lt;br /&amp;gt;    Else&amp;lt;br /&amp;gt;        samsaraVal = samsaraObj.| &amp; propName &amp; |&amp;lt;br /&amp;gt;    End If|&amp;lt;br /&amp;gt;    Call serializeToProperty(toJson(samsaraVal), target)&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Variant cotaining the property to be serialized","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectArrayConvertertoJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant cotaining the property to be serialized&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant cotaining the property to be serialized","inlinecomment":" \t &amp;apos; Variant cotaining the property to be serialized"}]},{"label":"withHelper","comment":"Passes a JsonConversionHelper with which to convert the object","valuetype":"JsonBasicObjectArrayConverter","filenamebase":"withHelper_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonBasicObjectArrayConverter","qn":"withHelper","codesample":"%REM\nThe following code is abbreviated code from ComplexPersonTest. It creates a JsonConversionHelper to convert &amp;quot;name&amp;quot; and &amp;quot;type&amp;quot; properties as scalars and passes it to a JsonBasicObjectArrayConverter. Unlike the JsonBasicObjectConverter example, this converts a Variant array of pets.\nThe population of the Person object is omitted here, but it is generated from the following JSON\n{&amp;quot;firstName&amp;quot;:&amp;quot;Paul&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Withers&amp;quot;,&amp;quot;pets&amp;quot;: [{&amp;quot;name&amp;quot;:&amp;quot;Peter&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;Guinea Pig&amp;quot;},{&amp;quot;name&amp;quot;:&amp;quot;Benjamin&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;Guinea Pig&amp;quot;}]}\n%END REM\nDim helper as New JsonConversionHelper()\nDim petConverter as New JsonBasicObjectConverter(&amp;quot;Pet&amp;quot;, &amp;quot;ComplexPersonTest&amp;quot;)\nDim person as Person\nDim jsonObj as JsonObject\nDim petHelper as New JsonConversionHelper()\nCall helper.withScalarConverter(&amp;quot;name&amp;quot;).withScalarConverter(&amp;quot;type&amp;quot;)\nCall petConverter.withHelper(petHelper.withScalarConverter(&amp;quot;name&amp;quot;).withScalarConverter(&amp;quot;type&amp;quot;))\nCall helper.withCustomConverter(&amp;quot;pets&amp;quot;, petConverter)\nSet jsonObj = helper.toJson(person)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(helper As JsonConversionHelper)","signature":"Public Function withHelper(helper As JsonConversionHelper) As JsonBasicObjectArrayConverter","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes a JsonConversionHelper with which to convert the object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes a JsonConversionHelper with which to convert the object","inlinecomment":" \t &amp;apos; Passes a JsonConversionHelper with which to convert the object","parentclassname":"JsonBasicObjectArrayConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is abbreviated code from ComplexPersonTest. It creates a JsonConversionHelper to convert &amp;quot;name&amp;quot; and &amp;quot;type&amp;quot; properties as scalars and passes it to a JsonBasicObjectArrayConverter. Unlike the JsonBasicObjectConverter example, this converts a Variant array of pets.&amp;lt;br /&amp;gt;The population of the Person object is omitted here, but it is generated from the following JSON&amp;lt;br /&amp;gt;{&amp;quot;firstName&amp;quot;:&amp;quot;Paul&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Withers&amp;quot;,&amp;quot;pets&amp;quot;: [{&amp;quot;name&amp;quot;:&amp;quot;Peter&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;Guinea Pig&amp;quot;},{&amp;quot;name&amp;quot;:&amp;quot;Benjamin&amp;quot;,&amp;quot;type&amp;quot;:&amp;quot;Guinea Pig&amp;quot;}]}&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim petConverter as New JsonBasicObjectConverter(&amp;quot;Pet&amp;quot;, &amp;quot;ComplexPersonTest&amp;quot;)&amp;lt;br /&amp;gt;Dim person as Person&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim petHelper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Call helper.withScalarConverter(&amp;quot;name&amp;quot;).withScalarConverter(&amp;quot;type&amp;quot;)&amp;lt;br /&amp;gt;Call petConverter.withHelper(petHelper.withScalarConverter(&amp;quot;name&amp;quot;).withScalarConverter(&amp;quot;type&amp;quot;))&amp;lt;br /&amp;gt;Call helper.withCustomConverter(&amp;quot;pets&amp;quot;, petConverter)&amp;lt;br /&amp;gt;Set jsonObj = helper.toJson(person)", "signatureelements":["Public","Function"], "arguments":[{"label":"helper","comment":"JsonConversionHelper with settings to use during conversion","valuetype":"JsonConversionHelper","filenamebase":"helper_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectArrayConverterwithHelper","qn":"helper","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonConversionHelper with settings to use during conversion&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonConversionHelper with settings to use during conversion","inlinecomment":" \t &amp;apos; JsonConversionHelper with settings to use during conversion"}]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonBasicObjectArrayConverter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(className As String, libName As String)","signature":"Public Sub New(className As String, libName As String)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","inlinecomment":" \t &amp;apos; Constructor","parentclassname":"JsonBasicObjectArrayConverter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"className","comment":"JSON object to deserialize from","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectArrayConverterNew","qn":"className","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"},{"label":"libName","comment":"Script file where the class is defined","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectArrayConverterNew","qn":"libName","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Script file where the class is defined&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Script file where the class is defined","inlinecomment":" \t &amp;apos; Script file where the class is defined"}]}]},{"classname":"JsonBasicObjectConverter","comment":"Custom converter to convert a JSON value to a VoltScript object, potentially using a passed JsonConversionHelper","valuetype":"AbstractJsonConverter","filenamebase":"JsonBasicObjectConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"JsonBasicObjectConverter","codesample":"","signaturecode":3072,"instancecode":1024,"parentclassname":"AbstractJsonConverter","classtype":"Derived","classderivetype":"AbstractJsonConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"A97C465A3EABAAE780258935004D5F20","signature":"Public Class JsonBasicObjectConverter As AbstractJsonConverter","modifiers":"Public","classname":"JsonBasicObjectConverter","constructorsignature":"Public Sub New(className As String, libName As String)","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Custom converter to convert a JSON value to a VoltScript object, potentially using a passed JsonConversionHelper&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Custom converter to convert a JSON value to a VoltScript object, potentially using a passed JsonConversionHelper","inlinecomment":" \t &amp;apos; Custom converter to convert a JSON value to a VoltScript object, potentially using a passed JsonConversionHelper","codesamplehtml":"", "methods":[{"label":"fromJson","comment":"Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","valuetype":"Variant","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonBasicObjectConverter","qn":"fromJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty\n%END REM\nSub deserialize(holder as JsonConversionHolder, source as JsonObject)\n   Call deserializeToProperty(holder, fromJson(source), source.label)\nEnd Sub","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As JsonObject)","signature":"Public Function fromJson(source As JsonObject) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","inlinecomment":" \t &amp;apos; Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","parentclassname":"JsonBasicObjectConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Sub deserialize(holder as JsonConversionHolder, source as JsonObject)&amp;lt;br /&amp;gt;   Call deserializeToProperty(holder, fromJson(source), source.label)&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectConverterfromJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"}]},{"label":"toJson","comment":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","valuetype":"Variant","filenamebase":"toJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonBasicObjectConverter","qn":"toJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.serialize. It extracts a property value, passes it to the derived class&amp;apos;s toJson function and passes the result to AbstractJsonConverter.serializeToProperty\n%END REM\nSub serialize(source as Variant, target as JsonObject)\n    Dim propName as String\n    Dim execString as String\n    propName = Me.labelName\n    Set samsaraObj = source\n    execString = |If (isObject(samsaraObj.| &amp; propName &amp; |)) Then\n        Set samsaraVal = samsaraObj.| &amp; propName &amp; |\n    Else\n        samsaraVal = samsaraObj.| &amp; propName &amp; |\n    End If|\n    Call serializeToProperty(toJson(samsaraVal), target)\nEnd Sub","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant)","signature":"Public Function toJson(source As Variant) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","inlinecomment":" \t &amp;apos; Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","parentclassname":"JsonBasicObjectConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in AbstractJsonConverter.serialize. It extracts a property value, passes it to the derived class&amp;apos;s toJson function and passes the result to AbstractJsonConverter.serializeToProperty&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Sub serialize(source as Variant, target as JsonObject)&amp;lt;br /&amp;gt;    Dim propName as String&amp;lt;br /&amp;gt;    Dim execString as String&amp;lt;br /&amp;gt;    propName = Me.labelName&amp;lt;br /&amp;gt;    Set samsaraObj = source&amp;lt;br /&amp;gt;    execString = |If (isObject(samsaraObj.| &amp; propName &amp; |)) Then&amp;lt;br /&amp;gt;        Set samsaraVal = samsaraObj.| &amp; propName &amp; |&amp;lt;br /&amp;gt;    Else&amp;lt;br /&amp;gt;        samsaraVal = samsaraObj.| &amp; propName &amp; |&amp;lt;br /&amp;gt;    End If|&amp;lt;br /&amp;gt;    Call serializeToProperty(toJson(samsaraVal), target)&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Variant containing the property to be serialized","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectConvertertoJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant containing the property to be serialized&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant containing the property to be serialized","inlinecomment":" \t &amp;apos; Variant containing the property to be serialized"}]},{"label":"withHelper","comment":"Passes a JsonConversionHelper with which to convert the object","valuetype":"JsonBasicObjectConverter","filenamebase":"withHelper_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonBasicObjectConverter","qn":"withHelper","codesample":"%REM\nThe following code is from ser-40.txt. It creates a JsonConversionHelper to convert &amp;quot;name&amp;quot; and &amp;quot;type&amp;quot; properties as scalars and passes it to a JsonBasicObjectConverter.\n%END REM\nDim petHelper as New JsonConversionHelper()\nCall petHelper.withScalarConverter(&amp;quot;name&amp;quot;)\nCall petHelper.withScalarConverter(&amp;quot;type&amp;quot;)\nDim petConverter as New JsonBasicObjectConverter(&amp;quot;Pet&amp;quot;, &amp;quot;ser-40&amp;quot;)\nCall petConverter.withHelper(petHelper)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(helper As JsonConversionHelper)","signature":"Public Function withHelper(helper As JsonConversionHelper) As JsonBasicObjectConverter","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes a JsonConversionHelper with which to convert the object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes a JsonConversionHelper with which to convert the object","inlinecomment":" \t &amp;apos; Passes a JsonConversionHelper with which to convert the object","parentclassname":"JsonBasicObjectConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is from ser-40.txt. It creates a JsonConversionHelper to convert &amp;quot;name&amp;quot; and &amp;quot;type&amp;quot; properties as scalars and passes it to a JsonBasicObjectConverter.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim petHelper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Call petHelper.withScalarConverter(&amp;quot;name&amp;quot;)&amp;lt;br /&amp;gt;Call petHelper.withScalarConverter(&amp;quot;type&amp;quot;)&amp;lt;br /&amp;gt;Dim petConverter as New JsonBasicObjectConverter(&amp;quot;Pet&amp;quot;, &amp;quot;ser-40&amp;quot;)&amp;lt;br /&amp;gt;Call petConverter.withHelper(petHelper)", "signatureelements":["Public","Function"], "arguments":[{"label":"helper","comment":"JsonConversionHelper with settings to use during conversion","valuetype":"JsonConversionHelper","filenamebase":"helper_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectConverterwithHelper","qn":"helper","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonConversionHelper with settings to use during conversion&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonConversionHelper with settings to use during conversion","inlinecomment":" \t &amp;apos; JsonConversionHelper with settings to use during conversion"}]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonBasicObjectConverter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(className As String, libName As String)","signature":"Public Sub New(className As String, libName As String)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","inlinecomment":" \t &amp;apos; Constructor","parentclassname":"JsonBasicObjectConverter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"className","comment":"Class to create an instance of","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectConverterNew","qn":"className","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class to create an instance of&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class to create an instance of","inlinecomment":" \t &amp;apos; Class to create an instance of"},{"label":"libName","comment":"Script file where the class is defined","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonBasicObjectConverterNew","qn":"libName","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Script file where the class is defined&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Script file where the class is defined","inlinecomment":" \t &amp;apos; Script file where the class is defined"}]}]},{"classname":"JsonConversionHelper","comment":"Helper class for performing the serialization / deserialization","valuetype":"","filenamebase":"JsonConversionHelper_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"JsonConversionHelper","codesample":"%REM\nConverts a string of JSON to a Person object. The code is taken from the first deserialization example.\n%REM\nDim json as String\nDim helper as New JsonConversionHelper()\nDim jd as Person\n\njson = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|\nSet jd = helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;deser-10&amp;quot;)","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"49E85D048B02698580258935004DC112","signature":"Public Class JsonConversionHelper","modifiers":"Public","classname":"JsonConversionHelper","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Helper class for performing the serialization / deserialization&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Helper class for performing the serialization / deserialization","inlinecomment":" \t &amp;apos; Helper class for performing the serialization / deserialization","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Converts a string of JSON to a Person object. The code is taken from the first deserialization example.&amp;lt;br /&amp;gt;%REM&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim jd as Person&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;json = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|&amp;lt;br /&amp;gt;Set jd = helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;deser-10&amp;quot;)", "methods":[{"label":"fromJson","comment":"Main function to deserialize a JSON object to a VoltScript object.","valuetype":"Variant","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"fromJson","codesample":"%REM\nConverts a VoltScript JsonObject to an instance of a class. A custom constructor, custom converters and configuration to ignore labels may be added before calling fromJson().\n%END REM\nDim helper as New JsonConversionHelper\nCall helper.fromJson(jsonObj, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(obj As JsonObject)","signature":"Public Function fromJson(obj As JsonObject) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Main function to deserialize a JSON object to a VoltScript object.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Main function to deserialize a JSON object to a VoltScript object.","inlinecomment":" \t &amp;apos; Main function to deserialize a JSON object to a VoltScript object.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Converts a VoltScript JsonObject to an instance of a class. A custom constructor, custom converters and configuration to ignore labels may be added before calling fromJson().&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Call helper.fromJson(jsonObj, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"obj","comment":"JSON object to deserialize","valuetype":"JsonObject","filenamebase":"obj_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperfromJson","qn":"obj","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize","inlinecomment":" \t &amp;apos; JSON object to deserialize"}]},{"label":"fromJsonString","comment":"Parses JSON string and calls fromJson which creates an array or object.","valuetype":"Variant","filenamebase":"fromJsonString_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"fromJsonString","codesample":"%REM\nConverts a string of JSON to an instance of a class. A custom constructor, custom converters and configuration to ignore labels may be added before calling fromJson().\n%END REM\nDim helper as New JsonConversionHelper\nDim js as Person\nDim json as String\njson = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|\nSet jd = helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As String, className As String, libName As String)","signature":"Public Function fromJsonString(source As String, className As String, libName As String) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Parses JSON string and calls fromJson which creates an array or object.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Parses JSON string and calls fromJson which creates an array or object.","inlinecomment":" \t &amp;apos; Parses JSON string and calls fromJson which creates an array or object.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Converts a string of JSON to an instance of a class. A custom constructor, custom converters and configuration to ignore labels may be added before calling fromJson().&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Dim js as Person&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;json = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|&amp;lt;br /&amp;gt;Set jd = helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String of JSON to parse","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperfromJsonString","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;String of JSON to parse&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"String of JSON to parse","inlinecomment":" \t &amp;apos; String of JSON to parse"},{"label":"className","comment":"Class name to create object for","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperfromJsonString","qn":"className","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class name to create object for&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class name to create object for","inlinecomment":" \t &amp;apos; Class name to create object for"},{"label":"libName","comment":"Script containing className","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperfromJsonString","qn":"libName","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Script containing className&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Script containing className","inlinecomment":" \t &amp;apos; Script containing className"}]},{"label":"getCustomConverter","comment":"Returns the custom converter for a label, if it exists.","valuetype":"AbstractJsonConverter","filenamebase":"getCustomConverter_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"getCustomConverter","codesample":"%REM\nThe code is an abbreviated version of code found in JsonConversionHelper.fromJson(). For a given JSON object (child) gets a converter based on the JSON object&amp;apos;s label (elemName) and, if the converter exists, calls its deserialize method to convert the JSON object into mainHolder.\n%END REM\nDim converter as AbstractJsonConverter\nDim elemName as String\nelemName = child.label\nSet converter = Me.getCustomConverter(elemName)\nIf Not converter is Nothing Then\n    converter.deserialize(Me.mainHolder, child)\nEnd If","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String)","signature":"Public Function getCustomConverter(labelName As String) As AbstractJsonConverter","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Returns the custom converter for a label, if it exists.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Returns the custom converter for a label, if it exists.","inlinecomment":" \t &amp;apos; Returns the custom converter for a label, if it exists.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The code is an abbreviated version of code found in JsonConversionHelper.fromJson(). For a given JSON object (child) gets a converter based on the JSON object&amp;apos;s label (elemName) and, if the converter exists, calls its deserialize method to convert the JSON object into mainHolder.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim converter as AbstractJsonConverter&amp;lt;br /&amp;gt;Dim elemName as String&amp;lt;br /&amp;gt;elemName = child.label&amp;lt;br /&amp;gt;Set converter = Me.getCustomConverter(elemName)&amp;lt;br /&amp;gt;If Not converter is Nothing Then&amp;lt;br /&amp;gt;    converter.deserialize(Me.mainHolder, child)&amp;lt;br /&amp;gt;End If", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label to match against","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelpergetCustomConverter","qn":"labelName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label to match against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label to match against","inlinecomment":" \t &amp;apos; Label to match against"}]},{"label":"ignoreLabel","comment":"Specifies a label to skip when parsing the JSON. The check is case-sensitive, so casing needs to match the casing in the JSON object.","valuetype":"JsonConversionHelper","filenamebase":"ignoreLabel_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"ignoreLabel","codesample":"%REM\nWhen the helper parses all the labels in a JSON object to convert it from JSON to a VoltScript object, the code will skip the label &amp;quot;ipaddress&amp;quot;.\n%END REM\nDim helper as New JsonConversionHelper\nCall helper.ignoreLabel(&amp;quot;ipaddress&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelToIgnore As String)","signature":"Public Function ignoreLabel(labelToIgnore As String) As JsonConversionHelper","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Specifies a label to skip when parsing the JSON. The check is case-sensitive, so casing needs to match the casing in the JSON object.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Specifies a label to skip when parsing the JSON. The check is case-sensitive, so casing needs to match the casing in the JSON object.","inlinecomment":" \t &amp;apos; Specifies a label to skip when parsing the JSON. The check is case-sensitive, so casing needs to match the casing in the JSON object.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;When the helper parses all the labels in a JSON object to convert it from JSON to a VoltScript object, the code will skip the label &amp;quot;ipaddress&amp;quot;.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Call helper.ignoreLabel(&amp;quot;ipaddress&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelToIgnore","comment":"Label in JSON being parsed","valuetype":"String","filenamebase":"labelToIgnore_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperignoreLabel","qn":"labelToIgnore","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label in JSON being parsed&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label in JSON being parsed","inlinecomment":" \t &amp;apos; Label in JSON being parsed"}]},{"label":"jsonArrayToObjects","comment":"Converts an array to objects create with a constructor that takes no parameters.","valuetype":"Variant","filenamebase":"jsonArrayToObjects_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"jsonArrayToObjects","codesample":"%REM\nThis code is from deser-10.txt sample 4. Converts the JsonObject (obj) to a Variant array of Person objects.\n%END REM\nDim parser as New JsonParser\nDim obj as JsonObject\nDim helper as New JsonConversionHelper\nDim arr as Variant\nCall parser.loadFromJson(|{&amp;quot;success&amp;quot;: true, &amp;quot;data&amp;quot;: [{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42},{&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:30}]}|)\nSet obj = parser.getRootObject().getChild(&amp;quot;data&amp;quot;)\narr = helper.jsonArrayToObjects(obj, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(array As JsonObject, className As String, libName As String)","signature":"Public Function jsonArrayToObjects(array As JsonObject, className As String, libName As String) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Converts an array to objects create with a constructor that takes no parameters.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Converts an array to objects create with a constructor that takes no parameters.","inlinecomment":" \t &amp;apos; Converts an array to objects create with a constructor that takes no parameters.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;This code is from deser-10.txt sample 4. Converts the JsonObject (obj) to a Variant array of Person objects.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser&amp;lt;br /&amp;gt;Dim obj as JsonObject&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Dim arr as Variant&amp;lt;br /&amp;gt;Call parser.loadFromJson(|{&amp;quot;success&amp;quot;: true, &amp;quot;data&amp;quot;: [{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42},{&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:30}]}|)&amp;lt;br /&amp;gt;Set obj = parser.getRootObject().getChild(&amp;quot;data&amp;quot;)&amp;lt;br /&amp;gt;arr = helper.jsonArrayToObjects(obj, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"array","comment":"Array of JSON objects","valuetype":"JsonObject","filenamebase":"array_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperjsonArrayToObjects","qn":"array","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Array of JSON objects&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Array of JSON objects","inlinecomment":" \t &amp;apos; Array of JSON objects"},{"label":"className","comment":"Class name to create object for","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperjsonArrayToObjects","qn":"className","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class name to create object for&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class name to create object for","inlinecomment":" \t &amp;apos; Class name to create object for"},{"label":"libName","comment":"Script containing className","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperjsonArrayToObjects","qn":"libName","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Script containing className&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Script containing className","inlinecomment":" \t &amp;apos; Script containing className"}]},{"label":"reset","comment":"Resets the holder object containing the return value. This allows you to re-use the helper.","valuetype":"JsonConversionHelper","filenamebase":"reset_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"reset","codesample":"%REM\nUses a helper to deserialize JSON to a Person object, then resets it so it can be re-used by subsequent code. The mainHolder property will be re-initialized, but all converters or labels to ignore will still exist in the helper. So subsequent calls will also ignore &amp;quot;gender&amp;quot; label.\n%END REM\nDim json as String\nDim helper as New JsonConversionHelper()\nDim jd as Person\njson = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42,&amp;quot;gender&amp;quot;:&amp;quot;M&amp;quot;}|\nSet jd = helper.ignoreLabel(&amp;quot;gender&amp;quot;).fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)\nCall helper.reset()","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function reset() As JsonConversionHelper","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Resets the holder object containing the return value. This allows you to re-use the helper.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Resets the holder object containing the return value. This allows you to re-use the helper.","inlinecomment":" \t &amp;apos; Resets the holder object containing the return value. This allows you to re-use the helper.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Uses a helper to deserialize JSON to a Person object, then resets it so it can be re-used by subsequent code. The mainHolder property will be re-initialized, but all converters or labels to ignore will still exist in the helper. So subsequent calls will also ignore &amp;quot;gender&amp;quot; label.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim jd as Person&amp;lt;br /&amp;gt;json = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42,&amp;quot;gender&amp;quot;:&amp;quot;M&amp;quot;}|&amp;lt;br /&amp;gt;Set jd = helper.ignoreLabel(&amp;quot;gender&amp;quot;).fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)&amp;lt;br /&amp;gt;Call helper.reset()", "signatureelements":["Public","Function"]},{"label":"shouldIgnoreLabel","comment":"Checks whether to skip a label when parsing the JSON","valuetype":"Boolean","filenamebase":"shouldIgnoreLabel_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"shouldIgnoreLabel","codesample":"%REM\nThe code will print true for whether &amp;quot;gender&amp;quot; should be ignored, but false for &amp;quot;firstName&amp;quot;\n%END REM\nDim json as String\nDim helper as New JsonConversionHelper()\nDim jd as Person\njson = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42,&amp;quot;gender&amp;quot;:&amp;quot;M&amp;quot;}|\nSet jd = helper.ignoreLabel(&amp;quot;gender&amp;quot;).fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)\nPrint helper.shouldIgnoreLabel(&amp;quot;gender&amp;quot;)\nPrint helper.shouldIgnoreLabel(&amp;quot;firstName&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String)","signature":"Public Function shouldIgnoreLabel(labelName As String) As Boolean","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Checks whether to skip a label when parsing the JSON&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Checks whether to skip a label when parsing the JSON","inlinecomment":" \t &amp;apos; Checks whether to skip a label when parsing the JSON","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The code will print true for whether &amp;quot;gender&amp;quot; should be ignored, but false for &amp;quot;firstName&amp;quot;&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim jd as Person&amp;lt;br /&amp;gt;json = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42,&amp;quot;gender&amp;quot;:&amp;quot;M&amp;quot;}|&amp;lt;br /&amp;gt;Set jd = helper.ignoreLabel(&amp;quot;gender&amp;quot;).fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)&amp;lt;br /&amp;gt;Print helper.shouldIgnoreLabel(&amp;quot;gender&amp;quot;)&amp;lt;br /&amp;gt;Print helper.shouldIgnoreLabel(&amp;quot;firstName&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label in JSON being parsed","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelpershouldIgnoreLabel","qn":"labelName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label in JSON being parsed&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label in JSON being parsed","inlinecomment":" \t &amp;apos; Label in JSON being parsed"}]},{"label":"toJson","comment":"Main functon to serialize a VoltScript object / array to a JSON object","valuetype":"JsonObject","filenamebase":"toJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"toJson","codesample":"%REM\nCreates a person and converts it to a JsonObject\n%END REM\nDim helper as New JsonConversionHelper()\nDim jsonObj as JsonObject\nDim jd as New Person\njd.firstName = &amp;quot;John&amp;quot;\njd.lastName = &amp;quot;Doe&amp;quot;\njd.age = 42\nCall helper.withScalarConverter(&amp;quot;firstName&amp;quot;).withScalarConverter(&amp;quot;lastName&amp;quot;).withScalarConverter(&amp;quot;age&amp;quot;)\nSet jsonObj = helper.toJson(jd)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(obj As Variant)","signature":"Public Function toJson(obj As Variant) As JsonObject","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Main functon to serialize a VoltScript object / array to a JSON object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Main functon to serialize a VoltScript object / array to a JSON object","inlinecomment":" \t &amp;apos; Main functon to serialize a VoltScript object / array to a JSON object","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Creates a person and converts it to a JsonObject&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim jd as New Person&amp;lt;br /&amp;gt;jd.firstName = &amp;quot;John&amp;quot;&amp;lt;br /&amp;gt;jd.lastName = &amp;quot;Doe&amp;quot;&amp;lt;br /&amp;gt;jd.age = 42&amp;lt;br /&amp;gt;Call helper.withScalarConverter(&amp;quot;firstName&amp;quot;).withScalarConverter(&amp;quot;lastName&amp;quot;).withScalarConverter(&amp;quot;age&amp;quot;)&amp;lt;br /&amp;gt;Set jsonObj = helper.toJson(jd)", "signatureelements":["Public","Function"], "arguments":[{"label":"obj","comment":"VoltScript object or array of VoltScript objects to serialize","valuetype":"Variant","filenamebase":"obj_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelpertoJson","qn":"obj","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;VoltScript object or array of VoltScript objects to serialize&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"VoltScript object or array of VoltScript objects to serialize","inlinecomment":" \t &amp;apos; VoltScript object or array of VoltScript objects to serialize"}]},{"label":"toJsonString","comment":"Main function to serialize a VoltScript object / array to a string","valuetype":"String","filenamebase":"toJsonString_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"toJsonString","codesample":"%REM\nCreates a person and converts it to a string of pretty-printed JSON\n%END REM\nDim helper as New JsonConversionHelper()\nDim jd as New Person\njd.firstName = &amp;quot;John&amp;quot;\njd.lastName = &amp;quot;Doe&amp;quot;\njd.age = 42\nCall helper.withScalarConverter(&amp;quot;firstName&amp;quot;).withScalarConverter(&amp;quot;lastName&amp;quot;).withScalarConverter(&amp;quot;age&amp;quot;)\nPrint helper.toJsonString(jd, true)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(obj As Variant, prettify As Boolean)","signature":"Public Function toJsonString(obj As Variant, prettify As Boolean) As String","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Main function to serialize a VoltScript object / array to a string&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Main function to serialize a VoltScript object / array to a string","inlinecomment":" \t &amp;apos; Main function to serialize a VoltScript object / array to a string","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Creates a person and converts it to a string of pretty-printed JSON&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim jd as New Person&amp;lt;br /&amp;gt;jd.firstName = &amp;quot;John&amp;quot;&amp;lt;br /&amp;gt;jd.lastName = &amp;quot;Doe&amp;quot;&amp;lt;br /&amp;gt;jd.age = 42&amp;lt;br /&amp;gt;Call helper.withScalarConverter(&amp;quot;firstName&amp;quot;).withScalarConverter(&amp;quot;lastName&amp;quot;).withScalarConverter(&amp;quot;age&amp;quot;)&amp;lt;br /&amp;gt;Print helper.toJsonString(jd, true)", "signatureelements":["Public","Function"], "arguments":[{"label":"obj","comment":"VoltScript object or array of VoltScript objects to serialize","valuetype":"Variant","filenamebase":"obj_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelpertoJsonString","qn":"obj","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;VoltScript object or array of VoltScript objects to serialize&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"VoltScript object or array of VoltScript objects to serialize","inlinecomment":" \t &amp;apos; VoltScript object or array of VoltScript objects to serialize"},{"label":"prettify","comment":"Output prettified JSON string or compressed","valuetype":"Boolean","filenamebase":"prettify_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelpertoJsonString","qn":"prettify","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Output prettified JSON string or compressed&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Output prettified JSON string or compressed","inlinecomment":" \t &amp;apos; Output prettified JSON string or compressed"}]},{"label":"toObject","comment":"Passes a JSON object to the helper and tells it what object type to create, defined in which file.","valuetype":"JsonConversionHelper","filenamebase":"toObject_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"toObject","codesample":"%REM\nCreates a custom constructor to call a Pet&amp;apos;s New method, which takes two parameters - name and type, in that order.\nThis code is found in deser-80 sample.\n%END REM\nDim pet as Pet\nDim helper as New JsonConversionHelper\nDim petConstructor as New JsonCustomConstructor()\nCall petConstructor.withParm(&amp;quot;name&amp;quot;, &amp;quot;&amp;quot;).withParam(&amp;quot;type&amp;quot;, &amp;quot;&amp;quot;)\nSet pet = helper.withCustomCostructor(petConstructor)._\n    toObject(source, &amp;quot;Pet&amp;quot;, &amp;quot;deser-80&amp;quot;)._\n    fromJson(source)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As JsonObject, className As String, libName As String)","signature":"Public Function toObject(source As JsonObject, className As String, libName As String) As JsonConversionHelper","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes a JSON object to the helper and tells it what object type to create, defined in which file.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes a JSON object to the helper and tells it what object type to create, defined in which file.","inlinecomment":" \t &amp;apos; Passes a JSON object to the helper and tells it what object type to create, defined in which file.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Creates a custom constructor to call a Pet&amp;apos;s New method, which takes two parameters - name and type, in that order.&amp;lt;br /&amp;gt;This code is found in deser-80 sample.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim pet as Pet&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Dim petConstructor as New JsonCustomConstructor()&amp;lt;br /&amp;gt;Call petConstructor.withParm(&amp;quot;name&amp;quot;, &amp;quot;&amp;quot;).withParam(&amp;quot;type&amp;quot;, &amp;quot;&amp;quot;)&amp;lt;br /&amp;gt;Set pet = helper.withCustomCostructor(petConstructor)._&amp;lt;br /&amp;gt;    toObject(source, &amp;quot;Pet&amp;quot;, &amp;quot;deser-80&amp;quot;)._&amp;lt;br /&amp;gt;    fromJson(source)", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"JSON object to deserialize","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelpertoObject","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize","inlinecomment":" \t &amp;apos; JSON object to deserialize"},{"label":"className","comment":"Class to create an instance of","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelpertoObject","qn":"className","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class to create an instance of&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class to create an instance of","inlinecomment":" \t &amp;apos; Class to create an instance of"},{"label":"libName","comment":"Script where the class is defined","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelpertoObject","qn":"libName","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Script where the class is defined&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Script where the class is defined","inlinecomment":" \t &amp;apos; Script where the class is defined"}]},{"label":"withArrayConverter","comment":"Adds an array converter to this object","valuetype":"JsonConversionHelper","filenamebase":"withArrayConverter_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"withArrayConverter","codesample":"%REM\nThe following code is from ser-20.txt sample 1. Converts a Session object to a String, outputting &amp;quot;id&amp;quot; and &amp;quot;title&amp;quot; as strings, and using an arrayConverter to convert the &amp;quot;products&amp;quot; property of the Session (a Variant array) to a JSON array.\n%END REM\nDim sess as New Session\nDim json as String\nDim helper as New JsonConversionHelper\nsess.id = &amp;quot;Ad16&amp;quot;\nsess.title = &amp;quot;Collaborate around Business Applications in Communities&amp;quot;\nsess.products = Split(&amp;quot;Domino,Connections,Volt&amp;quot;, &amp;quot;,&amp;quot;)\nCall helper.withScalarConverter(&amp;quot;id&amp;quot;).withScalarConverter(&amp;quot;title&amp;quot;).withArrayConverter(&amp;quot;products&amp;quot;)\njson = helper.toJsonString(sess, true)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String)","signature":"Public Function withArrayConverter(labelName As String) As JsonConversionHelper","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds an array converter to this object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds an array converter to this object","inlinecomment":" \t &amp;apos; Adds an array converter to this object","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is from ser-20.txt sample 1. Converts a Session object to a String, outputting &amp;quot;id&amp;quot; and &amp;quot;title&amp;quot; as strings, and using an arrayConverter to convert the &amp;quot;products&amp;quot; property of the Session (a Variant array) to a JSON array.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim sess as New Session&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;sess.id = &amp;quot;Ad16&amp;quot;&amp;lt;br /&amp;gt;sess.title = &amp;quot;Collaborate around Business Applications in Communities&amp;quot;&amp;lt;br /&amp;gt;sess.products = Split(&amp;quot;Domino,Connections,Volt&amp;quot;, &amp;quot;,&amp;quot;)&amp;lt;br /&amp;gt;Call helper.withScalarConverter(&amp;quot;id&amp;quot;).withScalarConverter(&amp;quot;title&amp;quot;).withArrayConverter(&amp;quot;products&amp;quot;)&amp;lt;br /&amp;gt;json = helper.toJsonString(sess, true)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperwithArrayConverter","qn":"labelName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)","inlinecomment":" \t &amp;apos; Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)"}]},{"label":"withCustomConstructor","comment":"Passes a custom constructor to use to create the object during deserialization","valuetype":"JsonConversionHelper","filenamebase":"withCustomConstructor_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"withCustomConstructor","codesample":"%REM\nThe code below calls the Session class&amp;apos;s New method passing two parameters, the JSON object&amp;apos;s &amp;quot;id&amp;quot; and &amp;quot;title&amp;quot; elements, in that order.\nThe code can be found in the deser-70.txt example.\n%END REM\nDim sess as Session\nDim helper as New JsonConversionHelper\nDim sessionConstructor as New JsonCustomConstructor\nDim json as String\n  \njson = |{&amp;quot;id&amp;quot;:&amp;quot;Ad01&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Domino HA&amp;quot;}|\nCall sessionConstructor.withParam(&amp;quot;id&amp;quot;, &amp;quot;&amp;quot;).withTitle(&amp;quot;title&amp;quot;, &amp;quot;&amp;quot;)\nSet sess = helper.withCustomConstructor(sessionConstructor).fromJsonString(json, &amp;quot;Session&amp;quot;, &amp;quot;deser-70&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(constructor As JsonCustomConstructor)","signature":"Public Function withCustomConstructor(constructor As JsonCustomConstructor) As JsonConversionHelper","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes a custom constructor to use to create the object during deserialization&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes a custom constructor to use to create the object during deserialization","inlinecomment":" \t &amp;apos; Passes a custom constructor to use to create the object during deserialization","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The code below calls the Session class&amp;apos;s New method passing two parameters, the JSON object&amp;apos;s &amp;quot;id&amp;quot; and &amp;quot;title&amp;quot; elements, in that order.&amp;lt;br /&amp;gt;The code can be found in the deser-70.txt example.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim sess as Session&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Dim sessionConstructor as New JsonCustomConstructor&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;  &amp;lt;br /&amp;gt;json = |{&amp;quot;id&amp;quot;:&amp;quot;Ad01&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Domino HA&amp;quot;}|&amp;lt;br /&amp;gt;Call sessionConstructor.withParam(&amp;quot;id&amp;quot;, &amp;quot;&amp;quot;).withTitle(&amp;quot;title&amp;quot;, &amp;quot;&amp;quot;)&amp;lt;br /&amp;gt;Set sess = helper.withCustomConstructor(sessionConstructor).fromJsonString(json, &amp;quot;Session&amp;quot;, &amp;quot;deser-70&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"constructor","comment":"Custom constructor to use for creating the object","valuetype":"JsonCustomConstructor","filenamebase":"constructor_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperwithCustomConstructor","qn":"constructor","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Custom constructor to use for creating the object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Custom constructor to use for creating the object","inlinecomment":" \t &amp;apos; Custom constructor to use for creating the object"}]},{"label":"withCustomConverter","comment":"Adds a custom converter to this object","valuetype":"JsonConversionHelper","filenamebase":"withCustomConverter_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"withCustomConverter","codesample":"%REM\nEnsures that when extracting the gender element from a JSON object, the target class&amp;apos;s setGender method is called with the literal value &amp;quot;M&amp;quot;. \nThis is found in the CustomSetterTest sample, a hard-coded test for validation purposes only.\n%END REM\nDim helper as New JsonConversionHelper\nDim genderConverter as New JsonSetterConverter()\nCall genderConverter.forSetter(setGender).withLiteralParam(&amp;quot;M&amp;quot;)\nCall helper.withCustomConverter(&amp;quot;gender&amp;quot;, genderConverter)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String, converter As AbstractJsonConverter)","signature":"Public Function withCustomConverter(labelName As String, converter As AbstractJsonConverter) As JsonConversionHelper","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds a custom converter to this object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds a custom converter to this object","inlinecomment":" \t &amp;apos; Adds a custom converter to this object","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Ensures that when extracting the gender element from a JSON object, the target class&amp;apos;s setGender method is called with the literal value &amp;quot;M&amp;quot;. &amp;lt;br /&amp;gt;This is found in the CustomSetterTest sample, a hard-coded test for validation purposes only.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Dim genderConverter as New JsonSetterConverter()&amp;lt;br /&amp;gt;Call genderConverter.forSetter(setGender).withLiteralParam(&amp;quot;M&amp;quot;)&amp;lt;br /&amp;gt;Call helper.withCustomConverter(&amp;quot;gender&amp;quot;, genderConverter)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperwithCustomConverter","qn":"labelName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)","inlinecomment":" \t &amp;apos; Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)"},{"label":"converter","comment":"Custom converter to apply","valuetype":"AbstractJsonConverter","filenamebase":"converter_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperwithCustomConverter","qn":"converter","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Custom converter to apply&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Custom converter to apply","inlinecomment":" \t &amp;apos; Custom converter to apply"}]},{"label":"withObject","comment":"Passes an existing object into the helper, so you can merge content from an additional JSON object into it.","valuetype":"JsonConversionHelper","filenamebase":"withObject_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"withObject","codesample":"%REM\nConverts a string of JSON to a Person object. The code is taken from the first deserialization example.\n%REM\nDim json as String\nDim parser as New JsonParser\nDim helper as New JsonConversionHelper()\nDim jd as New Person\njson = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|\nCall parser.loadFromJson(json)\nCall helper.withObject*jd).fromJson(parser.getRootObject)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(object As Variant)","signature":"Public Function withObject(object As Variant) As JsonConversionHelper","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes an existing object into the helper, so you can merge content from an additional JSON object into it.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes an existing object into the helper, so you can merge content from an additional JSON object into it.","inlinecomment":" \t &amp;apos; Passes an existing object into the helper, so you can merge content from an additional JSON object into it.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Converts a string of JSON to a Person object. The code is taken from the first deserialization example.&amp;lt;br /&amp;gt;%REM&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;Dim parser as New JsonParser&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim jd as New Person&amp;lt;br /&amp;gt;json = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|&amp;lt;br /&amp;gt;Call parser.loadFromJson(json)&amp;lt;br /&amp;gt;Call helper.withObject*jd).fromJson(parser.getRootObject)", "signatureelements":["Public","Function"], "arguments":[{"label":"object","comment":"Object to merge properties into","valuetype":"Variant","filenamebase":"object_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperwithObject","qn":"object","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Object to merge properties into&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Object to merge properties into","inlinecomment":" \t &amp;apos; Object to merge properties into"}]},{"label":"withScalarConverter","comment":"Adds a scalar converter to this object","valuetype":"JsonConversionHelper","filenamebase":"withScalarConverter_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"withScalarConverter","codesample":"%REM\nCreates a person and converts it to a JsonObject. Converts strings to JSON strings, numerics to JSON numbers.\n%END REM\nDim helper as New JsonConversionHelper()\nDim jsonObj as JsonObject\nDim jd as New Person\njd.firstName = &amp;quot;John&amp;quot;\njd.lastName = &amp;quot;Doe&amp;quot;\njd.age = 42\nCall helper.withScalarConverter(&amp;quot;firstName&amp;quot;).withScalarConverter(&amp;quot;lastName&amp;quot;).withScalarConverter(&amp;quot;age&amp;quot;)\nSet jsonObj = helper.toJson(jd)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String)","signature":"Public Function withScalarConverter(labelName As String) As JsonConversionHelper","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds a scalar converter to this object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds a scalar converter to this object","inlinecomment":" \t &amp;apos; Adds a scalar converter to this object","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Creates a person and converts it to a JsonObject. Converts strings to JSON strings, numerics to JSON numbers.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim jd as New Person&amp;lt;br /&amp;gt;jd.firstName = &amp;quot;John&amp;quot;&amp;lt;br /&amp;gt;jd.lastName = &amp;quot;Doe&amp;quot;&amp;lt;br /&amp;gt;jd.age = 42&amp;lt;br /&amp;gt;Call helper.withScalarConverter(&amp;quot;firstName&amp;quot;).withScalarConverter(&amp;quot;lastName&amp;quot;).withScalarConverter(&amp;quot;age&amp;quot;)&amp;lt;br /&amp;gt;Set jsonObj = helper.toJson(jd)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonConversionHelperwithScalarConverter","qn":"labelName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)","inlinecomment":" \t &amp;apos; Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)"}]},{"label":"disableDebug","comment":"Disables debug printing, switched off by default.","valuetype":"","filenamebase":"disableDebug_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"disableDebug","codesample":"%REM\nEnables debug for the duration of converting a string of JSON to a Person, then disables debug again. The use case for this would be that deserialization is not working, so the developer is trying to trace progress to see where it is failing.\n%END REM\nDim helper as New JsonConversionHelper\nCall helper.enableDebug()\nCall helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)\nCall helper.disableDebug()","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub disableDebug()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Disables debug printing, switched off by default.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Disables debug printing, switched off by default.","inlinecomment":" \t &amp;apos; Disables debug printing, switched off by default.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Enables debug for the duration of converting a string of JSON to a Person, then disables debug again. The use case for this would be that deserialization is not working, so the developer is trying to trace progress to see where it is failing.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Call helper.enableDebug()&amp;lt;br /&amp;gt;Call helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)&amp;lt;br /&amp;gt;Call helper.disableDebug()", "signatureelements":["Public","Sub"]},{"label":"Delete","comment":"Destructor, outputs (if in debug) which functions have been logged as encountered and erases converters List.","valuetype":"","filenamebase":"Delete_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"Delete","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub Delete()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Destructor, outputs (if in debug) which functions have been logged as encountered and erases converters List.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Destructor, outputs (if in debug) which functions have been logged as encountered and erases converters List.","inlinecomment":" \t &amp;apos; Destructor, outputs (if in debug) which functions have been logged as encountered and erases converters List.","parentclassname":"JsonConversionHelper","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"enableDebug","comment":"Enables debug printing, switched off by default.","valuetype":"","filenamebase":"enableDebug_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"enableDebug","codesample":"%REM\nEnables debug for the duration of converting a string of JSON to a Person, then disables debug again. The use case for this would be that deserialization is not working, so the developer is trying to trace progress to see where it is failing.\n%END REM\nDim helper as New JsonConversionHelper\nCall helper.enableDebug()\nCall helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)\nCall helper.disableDebug()","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub enableDebug()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Enables debug printing, switched off by default.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Enables debug printing, switched off by default.","inlinecomment":" \t &amp;apos; Enables debug printing, switched off by default.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Enables debug for the duration of converting a string of JSON to a Person, then disables debug again. The use case for this would be that deserialization is not working, so the developer is trying to trace progress to see where it is failing.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Call helper.enableDebug()&amp;lt;br /&amp;gt;Call helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)&amp;lt;br /&amp;gt;Call helper.disableDebug()", "signatureelements":["Public","Sub"]},{"label":"failSilently","comment":"Prevents throwing errors if deserialization / serialization fails, instead just aborts settings the properties.","valuetype":"","filenamebase":"failSilently_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"failSilently","codesample":"%REM\nThis code converts a string of JSON to a Person object, ignoring any labels that do not have corresponding properties or incorrect data types.\n%END REM\nDim json as String\nDim person as Person\nDim helper as New JsonConversionHelper()\njson = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;: 42, &amp;quot;gender&amp;quot;: &amp;quot;M&amp;quot;}|\nCall helper.failSilently()\nSet person = helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub failSilently()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Prevents throwing errors if deserialization / serialization fails, instead just aborts settings the properties.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Prevents throwing errors if deserialization / serialization fails, instead just aborts settings the properties.","inlinecomment":" \t &amp;apos; Prevents throwing errors if deserialization / serialization fails, instead just aborts settings the properties.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&amp;lt;br /&amp;gt;This code converts a string of JSON to a Person object, ignoring any labels that do not have corresponding properties or incorrect data types.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;Dim person as Person&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;json = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;: 42, &amp;quot;gender&amp;quot;: &amp;quot;M&amp;quot;}|&amp;lt;br /&amp;gt;Call helper.failSilently()&amp;lt;br /&amp;gt;Set person = helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)", "signatureelements":["Public","Sub"]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHelper","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","inlinecomment":" \t &amp;apos; Constructor","parentclassname":"JsonConversionHelper","codesamplehtml":"", "signatureelements":["Public","Sub"]}]},{"classname":"JsonConversionHolder","comment":"Holder object for temporary output of serialization / deserialization","valuetype":"","filenamebase":"JsonConversionHolder_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"JsonConversionHolder","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"78586C5B58CFDA1E80258935003F4B5A","signature":"Public Class JsonConversionHolder","modifiers":"Public","classname":"JsonConversionHolder","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Holder object for temporary output of serialization / deserialization&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Holder object for temporary output of serialization / deserialization","inlinecomment":" \t &amp;apos; Holder object for temporary output of serialization / deserialization","codesamplehtml":"", "methods":[{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonConversionHolder","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonConversionHolder","codesamplehtml":"", "signatureelements":["Public","Sub"]}], "variables":[]},{"classname":"JsonCustomConstructor","comment":"Base implementation of AbstractJsonConstructor for constructors that take parameters.","valuetype":"AbstractJsonConstructor","filenamebase":"JsonCustomConstructor_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"JsonCustomConstructor","codesample":"%REM\nCreates a custom constructor to call a Pet&amp;apos;s New method, which takes two parameters - name and type, in that order.\nThis code is found in deser-80 sample.\n%END REM\nDim pet as Pet\nDim helper as New JsonConversionHelper\nDim petConstructor as New JsonCustomConstructor()\nCall petConstructor.withParam(&amp;quot;name&amp;quot;, &amp;quot;&amp;quot;).withParam(&amp;quot;type&amp;quot;, &amp;quot;&amp;quot;)\nSet pet = helper.withCustomConstructor(petConstructor)._\n    toObject(source, &amp;quot;Pet&amp;quot;, &amp;quot;deser-80&amp;quot;)._\n    fromJson(source)","signaturecode":3072,"instancecode":1024,"parentclassname":"AbstractJsonConstructor","classtype":"Derived","classderivetype":"AbstractJsonConstructor","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"D55720B9BB3943158025893500502317","signature":"Public Class JsonCustomConstructor As AbstractJsonConstructor","modifiers":"Public","classname":"JsonCustomConstructor","constructorsignature":"Public Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Base implementation of AbstractJsonConstructor for constructors that take parameters.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Base implementation of AbstractJsonConstructor for constructors that take parameters.","inlinecomment":" \t &amp;apos; Base implementation of AbstractJsonConstructor for constructors that take parameters.","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Creates a custom constructor to call a Pet&amp;apos;s New method, which takes two parameters - name and type, in that order.&amp;lt;br /&amp;gt;This code is found in deser-80 sample.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim pet as Pet&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Dim petConstructor as New JsonCustomConstructor()&amp;lt;br /&amp;gt;Call petConstructor.withParam(&amp;quot;name&amp;quot;, &amp;quot;&amp;quot;).withParam(&amp;quot;type&amp;quot;, &amp;quot;&amp;quot;)&amp;lt;br /&amp;gt;Set pet = helper.withCustomConstructor(petConstructor)._&amp;lt;br /&amp;gt;    toObject(source, &amp;quot;Pet&amp;quot;, &amp;quot;deser-80&amp;quot;)._&amp;lt;br /&amp;gt;    fromJson(source)", "methods":[{"label":"createObject","comment":"Overridden function","valuetype":"Variant","filenamebase":"createObject_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"createObject","codesample":"%REM\nCreates an instance of className as defined in a script file called libName, and assigns it to mainHolder&amp;apos;s contents property.\nThe code is an abbreviated version of code in JsonConversionHelper.toObject().\n%END REM\nMe.mainHolder.isObject = True\nDim noArgsConstructor as New JsonNoArgsConstructor()\nSet Me.mainHolder.contents = noArgsConstructor.createObject(className, libName)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(className As String, libName As String)","signature":"Public Function createObject(className As String, libName As String) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function","inlinecomment":" \t &amp;apos; Overridden function","parentclassname":"JsonCustomConstructor","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Creates an instance of className as defined in a script file called libName, and assigns it to mainHolder&amp;apos;s contents property.&amp;lt;br /&amp;gt;The code is an abbreviated version of code in JsonConversionHelper.toObject().&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Me.mainHolder.isObject = True&amp;lt;br /&amp;gt;Dim noArgsConstructor as New JsonNoArgsConstructor()&amp;lt;br /&amp;gt;Set Me.mainHolder.contents = noArgsConstructor.createObject(className, libName)", "signatureelements":["Public","Function"], "arguments":[{"label":"className","comment":"Class to create an instance of","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorcreateObject","qn":"className","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class to create an instance of&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class to create an instance of","inlinecomment":" \t &amp;apos; Class to create an instance of"},{"label":"libName","comment":"Script file where the class is defined","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorcreateObject","qn":"libName","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Script file where the class is defined&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Script file where the class is defined","inlinecomment":" \t &amp;apos; Script file where the class is defined"}]},{"label":"withContext","comment":"Passes a JSON object from which to extract parameter values","valuetype":"JsonCustomConstructor","filenamebase":"withContext_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"withContext","codesample":"%REM\nIf a constructor is defined for the JsonConversionHelper, it is used to create an instance of className as defined in a script file called libName, using as its context a JsonObject (source) and the current jsonConversionHelper&amp;apos;s list of converters.\nThe code is an abbreviated version of code in JsonConversionHelper.toObject().\n%END REM\nIf Not Me.constructor is Nothing Then\n    SetMe. mainHolder.contents = Me.constructor.withContext(source, Me.converters).createObject(className, libName)\nEnd If","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As JsonObject, converters List As AbstractJsonConverter)","signature":"Public Function withContext(source As JsonObject, converters List As AbstractJsonConverter) As JsonCustomConstructor","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes a JSON object from which to extract parameter values&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes a JSON object from which to extract parameter values","inlinecomment":" \t &amp;apos; Passes a JSON object from which to extract parameter values","parentclassname":"JsonCustomConstructor","codesamplehtml":"%REM&amp;lt;br /&amp;gt;If a constructor is defined for the JsonConversionHelper, it is used to create an instance of className as defined in a script file called libName, using as its context a JsonObject (source) and the current jsonConversionHelper&amp;apos;s list of converters.&amp;lt;br /&amp;gt;The code is an abbreviated version of code in JsonConversionHelper.toObject().&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;If Not Me.constructor is Nothing Then&amp;lt;br /&amp;gt;    SetMe. mainHolder.contents = Me.constructor.withContext(source, Me.converters).createObject(className, libName)&amp;lt;br /&amp;gt;End If", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"JsonObject from which to extract parameters for constructor","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorwithContext","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject from which to extract parameters for constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject from which to extract parameters for constructor","inlinecomment":" \t &amp;apos; JsonObject from which to extract parameters for constructor"},{"label":"converters","comment":"List of AbstractJsonConverters with which to convert the parameters","valuetype":"AbstractJsonConverter","filenamebase":"converters_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorwithContext","qn":"converters","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;List of AbstractJsonConverters with which to convert the parameters&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"List of AbstractJsonConverters with which to convert the parameters","inlinecomment":" \t &amp;apos; List of AbstractJsonConverters with which to convert the parameters", "attributes":["List"]}]},{"label":"withLiteralParam","comment":"Fluent method to pass a literal value as a parameter for the constructor","valuetype":"JsonCustomConstructor","filenamebase":"withLiteralParam_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"withLiteralParam","codesample":"%REM\nEnsures that when extracting the gender element from a JSON object, the target class&amp;apos;s setGender method is called with the literal value &amp;quot;M&amp;quot;. \nThis is found in the CustomSetterTest sample, a hard-coded test for validation purposes only.\n%END REM\nDim helper as New JsonConversionHelper()\nDim genderConverter as New JsonSetterConverter()\nCall genderConverter.forSetter(setGender).withLiteralParam(&amp;quot;M&amp;quot;)\nCall helper.withCustomConverter(&amp;quot;gender&amp;quot;, genderConverter)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(paramVal As Variant)","signature":"Public Function withLiteralParam(paramVal As Variant) As JsonCustomConstructor","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Fluent method to pass a literal value as a parameter for the constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Fluent method to pass a literal value as a parameter for the constructor","inlinecomment":" \t &amp;apos; Fluent method to pass a literal value as a parameter for the constructor","parentclassname":"JsonCustomConstructor","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Ensures that when extracting the gender element from a JSON object, the target class&amp;apos;s setGender method is called with the literal value &amp;quot;M&amp;quot;. &amp;lt;br /&amp;gt;This is found in the CustomSetterTest sample, a hard-coded test for validation purposes only.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim genderConverter as New JsonSetterConverter()&amp;lt;br /&amp;gt;Call genderConverter.forSetter(setGender).withLiteralParam(&amp;quot;M&amp;quot;)&amp;lt;br /&amp;gt;Call helper.withCustomConverter(&amp;quot;gender&amp;quot;, genderConverter)", "signatureelements":["Public","Function"], "arguments":[{"label":"paramVal","comment":"Literal value to pass to the constructor as nth parameter","valuetype":"Variant","filenamebase":"paramVal_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorwithLiteralParam","qn":"paramVal","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Literal value to pass to the constructor as nth parameter&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Literal value to pass to the constructor as nth parameter","inlinecomment":" \t &amp;apos; Literal value to pass to the constructor as nth parameter"}]},{"label":"withParam","comment":"Fluent method to retrieve a parameter value for the constructor from the JSON object or a default value to use if the label is not in the JSON object.","valuetype":"JsonCustomConstructor","filenamebase":"withParam_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"withParam","codesample":"%REM\nThe code below calls the Session class&amp;apos;s New method passing two parameters, the JSON object&amp;apos;s &amp;quot;id&amp;quot; and &amp;quot;title&amp;quot; elements, in that order.\nThe code can be found in the deser-70.txt example.\n%END REM\nDim sess as Session\nDim helper as New JsonConversionHelper\nDim sessionConstructor as New JsonCustomConstructor\nDim json as String\n  \njson = |{&amp;quot;id&amp;quot;:&amp;quot;Ad01&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Domino HA&amp;quot;}|\nCall sessionConstructor.withParam(&amp;quot;id&amp;quot;, &amp;quot;&amp;quot;).withTitle(&amp;quot;title&amp;quot;, &amp;quot;&amp;quot;)\nSet sess = helper.withCustomConstructor(sessionConstructor).fromJsonString(json, &amp;quot;Session&amp;quot;, &amp;quot;deser-70&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String, defaultValue As Variant)","signature":"Public Function withParam(labelName As String, defaultValue As Variant) As JsonCustomConstructor","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Fluent method to retrieve a parameter value for the constructor from the JSON object or a default value to use if the label is not in the JSON object.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Fluent method to retrieve a parameter value for the constructor from the JSON object or a default value to use if the label is not in the JSON object.","inlinecomment":" \t &amp;apos; Fluent method to retrieve a parameter value for the constructor from the JSON object or a default value to use if the label is not in the JSON object.","parentclassname":"JsonCustomConstructor","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The code below calls the Session class&amp;apos;s New method passing two parameters, the JSON object&amp;apos;s &amp;quot;id&amp;quot; and &amp;quot;title&amp;quot; elements, in that order.&amp;lt;br /&amp;gt;The code can be found in the deser-70.txt example.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim sess as Session&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper&amp;lt;br /&amp;gt;Dim sessionConstructor as New JsonCustomConstructor&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;  &amp;lt;br /&amp;gt;json = |{&amp;quot;id&amp;quot;:&amp;quot;Ad01&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Domino HA&amp;quot;}|&amp;lt;br /&amp;gt;Call sessionConstructor.withParam(&amp;quot;id&amp;quot;, &amp;quot;&amp;quot;).withTitle(&amp;quot;title&amp;quot;, &amp;quot;&amp;quot;)&amp;lt;br /&amp;gt;Set sess = helper.withCustomConstructor(sessionConstructor).fromJsonString(json, &amp;quot;Session&amp;quot;, &amp;quot;deser-70&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label to find in the JSON object","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorwithParam","qn":"labelName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label to find in the JSON object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label to find in the JSON object","inlinecomment":" \t &amp;apos; Label to find in the JSON object"},{"label":"defaultValue","comment":"Default to use, if the label is not in the JSON","valuetype":"Variant","filenamebase":"defaultValue_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonCustomConstructorwithParam","qn":"defaultValue","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Default to use, if the label is not in the JSON&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Default to use, if the label is not in the JSON","inlinecomment":" \t &amp;apos; Default to use, if the label is not in the JSON"}]},{"label":"cleanup","comment":"Resets globals","valuetype":"","filenamebase":"cleanup_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"cleanup","codesample":"See AbstractJsonConverter.cleanup()","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub cleanup()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Resets globals&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Resets globals","inlinecomment":" \t &amp;apos; Resets globals","parentclassname":"JsonCustomConstructor","codesamplehtml":"See AbstractJsonConverter.cleanup()", "signatureelements":["Public","Sub"]},{"label":"Delete","comment":"Destructor, erases converter list","valuetype":"","filenamebase":"Delete_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"Delete","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub Delete()","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Destructor, erases converter list&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Destructor, erases converter list","inlinecomment":" \t &amp;apos; Destructor, erases converter list","parentclassname":"JsonCustomConstructor","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonCustomConstructor","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonCustomConstructor","codesamplehtml":"", "signatureelements":["Public","Sub"]}], "variables":[]},{"classname":"JsonGetterConverter","comment":"Custom getter converter","valuetype":"AbstractJsonFunctionConverter","filenamebase":"JsonGetterConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"JsonGetterConverter","codesample":"%REM\nThe following code is an abbreviated version of code in CustomGetterTest. Custom Getters are used in serialization - conversion to JSON. This code calls a getName(order as Boolean) function, writing the result to the &amp;quot;name&amp;quot; label in the resulting JSON object.\n%END REM\nDim helper as New JsonConversionHelper()\nDim nameGetter as New JsonGetterConverter()\nDim jsonObj as JsonObject\n\nCall nameGetter.forGetter(&amp;quot;getName&amp;quot;).withLiteralParam(true)\nSet jsonObj = helper.withCustomConverter(&amp;quot;name, nameGetter)","signaturecode":3072,"instancecode":1024,"parentclassname":"AbstractJsonFunctionConverter","classtype":"Derived","classderivetype":"AbstractJsonFunctionConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"2E3A64DF0B0E3B9B802589350044A7D9","signature":"Public Class JsonGetterConverter As AbstractJsonFunctionConverter","modifiers":"Public","classname":"JsonGetterConverter","constructorsignature":"Public Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Custom getter converter&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Custom getter converter","inlinecomment":" \t &amp;apos; Custom getter converter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in CustomGetterTest. Custom Getters are used in serialization - conversion to JSON. This code calls a getName(order as Boolean) function, writing the result to the &amp;quot;name&amp;quot; label in the resulting JSON object.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim nameGetter as New JsonGetterConverter()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;&amp;lt;br /&amp;gt;Call nameGetter.forGetter(&amp;quot;getName&amp;quot;).withLiteralParam(true)&amp;lt;br /&amp;gt;Set jsonObj = helper.withCustomConverter(&amp;quot;name, nameGetter)", "methods":[{"label":"forGetter","comment":"Passes the getter name to look for in the relevant class","valuetype":"JsonGetterConverter","filenamebase":"forGetter_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonGetterConverter","qn":"forGetter","codesample":"%REM\nThe following code is an abbreviated version of code in CustomGetterTest. Custom Getters are used in serialization - conversion to JSON. This code calls a getName(order as Boolean) function, writing the result to the &amp;quot;name&amp;quot; label in the resulting JSON object.\n%END REM\nDim person as New Person(&amp;quot;John&amp;quot;, &amp;quot;Doe&amp;quot;, 42)\nDim helper as New JsonConversionHelper()\nDim nameGetter as New JsonGetterConverter()\nDim jsonObj as JsonObject\nCall nameGetter.forGetter(&amp;quot;getName&amp;quot;).withLiteralParam(true)\nSet jsonObj = helper.withCustomConverter(&amp;quot;name&amp;quot;, nameGetter).toJson(person)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(getterName As String)","signature":"Public Function forGetter(getterName As String) As JsonGetterConverter","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes the getter name to look for in the relevant class&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes the getter name to look for in the relevant class","inlinecomment":" \t &amp;apos; Passes the getter name to look for in the relevant class","parentclassname":"JsonGetterConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in CustomGetterTest. Custom Getters are used in serialization - conversion to JSON. This code calls a getName(order as Boolean) function, writing the result to the &amp;quot;name&amp;quot; label in the resulting JSON object.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim person as New Person(&amp;quot;John&amp;quot;, &amp;quot;Doe&amp;quot;, 42)&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim nameGetter as New JsonGetterConverter()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Call nameGetter.forGetter(&amp;quot;getName&amp;quot;).withLiteralParam(true)&amp;lt;br /&amp;gt;Set jsonObj = helper.withCustomConverter(&amp;quot;name&amp;quot;, nameGetter).toJson(person)", "signatureelements":["Public","Function"], "arguments":[{"label":"getterName","comment":"Function in the target class","valuetype":"String","filenamebase":"getterName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterforGetter","qn":"getterName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Function in the target class&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Function in the target class","inlinecomment":" \t &amp;apos; Function in the target class"}]},{"label":"deserialize","comment":"Overridden function, throws error for that class - getters are only for serialization.","valuetype":"","filenamebase":"deserialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonGetterConverter","qn":"deserialize","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(holder As JsonConversionHolder, source As JsonObject)","signature":"Public Sub deserialize(holder As JsonConversionHolder, source As JsonObject)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function, throws error for that class - getters are only for serialization.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function, throws error for that class - getters are only for serialization.","inlinecomment":" \t &amp;apos; Overridden function, throws error for that class - getters are only for serialization.","parentclassname":"JsonGetterConverter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"holder","comment":"Object to deserialize to","valuetype":"JsonConversionHolder","filenamebase":"holder_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterdeserialize","qn":"holder","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Object to deserialize to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Object to deserialize to","inlinecomment":" \t &amp;apos; Object to deserialize to"},{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterdeserialize","qn":"source","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"}]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonGetterConverter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonGetterConverter","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"serialize","comment":"Overridden function","valuetype":"","filenamebase":"serialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonGetterConverter","qn":"serialize","codesample":"%REM\nConverters are required for every property to be serialized to JSON, because we cannot use reflection to know what properties exist. So this code loops through all converters in the JsonConversionHelper and call their serialize method, which populates the JSON object from the global SamsaraObj, which has already been populated with a VoltScript object (e.g. an instance of a Person class).\nThe code is an abbreviated version of code in JsonConversionHelper.processObjectToJson()\n%END REM\nDim returnObj as New JsonObject()\nForAll converters in Me.converters\n    Call converter.serialize(samsaraObj, returnObj)\nEnd ForAll","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(source As Variant, target As JsonObject)","signature":"Public Sub serialize(source As Variant, target As JsonObject)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function","inlinecomment":" \t &amp;apos; Overridden function","parentclassname":"JsonGetterConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;Converters are required for every property to be serialized to JSON, because we cannot use reflection to know what properties exist. So this code loops through all converters in the JsonConversionHelper and call their serialize method, which populates the JSON object from the global SamsaraObj, which has already been populated with a VoltScript object (e.g. an instance of a Person class).&amp;lt;br /&amp;gt;The code is an abbreviated version of code in JsonConversionHelper.processObjectToJson()&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim returnObj as New JsonObject()&amp;lt;br /&amp;gt;ForAll converters in Me.converters&amp;lt;br /&amp;gt;    Call converter.serialize(samsaraObj, returnObj)&amp;lt;br /&amp;gt;End ForAll", "signatureelements":["Public","Sub"], "arguments":[{"label":"source","comment":"VoltScript object from which to serialize","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterserialize","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;VoltScript object from which to serialize&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"VoltScript object from which to serialize","inlinecomment":" \t &amp;apos; VoltScript object from which to serialize"},{"label":"target","comment":"JsonObject to write to","valuetype":"JsonObject","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonGetterConverterserialize","qn":"target","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject to write to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject to write to","inlinecomment":" \t &amp;apos; JsonObject to write to"}]}]},{"classname":"JsonNoArgsConstructor","comment":"Base implementation of AbstractJsonConstructor for empty constructors","valuetype":"JsonCustomConstructor","filenamebase":"JsonNoArgsConstructor_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"JsonNoArgsConstructor","codesample":"%REM\nThe following code is abbreviated code from JsonConversionHelper.toObject. It populates the mainContent property with an object of className using the class&amp;apos;s Sub New, which does not take any parameters.\n%END REM\nFunction toObject(source as JsonObject, className as String, libName as String) as JsonConversionHelper\n    Dim noArgsConstructor as New JsonNoArgsConstructor()\n    Set mainHolder.contents = noArgsConstructor.createObject(className, libName)\nEnd Function","signaturecode":3072,"instancecode":1024,"parentclassname":"JsonCustomConstructor","classtype":"Derived","classderivetype":"JsonCustomConstructor","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"5F65C8DBC749A31A8025893500510B38","signature":"Public Class JsonNoArgsConstructor As JsonCustomConstructor","modifiers":"Public","classname":"JsonNoArgsConstructor","constructorsignature":"Public Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Base implementation of AbstractJsonConstructor for empty constructors&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Base implementation of AbstractJsonConstructor for empty constructors","inlinecomment":" \t &amp;apos; Base implementation of AbstractJsonConstructor for empty constructors","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is abbreviated code from JsonConversionHelper.toObject. It populates the mainContent property with an object of className using the class&amp;apos;s Sub New, which does not take any parameters.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Function toObject(source as JsonObject, className as String, libName as String) as JsonConversionHelper&amp;lt;br /&amp;gt;    Dim noArgsConstructor as New JsonNoArgsConstructor()&amp;lt;br /&amp;gt;    Set mainHolder.contents = noArgsConstructor.createObject(className, libName)&amp;lt;br /&amp;gt;End Function", "methods":[{"label":"createObject","comment":"Overridden function","valuetype":"Variant","filenamebase":"createObject_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonNoArgsConstructor","qn":"createObject","codesample":"%REM\nThe following code is abbreviated code from JsonConversionHelper.toObject. It populates the mainContent property with an object of className using the class&amp;apos;s Sub New, which does not take any parameters.\n%END REM\nFunction toObject(source as JsonObject, className as String, libName as String) as JsonConversionHelper\n    Dim noArgsConstructor as New JsonNoArgsConstructor()\n    Set mainHolder.contents = noArgsConstructor.createObject(className, libName)\nEnd Function","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(className As String, libName As String)","signature":"Public Function createObject(className As String, libName As String) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function","inlinecomment":" \t &amp;apos; Overridden function","parentclassname":"JsonNoArgsConstructor","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is abbreviated code from JsonConversionHelper.toObject. It populates the mainContent property with an object of className using the class&amp;apos;s Sub New, which does not take any parameters.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Function toObject(source as JsonObject, className as String, libName as String) as JsonConversionHelper&amp;lt;br /&amp;gt;    Dim noArgsConstructor as New JsonNoArgsConstructor()&amp;lt;br /&amp;gt;    Set mainHolder.contents = noArgsConstructor.createObject(className, libName)&amp;lt;br /&amp;gt;End Function", "signatureelements":["Public","Function"], "arguments":[{"label":"className","comment":"Class to create an instance of","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonNoArgsConstructorcreateObject","qn":"className","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class to create an instance of&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class to create an instance of","inlinecomment":" \t &amp;apos; Class to create an instance of"},{"label":"libName","comment":"Script file where the class is defined","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonNoArgsConstructorcreateObject","qn":"libName","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Script file where the class is defined&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Script file where the class is defined","inlinecomment":" \t &amp;apos; Script file where the class is defined"}]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonNoArgsConstructor","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonNoArgsConstructor","codesamplehtml":"", "signatureelements":["Public","Sub"]}]},{"classname":"JsonScalarConverter","comment":"Cusom Converter to convert a JSON value to VoltScript scalar. This is used as the default for any conversion.","valuetype":"AbstractJsonConverter","filenamebase":"JsonScalarConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"JsonScalarConverter","codesample":"%REM\nThe following code is used in ser-10.txt. Converts to strings and numerics for firstName, lastName and age.\n%END REM\nDim json as String\nDim helper as New JsonConversionHelper()\nDim jd as New Person()\njd.firstName = &amp;quot;John&amp;quot;\njd.lastName = &amp;quot;Doe&amp;quot;\njd.age = 42\njson = helper.withScalarConverter(&amp;quot;firstName&amp;quot;)._\n    withScalarConverter(&amp;quot;lastName&amp;quot;)._\n    withScalarConverter(&amp;quot;age&amp;quot;)\n    toJsonString(jd, false)","signaturecode":3072,"instancecode":1024,"parentclassname":"AbstractJsonConverter","classtype":"Derived","classderivetype":"AbstractJsonConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"B724066E5F04247780258935004512DC","signature":"Public Class JsonScalarConverter As AbstractJsonConverter","modifiers":"Public","classname":"JsonScalarConverter","constructorsignature":"Public Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Cusom Converter to convert a JSON value to VoltScript scalar. This is used as the default for any conversion.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Cusom Converter to convert a JSON value to VoltScript scalar. This is used as the default for any conversion.","inlinecomment":" \t &amp;apos; Cusom Converter to convert a JSON value to VoltScript scalar. This is used as the default for any conversion.","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is used in ser-10.txt. Converts to strings and numerics for firstName, lastName and age.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Dim jd as New Person()&amp;lt;br /&amp;gt;jd.firstName = &amp;quot;John&amp;quot;&amp;lt;br /&amp;gt;jd.lastName = &amp;quot;Doe&amp;quot;&amp;lt;br /&amp;gt;jd.age = 42&amp;lt;br /&amp;gt;json = helper.withScalarConverter(&amp;quot;firstName&amp;quot;)._&amp;lt;br /&amp;gt;    withScalarConverter(&amp;quot;lastName&amp;quot;)._&amp;lt;br /&amp;gt;    withScalarConverter(&amp;quot;age&amp;quot;)&amp;lt;br /&amp;gt;    toJsonString(jd, false)", "methods":[{"label":"fromJson","comment":"Overridden function, uses scalar value from JSON object. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","valuetype":"Variant","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonScalarConverter","qn":"fromJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty\n%END REM\nSub deserialize(holder as JsonConversionHolder, source as JsonObject)\n   Call deserializeToProperty(holder, fromJson(source), source.label)\nEnd Sub","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As JsonObject)","signature":"Public Function fromJson(source As JsonObject) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function, uses scalar value from JSON object. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function, uses scalar value from JSON object. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","inlinecomment":" \t &amp;apos; Overridden function, uses scalar value from JSON object. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","parentclassname":"JsonScalarConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Sub deserialize(holder as JsonConversionHolder, source as JsonObject)&amp;lt;br /&amp;gt;   Call deserializeToProperty(holder, fromJson(source), source.label)&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonScalarConverterfromJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"}]},{"label":"isReturnObj","comment":"Overridden function, always returning False for this Class","valuetype":"Boolean","filenamebase":"isReturnObj_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonScalarConverter","qn":"isReturnObj","codesample":"%REM\nThe actual code for this function\n%END REM\nFunction isReturnObj As Boolean\n    isReturnObj = False\nEnd Function","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function isReturnObj() As Boolean","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function, always returning False for this Class&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function, always returning False for this Class","inlinecomment":" \t &amp;apos; Overridden function, always returning False for this Class","parentclassname":"JsonScalarConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The actual code for this function&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Function isReturnObj As Boolean&amp;lt;br /&amp;gt;    isReturnObj = False&amp;lt;br /&amp;gt;End Function", "signatureelements":["Public","Function"]},{"label":"toJson","comment":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","valuetype":"Variant","filenamebase":"toJson_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonScalarConverter","qn":"toJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.serialize. It extracts a property value, passes it to the derived class&amp;apos;s toJson function and passes the result to AbstractJsonConverter.serializeToProperty\n%END REM\nSub serialize(source as Variant, target as JsonObject)\n    Dim propName as String\n    Dim execString as String\n    propName = Me.labelName\n    Set samsaraObj = source\n    execString = |If (isObject(samsaraObj.| &amp; propName &amp; |)) Then\n        Set samsaraVal = samsaraObj.| &amp; propName &amp; |\n    Else\n        samsaraVal = samsaraObj.| &amp; propName &amp; |\n    End If|\n    Call serializeToProperty(toJson(samsaraVal), target)\nEnd Sub","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant)","signature":"Public Function toJson(source As Variant) As Variant","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","inlinecomment":" \t &amp;apos; Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","parentclassname":"JsonScalarConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is an abbreviated version of code in AbstractJsonConverter.serialize. It extracts a property value, passes it to the derived class&amp;apos;s toJson function and passes the result to AbstractJsonConverter.serializeToProperty&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Sub serialize(source as Variant, target as JsonObject)&amp;lt;br /&amp;gt;    Dim propName as String&amp;lt;br /&amp;gt;    Dim execString as String&amp;lt;br /&amp;gt;    propName = Me.labelName&amp;lt;br /&amp;gt;    Set samsaraObj = source&amp;lt;br /&amp;gt;    execString = |If (isObject(samsaraObj.| &amp; propName &amp; |)) Then&amp;lt;br /&amp;gt;        Set samsaraVal = samsaraObj.| &amp; propName &amp; |&amp;lt;br /&amp;gt;    Else&amp;lt;br /&amp;gt;        samsaraVal = samsaraObj.| &amp; propName &amp; |&amp;lt;br /&amp;gt;    End If|&amp;lt;br /&amp;gt;    Call serializeToProperty(toJson(samsaraVal), target)&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Variant containing the property to be serialized","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonScalarConvertertoJson","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant containing the property to be serialized&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant containing the property to be serialized","inlinecomment":" \t &amp;apos; Variant containing the property to be serialized"}]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonScalarConverter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonScalarConverter","codesamplehtml":"", "signatureelements":["Public","Sub"]}]},{"classname":"JsonSetterConverter","comment":"Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. During deserialization, the relevant JSON objects will then be removed from the parent JSON object, to ensure they are not re-processed.","valuetype":"AbstractJsonFunctionConverter","filenamebase":"JsonSetterConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter","qn":"JsonSetterConverter","codesample":"%REM\nThe following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.\n%END REM\nDim jsonObj as JsonObject  &amp;apos;populate accordingly\nDim converter as New JsonSetterConverter\nDim mainHolder as New Person()\nCall converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)\nDim helper as New JsonConversionHelper()\nCall helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)\nCall converter.deserialize(mainHolder, jsonObj)","signaturecode":3072,"instancecode":1024,"parentclassname":"AbstractJsonFunctionConverter","classtype":"Derived","classderivetype":"AbstractJsonFunctionConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"3D9DEC30A1FAFF688025893500440480","signature":"Public Class JsonSetterConverter As AbstractJsonFunctionConverter","modifiers":"Public","classname":"JsonSetterConverter","constructorsignature":"Public Sub New()","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. During deserialization, the relevant JSON objects will then be removed from the parent JSON object, to ensure they are not re-processed.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. During deserialization, the relevant JSON objects will then be removed from the parent JSON object, to ensure they are not re-processed.","inlinecomment":" \t &amp;apos; Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. During deserialization, the relevant JSON objects will then be removed from the parent JSON object, to ensure they are not re-processed.","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject  &amp;apos;populate accordingly&amp;lt;br /&amp;gt;Dim converter as New JsonSetterConverter&amp;lt;br /&amp;gt;Dim mainHolder as New Person()&amp;lt;br /&amp;gt;Call converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Call helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)&amp;lt;br /&amp;gt;Call converter.deserialize(mainHolder, jsonObj)", "methods":[{"label":"forSetter","comment":"Passes the setter name to look for in the relevant class","valuetype":"JsonSetterConverter","filenamebase":"forSetter_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonSetterConverter","qn":"forSetter","codesample":"%REM\nThe following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.\n%END REM\nDim jsonObj as JsonObject  &amp;apos;populate accordingly\nDim converter as New JsonSetterConverter\nDim mainHolder as New Person()\nCall converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)\nDim helper as New JsonConversionHelper()\nCall helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)\nCall converter.deserialize(mainHolder, jsonObj)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(setterName As String)","signature":"Public Function forSetter(setterName As String) As JsonSetterConverter","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Passes the setter name to look for in the relevant class&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Passes the setter name to look for in the relevant class","inlinecomment":" \t &amp;apos; Passes the setter name to look for in the relevant class","parentclassname":"JsonSetterConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject  &amp;apos;populate accordingly&amp;lt;br /&amp;gt;Dim converter as New JsonSetterConverter&amp;lt;br /&amp;gt;Dim mainHolder as New Person()&amp;lt;br /&amp;gt;Call converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Call helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)&amp;lt;br /&amp;gt;Call converter.deserialize(mainHolder, jsonObj)", "signatureelements":["Public","Function"], "arguments":[{"label":"setterName","comment":"Sub or function in the target class","valuetype":"String","filenamebase":"setterName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonSetterConverterforSetter","qn":"setterName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Sub or function in the target class&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Sub or function in the target class","inlinecomment":" \t &amp;apos; Sub or function in the target class"}]},{"label":"withSiblingParam","comment":"Fluent method to retrieve a parameter value fr the setter from the JSON object, or a default value to use if the label is not in the JSON object. The relevant value is passed as the nth parameter to pass to the relevant setter.","valuetype":"JsonSetterConverter","filenamebase":"withSiblingParam_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonSetterConverter","qn":"withSiblingParam","codesample":"%REM\nThe following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.\n%END REM\nDim jsonObj as JsonObject  &amp;apos;populate accordingly\nDim converter as New JsonSetterConverter\nDim mainHolder as New Person()\nCall converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;, &amp;quot;&amp;quot;)\nDim helper as New JsonConversionHelper()\nCall helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)\nCall converter.deserialize(mainHolder, jsonObj)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String, defaultValue As Variant)","signature":"Public Function withSiblingParam(labelName As String, defaultValue As Variant) As JsonSetterConverter","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Fluent method to retrieve a parameter value fr the setter from the JSON object, or a default value to use if the label is not in the JSON object. The relevant value is passed as the nth parameter to pass to the relevant setter.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Fluent method to retrieve a parameter value fr the setter from the JSON object, or a default value to use if the label is not in the JSON object. The relevant value is passed as the nth parameter to pass to the relevant setter.","inlinecomment":" \t &amp;apos; Fluent method to retrieve a parameter value fr the setter from the JSON object, or a default value to use if the label is not in the JSON object. The relevant value is passed as the nth parameter to pass to the relevant setter.","parentclassname":"JsonSetterConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject  &amp;apos;populate accordingly&amp;lt;br /&amp;gt;Dim converter as New JsonSetterConverter&amp;lt;br /&amp;gt;Dim mainHolder as New Person()&amp;lt;br /&amp;gt;Call converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;, &amp;quot;&amp;quot;)&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Call helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)&amp;lt;br /&amp;gt;Call converter.deserialize(mainHolder, jsonObj)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label to search for at the same level as the JSON object being parsed","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonSetterConverterwithSiblingParam","qn":"labelName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label to search for at the same level as the JSON object being parsed&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label to search for at the same level as the JSON object being parsed","inlinecomment":" \t &amp;apos; Label to search for at the same level as the JSON object being parsed"},{"label":"defaultValue","comment":"Default to use if the label is not found in the JSON","valuetype":"Variant","filenamebase":"defaultValue_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonSetterConverterwithSiblingParam","qn":"defaultValue","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Default to use if the label is not found in the JSON&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Default to use if the label is not found in the JSON","inlinecomment":" \t &amp;apos; Default to use if the label is not found in the JSON"}]},{"label":"withValueParam","comment":"Uses the scalar value of the JSON element the converter is associated with.\nThe value will be added to the end of the params array, as the nth parameter to pass to the relevant setter.","valuetype":"JsonSetterConverter","filenamebase":"withValueParam_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonSetterConverter","qn":"withValueParam","codesample":"%REM\nThe following code is from deser-50.txt. It deserializes a JSON object that contains firstName and lastName properties. During the deserialization it calls Laureate.setName(firstName as String, lastName as String). To do this, it uses a JsonSetterConverter tied to the firstName property, so withValueParam picks up that property.\n%END REM\nDim json as String\nDim helper as new JsonConversionHelper()\nDim setterConverter as New JsonSetterConverter()\nDim json as |{&amp;quot;firstname&amp;quot;:&amp;quot;Guglielmo&amp;quot;, &amp;quot;surname&amp;quot;:&amp;quot;Marconi&amp;quot;, &amp;quot;share&amp;quot;: 2}|\nCall setterConverter.forSetter(&amp;quot;setName&amp;quot;)._\n    withValueParam()._\n    withSiblingParam(&amp;quot;surname&amp;quot;, &amp;quot;&amp;quot;)\nCall helper.withCustomCnverter(&amp;quot;firstName&amp;quot;, setterConverter)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function withValueParam() As JsonSetterConverter","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Uses the scalar value of the JSON element the converter is associated with.&amp;lt;br /&amp;gt;The value will be added to the end of the params array, as the nth parameter to pass to the relevant setter.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Uses the scalar value of the JSON element the converter is associated with.&amp;lt;br /&amp;gt;The value will be added to the end of the params array, as the nth parameter to pass to the relevant setter.","inlinecomment":" \t &amp;apos; Uses the scalar value of the JSON element the converter is associated with.\nThe value will be added to the end of the params array, as the nth parameter to pass to the relevant setter.","parentclassname":"JsonSetterConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is from deser-50.txt. It deserializes a JSON object that contains firstName and lastName properties. During the deserialization it calls Laureate.setName(firstName as String, lastName as String). To do this, it uses a JsonSetterConverter tied to the firstName property, so withValueParam picks up that property.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;Dim helper as new JsonConversionHelper()&amp;lt;br /&amp;gt;Dim setterConverter as New JsonSetterConverter()&amp;lt;br /&amp;gt;Dim json as |{&amp;quot;firstname&amp;quot;:&amp;quot;Guglielmo&amp;quot;, &amp;quot;surname&amp;quot;:&amp;quot;Marconi&amp;quot;, &amp;quot;share&amp;quot;: 2}|&amp;lt;br /&amp;gt;Call setterConverter.forSetter(&amp;quot;setName&amp;quot;)._&amp;lt;br /&amp;gt;    withValueParam()._&amp;lt;br /&amp;gt;    withSiblingParam(&amp;quot;surname&amp;quot;, &amp;quot;&amp;quot;)&amp;lt;br /&amp;gt;Call helper.withCustomCnverter(&amp;quot;firstName&amp;quot;, setterConverter)", "signatureelements":["Public","Function"]},{"label":"deserialize","comment":"Overridden function.","valuetype":"","filenamebase":"deserialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonSetterConverter","qn":"deserialize","codesample":"%REM\nThe following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.\n%END REM\nDim jsonObj as JsonObject  &amp;apos;populate accordingly\nDim converter as New JsonSetterConverter\nDim mainHolder as New Person()\nCall converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)\nDim helper as New JsonConversionHelper()\nCall helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)\nCall converter.deserialize(mainHolder, jsonObj)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(holder As JsonConversionHolder, source As JsonObject)","signature":"Public Sub deserialize(holder As JsonConversionHolder, source As JsonObject)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function.","inlinecomment":" \t &amp;apos; Overridden function.","parentclassname":"JsonSetterConverter","codesamplehtml":"%REM&amp;lt;br /&amp;gt;The following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject  &amp;apos;populate accordingly&amp;lt;br /&amp;gt;Dim converter as New JsonSetterConverter&amp;lt;br /&amp;gt;Dim mainHolder as New Person()&amp;lt;br /&amp;gt;Call converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)&amp;lt;br /&amp;gt;Dim helper as New JsonConversionHelper()&amp;lt;br /&amp;gt;Call helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)&amp;lt;br /&amp;gt;Call converter.deserialize(mainHolder, jsonObj)", "signatureelements":["Public","Sub"], "arguments":[{"label":"holder","comment":"Object to deserialize to","valuetype":"JsonConversionHolder","filenamebase":"holder_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonSetterConverterdeserialize","qn":"holder","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Object to deserialize to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Object to deserialize to","inlinecomment":" \t &amp;apos; Object to deserialize to"},{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonSetterConverterdeserialize","qn":"source","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JSON object to deserialize from&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &amp;apos; JSON object to deserialize from"}]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonSetterConverter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonSetterConverter","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"serialize","comment":"Overridden function, throws error","valuetype":"","filenamebase":"serialize_Method","fqnprefix":"VoltScriptJSONConverter.VoltScriptJSONConverter.JsonSetterConverter","qn":"serialize","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(source As Variant, target As JsonObject)","signature":"Public Sub serialize(source As Variant, target As JsonObject)","modifiers":"Public","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Overridden function, throws error&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Overridden function, throws error","inlinecomment":" \t &amp;apos; Overridden function, throws error","parentclassname":"JsonSetterConverter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"source","comment":"VoltScript object from which to serialize","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonSetterConverterserialize","qn":"source","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;VoltScript object from which to serialize&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"VoltScript object from which to serialize","inlinecomment":" \t &amp;apos; VoltScript object from which to serialize"},{"label":"target","comment":"JsonObject to write value to","valuetype":"JsonObject","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptJSONConverterVoltScriptJSONConverterJsonSetterConverterserialize","qn":"target","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject to write value to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject to write value to","inlinecomment":" \t &amp;apos; JsonObject to write value to"}]}]}], "variables":[]}
