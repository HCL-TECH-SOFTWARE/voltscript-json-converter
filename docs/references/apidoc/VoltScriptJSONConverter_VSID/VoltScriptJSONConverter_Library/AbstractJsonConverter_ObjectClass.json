{"classname":"AbstractJsonConverter","comment":"Base Converter to convert JSON to VoltScript datatype or object and vice versa.\nThis is an abstract class only, a derived class must be used.","valuetype":"","filenamebase":"AbstractJsonConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter","qn":"AbstractJsonConverter","codesample":"","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"3ECED7EDAEAD3D6080258935003F276C","signature":"Public Class AbstractJsonConverter","modifiers":"Public","classname":"AbstractJsonConverter","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Base Converter to convert JSON to VoltScript datatype or object and vice versa.&lt;br /&gt;This is an abstract class only, a derived class must be used.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Base Converter to convert JSON to VoltScript datatype or object and vice versa.&lt;br /&gt;This is an abstract class only, a derived class must be used.","inlinecomment":" \t &apos; Base Converter to convert JSON to VoltScript datatype or object and vice versa.\nThis is an abstract class only, a derived class must be used.","codesamplehtml":"", "methods":[{"label":"forPropertyName","comment":"Defines a custom property name from the relevant Class to use.\nIf not used, the code will look for a property that matches the label in the JSON","valuetype":"AbstractJsonConverter","filenamebase":"forPropertyName_Method","fqnprefix":"VoltScriptJSONConverter.AbstractJsonConverter","qn":"forPropertyName","codesample":"%REM\nEnsures that when the surnameConverter extracts its value, it writes it to the lastName property of the target VoltScript object.\n%END REM\nDim surnameConverter as New JsonScalarConverter\nCall surnameConverter.forPropertyName(&amp;quot;lastName&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(propertyName As String)","signature":"Public Function forPropertyName(propertyName As String) As AbstractJsonConverter","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Defines a custom property name from the relevant Class to use.&lt;br /&gt;If not used, the code will look for a property that matches the label in the JSON&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Defines a custom property name from the relevant Class to use.&lt;br /&gt;If not used, the code will look for a property that matches the label in the JSON","inlinecomment":" \t &apos; Defines a custom property name from the relevant Class to use.\nIf not used, the code will look for a property that matches the label in the JSON","parentclassname":"AbstractJsonConverter","codesamplehtml":"%REM&lt;br /&gt;Ensures that when the surnameConverter extracts its value, it writes it to the lastName property of the target VoltScript object.&lt;br /&gt;%END REM&lt;br /&gt;Dim surnameConverter as New JsonScalarConverter&lt;br /&gt;Call surnameConverter.forPropertyName(&amp;quot;lastName&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"propertyName","comment":"Property name to look for in the relevant Class. E.g. if the JSON has a label &amp;quot;lastName&amp;quot; but your class uses the property &amp;quot;surname&amp;quot;, pass &amp;quot;surname&amp;quot; as the property to write to","valuetype":"String","filenamebase":"propertyName_ValuedElement","fqnprefix":"VoltScriptJSONConverterAbstractJsonConverterforPropertyName","qn":"propertyName","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Property name to look for in the relevant Class. E.g. if the JSON has a label &amp;quot;lastName&amp;quot; but your class uses the property &amp;quot;surname&amp;quot;, pass &amp;quot;surname&amp;quot; as the property to write to&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Property name to look for in the relevant Class. E.g. if the JSON has a label &amp;quot;lastName&amp;quot; but your class uses the property &amp;quot;surname&amp;quot;, pass &amp;quot;surname&amp;quot; as the property to write to","inlinecomment":" \t &apos; Property name to look for in the relevant Class. E.g. if the JSON has a label &amp;quot;lastName&amp;quot; but your class uses the property &amp;quot;surname&amp;quot;, pass &amp;quot;surname&amp;quot; as the property to write to"}]},{"label":"fromHelper","comment":"Passes the current helper into the converter, so we know whether or not to suppress errors. &amp;lt;b&amp;gt;NOTE:&amp;lt;/b&amp;gt; This method is called from the JsonConversionHelper, you should not call it in your own custom code.","valuetype":"AbstractJsonConverter","filenamebase":"fromHelper_Method","fqnprefix":"VoltScriptJSONConverter.AbstractJsonConverter","qn":"fromHelper","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(helper As JsonConversionHelper)","signature":"Public Function fromHelper(helper As JsonConversionHelper) As AbstractJsonConverter","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Passes the current helper into the converter, so we know whether or not to suppress errors. &amp;lt;b&amp;gt;NOTE:&amp;lt;/b&amp;gt; This method is called from the JsonConversionHelper, you should not call it in your own custom code.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Passes the current helper into the converter, so we know whether or not to suppress errors. &amp;lt;b&amp;gt;NOTE:&amp;lt;/b&amp;gt; This method is called from the JsonConversionHelper, you should not call it in your own custom code.","inlinecomment":" \t &apos; Passes the current helper into the converter, so we know whether or not to suppress errors. &amp;lt;b&amp;gt;NOTE:&amp;lt;/b&amp;gt; This method is called from the JsonConversionHelper, you should not call it in your own custom code.","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"helper","comment":"Helper from which the converter is being used","valuetype":"JsonConversionHelper","filenamebase":"helper_ValuedElement","fqnprefix":"VoltScriptJSONConverterAbstractJsonConverterfromHelper","qn":"helper","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Helper from which the converter is being used&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Helper from which the converter is being used","inlinecomment":" \t &apos; Helper from which the converter is being used"}]},{"label":"fromJson","comment":"Main function to convert JSON value to VltScript value. Needs to be overridden in derived class.","valuetype":"Variant","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptJSONConverter.AbstractJsonConverter","qn":"fromJson","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As JsonObject)","signature":"Public Function fromJson(source As JsonObject) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Main function to convert JSON value to VltScript value. Needs to be overridden in derived class.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Main function to convert JSON value to VltScript value. Needs to be overridden in derived class.","inlinecomment":" \t &apos; Main function to convert JSON value to VltScript value. Needs to be overridden in derived class.","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterAbstractJsonConverterfromJson","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JSON object to deserialize from&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &apos; JSON object to deserialize from"}]},{"label":"getMeTypeForDebug","comment":"Creates a prefix for debug messages","valuetype":"String","filenamebase":"getMeTypeForDebug_Method","fqnprefix":"VoltScriptJSONConverter.AbstractJsonConverter","qn":"getMeTypeForDebug","codesample":"%REM\nThe following code can be included in a base class&amp;apos;s method. TypeName() will be called on the current object. So if debug is enabled, a message will be written that makes it clear which derived class&amp;apos;s fromJson() method is being called.\n%END REM\nCall DebugPrint_Samsara(&amp;quot;Entering &amp;quot; &amp;amp; Me.getMeTypeForDebug &amp;amp; &amp;quot;.fromJson&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function getMeTypeForDebug() As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Creates a prefix for debug messages&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Creates a prefix for debug messages","inlinecomment":" \t &apos; Creates a prefix for debug messages","parentclassname":"AbstractJsonConverter","codesamplehtml":"%REM&lt;br /&gt;The following code can be included in a base class&amp;apos;s method. TypeName() will be called on the current object. So if debug is enabled, a message will be written that makes it clear which derived class&amp;apos;s fromJson() method is being called.&lt;br /&gt;%END REM&lt;br /&gt;Call DebugPrint_Samsara(&amp;quot;Entering &amp;quot; &amp;amp; Me.getMeTypeForDebug &amp;amp; &amp;quot;.fromJson&amp;quot;)", "signatureelements":["Public","Function"]},{"label":"isReturnObj","comment":"Whether or not the converter returns a VoltScript object or VoltScript scalar or scalar array.\nThis function is used to determine whether &amp;quot;Set&amp;quot; needs to be used to write the result to a variable.\nDefault version of the function returns True.","valuetype":"Boolean","filenamebase":"isReturnObj_Method","fqnprefix":"VoltScriptJSONConverter.AbstractJsonConverter","qn":"isReturnObj","codesample":"%REM\nA converter is expected to know whether it should return a scalar or a VoltScript object. The default is false, that it only returns scalars. This function is used to determine whether or not there is a need to call Set. In future versions, where Return is implemented in functions, this may no longer be required.\n%END REM\nDim returnVal as Variant\nIf Me.isReturnObj Then\n    Set returnVal = Me.fromJson(jsonObj)\nElse\n    returnVal = Me.fromJson(jsonObj)\nEnd If","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function isReturnObj() As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Whether or not the converter returns a VoltScript object or VoltScript scalar or scalar array.&lt;br /&gt;This function is used to determine whether &amp;quot;Set&amp;quot; needs to be used to write the result to a variable.&lt;br /&gt;Default version of the function returns True.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Whether or not the converter returns a VoltScript object or VoltScript scalar or scalar array.&lt;br /&gt;This function is used to determine whether &amp;quot;Set&amp;quot; needs to be used to write the result to a variable.&lt;br /&gt;Default version of the function returns True.","inlinecomment":" \t &apos; Whether or not the converter returns a VoltScript object or VoltScript scalar or scalar array.\nThis function is used to determine whether &amp;quot;Set&amp;quot; needs to be used to write the result to a variable.\nDefault version of the function returns True.","parentclassname":"AbstractJsonConverter","codesamplehtml":"%REM&lt;br /&gt;A converter is expected to know whether it should return a scalar or a VoltScript object. The default is false, that it only returns scalars. This function is used to determine whether or not there is a need to call Set. In future versions, where Return is implemented in functions, this may no longer be required.&lt;br /&gt;%END REM&lt;br /&gt;Dim returnVal as Variant&lt;br /&gt;If Me.isReturnObj Then&lt;br /&gt;    Set returnVal = Me.fromJson(jsonObj)&lt;br /&gt;Else&lt;br /&gt;    returnVal = Me.fromJson(jsonObj)&lt;br /&gt;End If", "signatureelements":["Public","Function"]},{"label":"toJson","comment":"Main function to convert VoltScript value to JSON value. Needs to be overridden in derived class.","valuetype":"Variant","filenamebase":"toJson_Method","fqnprefix":"VoltScriptJSONConverter.AbstractJsonConverter","qn":"toJson","codesample":"","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As Variant)","signature":"Public Function toJson(source As Variant) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Main function to convert VoltScript value to JSON value. Needs to be overridden in derived class.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Main function to convert VoltScript value to JSON value. Needs to be overridden in derived class.","inlinecomment":" \t &apos; Main function to convert VoltScript value to JSON value. Needs to be overridden in derived class.","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Variant containing the propery to be serialized","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterAbstractJsonConvertertoJson","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Variant containing the propery to be serialized&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Variant containing the propery to be serialized","inlinecomment":" \t &apos; Variant containing the propery to be serialized"}]},{"label":"cleanup","comment":"Resets globals","valuetype":"","filenamebase":"cleanup_Method","fqnprefix":"VoltScriptJSONConverter.AbstractJsonConverter","qn":"cleanup","codesample":"%REM\nRuns an execute statement, which needs global variables to store the value and the object from which to extract it. Whether successful or unsoccessful, the finally block&amp;apos;s call to cleanup() sub re-initialises samsaraObj, samsaraVal and samsaraParamVals to empty variants.\n%END REM\nTry\n    execString = |samsaraVal = samsaraObj.| &amp;amp; propName\n    Execute(execString)\nCatch\n    Error 1400, &amp;quot;Unable to set &amp;quot; &amp;amp; labelName &amp;amp; &amp;quot; to extracted value&amp;quot;\nFinally\n    Call Me.cleanup()\nEnd Try","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub cleanup()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Resets globals&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Resets globals","inlinecomment":" \t &apos; Resets globals","parentclassname":"AbstractJsonConverter","codesamplehtml":"%REM&lt;br /&gt;Runs an execute statement, which needs global variables to store the value and the object from which to extract it. Whether successful or unsoccessful, the finally block&amp;apos;s call to cleanup() sub re-initialises samsaraObj, samsaraVal and samsaraParamVals to empty variants.&lt;br /&gt;%END REM&lt;br /&gt;Try&lt;br /&gt;    execString = |samsaraVal = samsaraObj.| &amp;amp; propName&lt;br /&gt;    Execute(execString)&lt;br /&gt;Catch&lt;br /&gt;    Error 1400, &amp;quot;Unable to set &amp;quot; &amp;amp; labelName &amp;amp; &amp;quot; to extracted value&amp;quot;&lt;br /&gt;Finally&lt;br /&gt;    Call Me.cleanup()&lt;br /&gt;End Try", "signatureelements":["Public","Sub"]},{"label":"deserialize","comment":"Deserializes a JSON object into a property in a holder object","valuetype":"","filenamebase":"deserialize_Method","fqnprefix":"VoltScriptJSONConverter.AbstractJsonConverter","qn":"deserialize","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(holder As JsonConversionHolder, source As JsonObject)","signature":"Public Sub deserialize(holder As JsonConversionHolder, source As JsonObject)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Deserializes a JSON object into a property in a holder object&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Deserializes a JSON object into a property in a holder object","inlinecomment":" \t &apos; Deserializes a JSON object into a property in a holder object","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"holder","comment":"Object to deseralize into","valuetype":"JsonConversionHolder","filenamebase":"holder_ValuedElement","fqnprefix":"VoltScriptJSONConverterAbstractJsonConverterdeserialize","qn":"holder","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Object to deseralize into&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Object to deseralize into","inlinecomment":" \t &apos; Object to deseralize into"},{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterAbstractJsonConverterdeserialize","qn":"source","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JSON object to deserialize from&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &apos; JSON object to deserialize from"}]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.AbstractJsonConverter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"serialize","comment":"Serializes a VoltScript value into a JSON object.","valuetype":"","filenamebase":"serialize_Method","fqnprefix":"VoltScriptJSONConverter.AbstractJsonConverter","qn":"serialize","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(source As Variant, target As JsonObject)","signature":"Public Sub serialize(source As Variant, target As JsonObject)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Serializes a VoltScript value into a JSON object.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Serializes a VoltScript value into a JSON object.","inlinecomment":" \t &apos; Serializes a VoltScript value into a JSON object.","parentclassname":"AbstractJsonConverter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"source","comment":"VoltScript object from which to serialize","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterAbstractJsonConverterserialize","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;VoltScript object from which to serialize&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"VoltScript object from which to serialize","inlinecomment":" \t &apos; VoltScript object from which to serialize"},{"label":"target","comment":"JsonObject to write value to","valuetype":"JsonObject","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptJSONConverterAbstractJsonConverterserialize","qn":"target","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JsonObject to write value to&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JsonObject to write value to","inlinecomment":" \t &apos; JsonObject to write value to"}]}], "variables":[]}
