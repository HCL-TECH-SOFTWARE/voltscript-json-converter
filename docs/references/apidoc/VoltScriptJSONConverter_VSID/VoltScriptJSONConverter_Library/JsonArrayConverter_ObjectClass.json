{"classname":"JsonArrayConverter","comment":"Custom converter to convert a JSON value to VoltScript array","valuetype":"AbstractJsonConverter","filenamebase":"JsonArrayConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter","qn":"JsonArrayConverter","codesample":"","signaturecode":3072,"instancecode":1024,"parentclassname":"AbstractJsonConverter","classtype":"Derived","classderivetype":"AbstractJsonConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"A27903E8CCE3DA7280258935004C8DDB","signature":"Public Class JsonArrayConverter As AbstractJsonConverter","modifiers":"Public","classname":"JsonArrayConverter","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Custom converter to convert a JSON value to VoltScript array&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Custom converter to convert a JSON value to VoltScript array","inlinecomment":" \t &apos; Custom converter to convert a JSON value to VoltScript array","codesamplehtml":"", "methods":[{"label":"fromJson","comment":"Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","valuetype":"Variant","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptJSONConverter.JsonArrayConverter","qn":"fromJson","codesample":"%REM\nThe following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty\n%END REM\nSub deserialize(holder as JsonConversionHolder, source as JsonObject)\n   Call deserializeToProperty(holder, fromJson(source), source.label)\nEnd Sub","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As JsonObject)","signature":"Public Function fromJson(source As JsonObject) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","inlinecomment":" \t &apos; Overridden function. The fromJson method is called from AbstractJsonConverter&amp;apos;s deserialize method.","parentclassname":"JsonArrayConverter","codesamplehtml":"%REM&lt;br /&gt;The following code is an abbreviated version of code in AbstractJsonConverter.deserialize. It calls the derived class&amp;apos;s fromJson function and passes the result to AbstractJsonConverter.deserializeToProperty&lt;br /&gt;%END REM&lt;br /&gt;Sub deserialize(holder as JsonConversionHolder, source as JsonObject)&lt;br /&gt;   Call deserializeToProperty(holder, fromJson(source), source.label)&lt;br /&gt;End Sub", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonArrayConverterfromJson","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JSON object to deserialize from&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &apos; JSON object to deserialize from"}]},{"label":"toJson","comment":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","valuetype":"Variant","filenamebase":"toJson_Method","fqnprefix":"VoltScriptJSONConverter.JsonArrayConverter","qn":"toJson","codesample":"%REM\nCalls a customConverter&amp;apos;s toJson method to convert an element in an array (arrayVal) to a JSON-compatible scalar.\nThe code is an abbreviated version of code used in various places, including JsonArrayConverter.toJson().\n%END REM\nIf Not customConverter is Nothing Then\n    Call returnObj.appendToJsonArray(customConverter.toJson(arrayVal))\nEnd If","signaturecode":2112,"instancecode":64,"f_returnsobject":0,"argumentsuffix":"(source As Variant)","signature":"Public Function toJson(source As Variant) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","inlinecomment":" \t &apos; Overridden function. The toJson method is called from AbstractJsonConverter&amp;apos;s serialize method.","parentclassname":"JsonArrayConverter","codesamplehtml":"%REM&lt;br /&gt;Calls a customConverter&amp;apos;s toJson method to convert an element in an array (arrayVal) to a JSON-compatible scalar.&lt;br /&gt;The code is an abbreviated version of code used in various places, including JsonArrayConverter.toJson().&lt;br /&gt;%END REM&lt;br /&gt;If Not customConverter is Nothing Then&lt;br /&gt;    Call returnObj.appendToJsonArray(customConverter.toJson(arrayVal))&lt;br /&gt;End If", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"Scalar or array variant containing serialized value","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonArrayConvertertoJson","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Scalar or array variant containing serialized value&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Scalar or array variant containing serialized value","inlinecomment":" \t &apos; Scalar or array variant containing serialized value"}]},{"label":"withCustomConverter","comment":"Passes a custom converter to this JsonArrayConverter. The converter will be used to convert each element in the array to a VoltScript object rather than a scalar or scalar array.","valuetype":"JsonArrayConverter","filenamebase":"withCustomConverter_Method","fqnprefix":"VoltScriptJSONConverter.JsonArrayConverter","qn":"withCustomConverter","codesample":"%REM\nConverts a JSON object with an array of dates, converting each element in the array to a ZuluLSX DateTimeObject. The arrayConverter is mapped to the &amp;quot;modified&amp;quot; property of the JSON object, but the dateConverter just needs to run on each element in the array. So a label to look for does not need to be passed.\n%END REM\nDim dateConverter as New ZuluDateTimeSerializer()\nDim arrayConverter as new JsonArrayConverter()\nDim helper as New JsonConversionHelper\nDim jsonString as String\nDim obj as ObjectSummary\njsonString = |{&amp;quot;unid&amp;quot;:&amp;quot;12345678901234567890123456789012&amp;quot;,&amp;quot;modified&amp;quot;:[&amp;quot;2023-02-01T13:00:00Z&amp;quot;,&amp;quot;2023-02-01T13:15:12Z&amp;quot;,&amp;quot;2023-02-02T09:00:00Z&amp;quot;]}|\nCall helper.withCustomConverter(&amp;quot;modified&amp;quot;, arrayConverter.withCustomConverter(dateConverter))\nSet obj = helper.fromJsonString(jsonString, &amp;quot;ObjectSummary&amp;quot;, &amp;quot;ObjectClass&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(converter As AbstractJsonConverter)","signature":"Public Function withCustomConverter(converter As AbstractJsonConverter) As JsonArrayConverter","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Passes a custom converter to this JsonArrayConverter. The converter will be used to convert each element in the array to a VoltScript object rather than a scalar or scalar array.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Passes a custom converter to this JsonArrayConverter. The converter will be used to convert each element in the array to a VoltScript object rather than a scalar or scalar array.","inlinecomment":" \t &apos; Passes a custom converter to this JsonArrayConverter. The converter will be used to convert each element in the array to a VoltScript object rather than a scalar or scalar array.","parentclassname":"JsonArrayConverter","codesamplehtml":"%REM&lt;br /&gt;Converts a JSON object with an array of dates, converting each element in the array to a ZuluLSX DateTimeObject. The arrayConverter is mapped to the &amp;quot;modified&amp;quot; property of the JSON object, but the dateConverter just needs to run on each element in the array. So a label to look for does not need to be passed.&lt;br /&gt;%END REM&lt;br /&gt;Dim dateConverter as New ZuluDateTimeSerializer()&lt;br /&gt;Dim arrayConverter as new JsonArrayConverter()&lt;br /&gt;Dim helper as New JsonConversionHelper&lt;br /&gt;Dim jsonString as String&lt;br /&gt;Dim obj as ObjectSummary&lt;br /&gt;jsonString = |{&amp;quot;unid&amp;quot;:&amp;quot;12345678901234567890123456789012&amp;quot;,&amp;quot;modified&amp;quot;:[&amp;quot;2023-02-01T13:00:00Z&amp;quot;,&amp;quot;2023-02-01T13:15:12Z&amp;quot;,&amp;quot;2023-02-02T09:00:00Z&amp;quot;]}|&lt;br /&gt;Call helper.withCustomConverter(&amp;quot;modified&amp;quot;, arrayConverter.withCustomConverter(dateConverter))&lt;br /&gt;Set obj = helper.fromJsonString(jsonString, &amp;quot;ObjectSummary&amp;quot;, &amp;quot;ObjectClass&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"converter","comment":"Converter to use when deserializing","valuetype":"AbstractJsonConverter","filenamebase":"converter_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonArrayConverterwithCustomConverter","qn":"converter","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converter to use when deserializing&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converter to use when deserializing","inlinecomment":" \t &apos; Converter to use when deserializing"}]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.JsonArrayConverter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonArrayConverter","codesamplehtml":"", "signatureelements":["Public","Sub"]}]}
