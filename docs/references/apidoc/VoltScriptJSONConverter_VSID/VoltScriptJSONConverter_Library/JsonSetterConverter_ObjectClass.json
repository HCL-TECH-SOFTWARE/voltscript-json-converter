{"classname":"JsonSetterConverter","comment":"Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. During deserialization, the relevant JSON objects will then be removed from the parent JSON object, to ensure they are not re-processed.","valuetype":"AbstractJsonFunctionConverter","filenamebase":"JsonSetterConverter_ObjectClass","fqnprefix":"VoltScriptJSONConverter","qn":"JsonSetterConverter","codesample":"%REM\nThe following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.\n%END REM\nDim jsonObj as JsonObject  &amp;apos;populate accordingly\nDim converter as New JsonSetterConverter\nDim mainHolder as New Person()\nCall converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)\nDim helper as New JsonConversionHelper()\nCall helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)\nCall converter.deserialize(mainHolder, jsonObj)","signaturecode":3072,"instancecode":1024,"parentclassname":"AbstractJsonFunctionConverter","classtype":"Derived","classderivetype":"AbstractJsonFunctionConverter","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"3D9DEC30A1FAFF688025893500440480","signature":"Public Class JsonSetterConverter As AbstractJsonFunctionConverter","modifiers":"Public","classname":"JsonSetterConverter","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. During deserialization, the relevant JSON objects will then be removed from the parent JSON object, to ensure they are not re-processed.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. During deserialization, the relevant JSON objects will then be removed from the parent JSON object, to ensure they are not re-processed.","inlinecomment":" \t &apos; Custom Converter to convert between a JSON value or values and VoltScript datatype or objects, using a specific sub or function in the underlying class. During deserialization, the relevant JSON objects will then be removed from the parent JSON object, to ensure they are not re-processed.","codesamplehtml":"%REM&lt;br /&gt;The following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.&lt;br /&gt;%END REM&lt;br /&gt;Dim jsonObj as JsonObject  &amp;apos;populate accordingly&lt;br /&gt;Dim converter as New JsonSetterConverter&lt;br /&gt;Dim mainHolder as New Person()&lt;br /&gt;Call converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)&lt;br /&gt;Dim helper as New JsonConversionHelper()&lt;br /&gt;Call helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)&lt;br /&gt;Call converter.deserialize(mainHolder, jsonObj)", "methods":[{"label":"forSetter","comment":"Passes the setter name to look for in the relevant class","valuetype":"JsonSetterConverter","filenamebase":"forSetter_Method","fqnprefix":"VoltScriptJSONConverter.JsonSetterConverter","qn":"forSetter","codesample":"%REM\nThe following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.\n%END REM\nDim jsonObj as JsonObject  &amp;apos;populate accordingly\nDim converter as New JsonSetterConverter\nDim mainHolder as New Person()\nCall converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)\nDim helper as New JsonConversionHelper()\nCall helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)\nCall converter.deserialize(mainHolder, jsonObj)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(setterName As String)","signature":"Public Function forSetter(setterName As String) As JsonSetterConverter","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Passes the setter name to look for in the relevant class&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Passes the setter name to look for in the relevant class","inlinecomment":" \t &apos; Passes the setter name to look for in the relevant class","parentclassname":"JsonSetterConverter","codesamplehtml":"%REM&lt;br /&gt;The following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.&lt;br /&gt;%END REM&lt;br /&gt;Dim jsonObj as JsonObject  &amp;apos;populate accordingly&lt;br /&gt;Dim converter as New JsonSetterConverter&lt;br /&gt;Dim mainHolder as New Person()&lt;br /&gt;Call converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)&lt;br /&gt;Dim helper as New JsonConversionHelper()&lt;br /&gt;Call helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)&lt;br /&gt;Call converter.deserialize(mainHolder, jsonObj)", "signatureelements":["Public","Function"], "arguments":[{"label":"setterName","comment":"Sub or function in the target class","valuetype":"String","filenamebase":"setterName_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonSetterConverterforSetter","qn":"setterName","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Sub or function in the target class&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Sub or function in the target class","inlinecomment":" \t &apos; Sub or function in the target class"}]},{"label":"withSiblingParam","comment":"Fluent method to retrieve a parameter value fr the setter from the JSON object, or a default value to use if the label is not in the JSON object. The relevant value is passed as the nth parameter to pass to the relevant setter.","valuetype":"JsonSetterConverter","filenamebase":"withSiblingParam_Method","fqnprefix":"VoltScriptJSONConverter.JsonSetterConverter","qn":"withSiblingParam","codesample":"%REM\nThe following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.\n%END REM\nDim jsonObj as JsonObject  &amp;apos;populate accordingly\nDim converter as New JsonSetterConverter\nDim mainHolder as New Person()\nCall converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;, &amp;quot;&amp;quot;)\nDim helper as New JsonConversionHelper()\nCall helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)\nCall converter.deserialize(mainHolder, jsonObj)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String, defaultValue As Variant)","signature":"Public Function withSiblingParam(labelName As String, defaultValue As Variant) As JsonSetterConverter","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Fluent method to retrieve a parameter value fr the setter from the JSON object, or a default value to use if the label is not in the JSON object. The relevant value is passed as the nth parameter to pass to the relevant setter.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Fluent method to retrieve a parameter value fr the setter from the JSON object, or a default value to use if the label is not in the JSON object. The relevant value is passed as the nth parameter to pass to the relevant setter.","inlinecomment":" \t &apos; Fluent method to retrieve a parameter value fr the setter from the JSON object, or a default value to use if the label is not in the JSON object. The relevant value is passed as the nth parameter to pass to the relevant setter.","parentclassname":"JsonSetterConverter","codesamplehtml":"%REM&lt;br /&gt;The following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.&lt;br /&gt;%END REM&lt;br /&gt;Dim jsonObj as JsonObject  &amp;apos;populate accordingly&lt;br /&gt;Dim converter as New JsonSetterConverter&lt;br /&gt;Dim mainHolder as New Person()&lt;br /&gt;Call converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;, &amp;quot;&amp;quot;)&lt;br /&gt;Dim helper as New JsonConversionHelper()&lt;br /&gt;Call helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)&lt;br /&gt;Call converter.deserialize(mainHolder, jsonObj)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label to search for at the same level as the JSON object being parsed","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonSetterConverterwithSiblingParam","qn":"labelName","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label to search for at the same level as the JSON object being parsed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label to search for at the same level as the JSON object being parsed","inlinecomment":" \t &apos; Label to search for at the same level as the JSON object being parsed"},{"label":"defaultValue","comment":"Default to use if the label is not found in the JSON","valuetype":"Variant","filenamebase":"defaultValue_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonSetterConverterwithSiblingParam","qn":"defaultValue","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Default to use if the label is not found in the JSON&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Default to use if the label is not found in the JSON","inlinecomment":" \t &apos; Default to use if the label is not found in the JSON"}]},{"label":"withValueParam","comment":"Uses the scalar value of the JSON element the converter is associated with.\nThe value will be added to the end of the params array, as the nth parameter to pass to the relevant setter.","valuetype":"JsonSetterConverter","filenamebase":"withValueParam_Method","fqnprefix":"VoltScriptJSONConverter.JsonSetterConverter","qn":"withValueParam","codesample":"%REM\nThe following code is from deser-50.txt. It deserializes a JSON object that contains firstName and lastName properties. During the deserialization it calls Laureate.setName(firstName as String, lastName as String). To do this, it uses a JsonSetterConverter tied to the firstName property, so withValueParam picks up that property.\n%END REM\nDim json as String\nDim helper as new JsonConversionHelper()\nDim setterConverter as New JsonSetterConverter()\nDim json as |{&amp;quot;firstname&amp;quot;:&amp;quot;Guglielmo&amp;quot;, &amp;quot;surname&amp;quot;:&amp;quot;Marconi&amp;quot;, &amp;quot;share&amp;quot;: 2}|\nCall setterConverter.forSetter(&amp;quot;setName&amp;quot;)._\n    withValueParam()._\n    withSiblingParam(&amp;quot;surname&amp;quot;, &amp;quot;&amp;quot;)\nCall helper.withCustomCnverter(&amp;quot;firstName&amp;quot;, setterConverter)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function withValueParam() As JsonSetterConverter","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Uses the scalar value of the JSON element the converter is associated with.&lt;br /&gt;The value will be added to the end of the params array, as the nth parameter to pass to the relevant setter.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Uses the scalar value of the JSON element the converter is associated with.&lt;br /&gt;The value will be added to the end of the params array, as the nth parameter to pass to the relevant setter.","inlinecomment":" \t &apos; Uses the scalar value of the JSON element the converter is associated with.\nThe value will be added to the end of the params array, as the nth parameter to pass to the relevant setter.","parentclassname":"JsonSetterConverter","codesamplehtml":"%REM&lt;br /&gt;The following code is from deser-50.txt. It deserializes a JSON object that contains firstName and lastName properties. During the deserialization it calls Laureate.setName(firstName as String, lastName as String). To do this, it uses a JsonSetterConverter tied to the firstName property, so withValueParam picks up that property.&lt;br /&gt;%END REM&lt;br /&gt;Dim json as String&lt;br /&gt;Dim helper as new JsonConversionHelper()&lt;br /&gt;Dim setterConverter as New JsonSetterConverter()&lt;br /&gt;Dim json as |{&amp;quot;firstname&amp;quot;:&amp;quot;Guglielmo&amp;quot;, &amp;quot;surname&amp;quot;:&amp;quot;Marconi&amp;quot;, &amp;quot;share&amp;quot;: 2}|&lt;br /&gt;Call setterConverter.forSetter(&amp;quot;setName&amp;quot;)._&lt;br /&gt;    withValueParam()._&lt;br /&gt;    withSiblingParam(&amp;quot;surname&amp;quot;, &amp;quot;&amp;quot;)&lt;br /&gt;Call helper.withCustomCnverter(&amp;quot;firstName&amp;quot;, setterConverter)", "signatureelements":["Public","Function"]},{"label":"deserialize","comment":"Overridden function.","valuetype":"","filenamebase":"deserialize_Method","fqnprefix":"VoltScriptJSONConverter.JsonSetterConverter","qn":"deserialize","codesample":"%REM\nThe following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.\n%END REM\nDim jsonObj as JsonObject  &amp;apos;populate accordingly\nDim converter as New JsonSetterConverter\nDim mainHolder as New Person()\nCall converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)\nDim helper as New JsonConversionHelper()\nCall helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)\nCall converter.deserialize(mainHolder, jsonObj)","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(holder As JsonConversionHolder, source As JsonObject)","signature":"Public Sub deserialize(holder As JsonConversionHolder, source As JsonObject)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overridden function.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overridden function.","inlinecomment":" \t &apos; Overridden function.","parentclassname":"JsonSetterConverter","codesamplehtml":"%REM&lt;br /&gt;The following code is in sample1 of deser-50.txt. When processing the firstName label in the JSON object, the JsonSetterConverter will be used to call the setName sub, passing the current value (the first name) as the first parameter and the lastName, a sibling of the firstName element in the JSON object, as the second parameter.&lt;br /&gt;%END REM&lt;br /&gt;Dim jsonObj as JsonObject  &amp;apos;populate accordingly&lt;br /&gt;Dim converter as New JsonSetterConverter&lt;br /&gt;Dim mainHolder as New Person()&lt;br /&gt;Call converter.forSetter(&amp;quot;setName&amp;quot;).withValueParam().withSiblingParam(&amp;quot;lastName&amp;quot;)&lt;br /&gt;Dim helper as New JsonConversionHelper()&lt;br /&gt;Call helper.withCustomConverter(&amp;quot;firstName&amp;quot;, converter)&lt;br /&gt;Call converter.deserialize(mainHolder, jsonObj)", "signatureelements":["Public","Sub"], "arguments":[{"label":"holder","comment":"Object to deserialize to","valuetype":"JsonConversionHolder","filenamebase":"holder_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonSetterConverterdeserialize","qn":"holder","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Object to deserialize to&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Object to deserialize to","inlinecomment":" \t &apos; Object to deserialize to"},{"label":"source","comment":"JSON object to deserialize from","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonSetterConverterdeserialize","qn":"source","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JSON object to deserialize from&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JSON object to deserialize from","inlinecomment":" \t &apos; JSON object to deserialize from"}]},{"label":"New","comment":"","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.JsonSetterConverter","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonSetterConverter","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"serialize","comment":"Overridden function, throws error","valuetype":"","filenamebase":"serialize_Method","fqnprefix":"VoltScriptJSONConverter.JsonSetterConverter","qn":"serialize","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"(source As Variant, target As JsonObject)","signature":"Public Sub serialize(source As Variant, target As JsonObject)","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Overridden function, throws error&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Overridden function, throws error","inlinecomment":" \t &apos; Overridden function, throws error","parentclassname":"JsonSetterConverter","codesamplehtml":"", "signatureelements":["Public","Sub"], "arguments":[{"label":"source","comment":"VoltScript object from which to serialize","valuetype":"Variant","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonSetterConverterserialize","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;VoltScript object from which to serialize&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"VoltScript object from which to serialize","inlinecomment":" \t &apos; VoltScript object from which to serialize"},{"label":"target","comment":"JsonObject to write value to","valuetype":"JsonObject","filenamebase":"target_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonSetterConverterserialize","qn":"target","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JsonObject to write value to&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JsonObject to write value to","inlinecomment":" \t &apos; JsonObject to write value to"}]}]}
