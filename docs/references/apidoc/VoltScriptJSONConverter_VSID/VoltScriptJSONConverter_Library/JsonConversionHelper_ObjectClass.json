{"classname":"JsonConversionHelper","comment":"Helper class for performing the serialization / deserialization","valuetype":"","filenamebase":"JsonConversionHelper_ObjectClass","fqnprefix":"VoltScriptJSONConverter","qn":"JsonConversionHelper","codesample":"%REM\nConverts a string of JSON to a Person object. The code is taken from the first deserialization example.\n%REM\nDim json as String\nDim helper as New JsonConversionHelper()\nDim jd as Person\n\njson = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|\nSet jd = helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;deser-10&amp;quot;)","signaturecode":3072,"instancecode":1024,"classtype":"Base","projectid":"086680CD3A1F050280258935003E6DFD","version":3,"classid":"49E85D048B02698580258935004DC112","signature":"Public Class JsonConversionHelper","modifiers":"Public","classname":"JsonConversionHelper","parentclassname":"None","constructorsignature":"Public Sub New()","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Helper class for performing the serialization / deserialization&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Helper class for performing the serialization / deserialization","inlinecomment":" \t &apos; Helper class for performing the serialization / deserialization","codesamplehtml":"%REM&lt;br /&gt;Converts a string of JSON to a Person object. The code is taken from the first deserialization example.&lt;br /&gt;%REM&lt;br /&gt;Dim json as String&lt;br /&gt;Dim helper as New JsonConversionHelper()&lt;br /&gt;Dim jd as Person&lt;br /&gt;&lt;br /&gt;json = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|&lt;br /&gt;Set jd = helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;deser-10&amp;quot;)", "methods":[{"label":"fromJson","comment":"Main function to deserialize a JSON object to a VoltScript object.","valuetype":"Variant","filenamebase":"fromJson_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"fromJson","codesample":"%REM\nConverts a VoltScript JsonObject to an instance of a class. A custom constructor, custom converters and configuration to ignore labels may be added before calling fromJson().\n%END REM\nDim helper as New JsonConversionHelper\nCall helper.fromJson(jsonObj, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(obj As JsonObject)","signature":"Public Function fromJson(obj As JsonObject) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Main function to deserialize a JSON object to a VoltScript object.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Main function to deserialize a JSON object to a VoltScript object.","inlinecomment":" \t &apos; Main function to deserialize a JSON object to a VoltScript object.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;Converts a VoltScript JsonObject to an instance of a class. A custom constructor, custom converters and configuration to ignore labels may be added before calling fromJson().&lt;br /&gt;%END REM&lt;br /&gt;Dim helper as New JsonConversionHelper&lt;br /&gt;Call helper.fromJson(jsonObj, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"obj","comment":"JSON object to deserialize","valuetype":"JsonObject","filenamebase":"obj_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperfromJson","qn":"obj","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JSON object to deserialize&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JSON object to deserialize","inlinecomment":" \t &apos; JSON object to deserialize"}]},{"label":"fromJsonString","comment":"Parses JSON string and calls fromJson which creates an array or object.","valuetype":"Variant","filenamebase":"fromJsonString_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"fromJsonString","codesample":"%REM\nConverts a string of JSON to an instance of a class. A custom constructor, custom converters and configuration to ignore labels may be added before calling fromJson().\n%END REM\nDim helper as New JsonConversionHelper\nDim js as Person\nDim json as String\njson = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|\nSet jd = helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As String, className As String, libName As String)","signature":"Public Function fromJsonString(source As String, className As String, libName As String) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Parses JSON string and calls fromJson which creates an array or object.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Parses JSON string and calls fromJson which creates an array or object.","inlinecomment":" \t &apos; Parses JSON string and calls fromJson which creates an array or object.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;Converts a string of JSON to an instance of a class. A custom constructor, custom converters and configuration to ignore labels may be added before calling fromJson().&lt;br /&gt;%END REM&lt;br /&gt;Dim helper as New JsonConversionHelper&lt;br /&gt;Dim js as Person&lt;br /&gt;Dim json as String&lt;br /&gt;json = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|&lt;br /&gt;Set jd = helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"String of JSON to parse","valuetype":"String","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperfromJsonString","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;String of JSON to parse&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"String of JSON to parse","inlinecomment":" \t &apos; String of JSON to parse"},{"label":"className","comment":"Class name to create object for","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperfromJsonString","qn":"className","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class name to create object for&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class name to create object for","inlinecomment":" \t &apos; Class name to create object for"},{"label":"libName","comment":"Script containing className","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperfromJsonString","qn":"libName","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Script containing className&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Script containing className","inlinecomment":" \t &apos; Script containing className"}]},{"label":"getCustomConverter","comment":"Returns the custom converter for a label, if it exists.","valuetype":"AbstractJsonConverter","filenamebase":"getCustomConverter_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"getCustomConverter","codesample":"%REM\nThe code is an abbreviated version of code found in JsonConversionHelper.fromJson(). For a given JSON object (child) gets a converter based on the JSON object&amp;apos;s label (elemName) and, if the converter exists, calls its deserialize method to convert the JSON object into mainHolder.\n%END REM\nDim converter as AbstractJsonConverter\nDim elemName as String\nelemName = child.label\nSet converter = Me.getCustomConverter(elemName)\nIf Not converter is Nothing Then\n    converter.deserialize(Me.mainHolder, child)\nEnd If","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String)","signature":"Public Function getCustomConverter(labelName As String) As AbstractJsonConverter","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Returns the custom converter for a label, if it exists.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Returns the custom converter for a label, if it exists.","inlinecomment":" \t &apos; Returns the custom converter for a label, if it exists.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;The code is an abbreviated version of code found in JsonConversionHelper.fromJson(). For a given JSON object (child) gets a converter based on the JSON object&amp;apos;s label (elemName) and, if the converter exists, calls its deserialize method to convert the JSON object into mainHolder.&lt;br /&gt;%END REM&lt;br /&gt;Dim converter as AbstractJsonConverter&lt;br /&gt;Dim elemName as String&lt;br /&gt;elemName = child.label&lt;br /&gt;Set converter = Me.getCustomConverter(elemName)&lt;br /&gt;If Not converter is Nothing Then&lt;br /&gt;    converter.deserialize(Me.mainHolder, child)&lt;br /&gt;End If", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label to match against","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelpergetCustomConverter","qn":"labelName","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label to match against&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label to match against","inlinecomment":" \t &apos; Label to match against"}]},{"label":"ignoreLabel","comment":"Specifies a label to skip when parsing the JSON. The check is case-sensitive, so casing needs to match the casing in the JSON object.","valuetype":"JsonConversionHelper","filenamebase":"ignoreLabel_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"ignoreLabel","codesample":"%REM\nWhen the helper parses all the labels in a JSON object to convert it from JSON to a VoltScript object, the code will skip the label &amp;quot;ipaddress&amp;quot;.\n%END REM\nDim helper as New JsonConversionHelper\nCall helper.ignoreLabel(&amp;quot;ipaddress&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelToIgnore As String)","signature":"Public Function ignoreLabel(labelToIgnore As String) As JsonConversionHelper","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Specifies a label to skip when parsing the JSON. The check is case-sensitive, so casing needs to match the casing in the JSON object.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Specifies a label to skip when parsing the JSON. The check is case-sensitive, so casing needs to match the casing in the JSON object.","inlinecomment":" \t &apos; Specifies a label to skip when parsing the JSON. The check is case-sensitive, so casing needs to match the casing in the JSON object.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;When the helper parses all the labels in a JSON object to convert it from JSON to a VoltScript object, the code will skip the label &amp;quot;ipaddress&amp;quot;.&lt;br /&gt;%END REM&lt;br /&gt;Dim helper as New JsonConversionHelper&lt;br /&gt;Call helper.ignoreLabel(&amp;quot;ipaddress&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelToIgnore","comment":"Label in JSON being parsed","valuetype":"String","filenamebase":"labelToIgnore_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperignoreLabel","qn":"labelToIgnore","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label in JSON being parsed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label in JSON being parsed","inlinecomment":" \t &apos; Label in JSON being parsed"}]},{"label":"jsonArrayToObjects","comment":"Converts an array to objects create with a constructor that takes no parameters.","valuetype":"Variant","filenamebase":"jsonArrayToObjects_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"jsonArrayToObjects","codesample":"%REM\nThis code is from deser-10.txt sample 4. Converts the JsonObject (obj) to a Variant array of Person objects.\n%END REM\nDim parser as New JsonParser\nDim obj as JsonObject\nDim helper as New JsonConversionHelper\nDim arr as Variant\nCall parser.loadFromJson(|{&amp;quot;success&amp;quot;: true, &amp;quot;data&amp;quot;: [{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42},{&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:30}]}|)\nSet obj = parser.getRootObject().getChild(&amp;quot;data&amp;quot;)\narr = helper.jsonArrayToObjects(obj, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(array As JsonObject, className As String, libName As String)","signature":"Public Function jsonArrayToObjects(array As JsonObject, className As String, libName As String) As Variant","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Converts an array to objects create with a constructor that takes no parameters.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Converts an array to objects create with a constructor that takes no parameters.","inlinecomment":" \t &apos; Converts an array to objects create with a constructor that takes no parameters.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;This code is from deser-10.txt sample 4. Converts the JsonObject (obj) to a Variant array of Person objects.&lt;br /&gt;%END REM&lt;br /&gt;Dim parser as New JsonParser&lt;br /&gt;Dim obj as JsonObject&lt;br /&gt;Dim helper as New JsonConversionHelper&lt;br /&gt;Dim arr as Variant&lt;br /&gt;Call parser.loadFromJson(|{&amp;quot;success&amp;quot;: true, &amp;quot;data&amp;quot;: [{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42},{&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:30}]}|)&lt;br /&gt;Set obj = parser.getRootObject().getChild(&amp;quot;data&amp;quot;)&lt;br /&gt;arr = helper.jsonArrayToObjects(obj, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"array","comment":"Array of JSON objects","valuetype":"JsonObject","filenamebase":"array_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperjsonArrayToObjects","qn":"array","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Array of JSON objects&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Array of JSON objects","inlinecomment":" \t &apos; Array of JSON objects"},{"label":"className","comment":"Class name to create object for","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperjsonArrayToObjects","qn":"className","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class name to create object for&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class name to create object for","inlinecomment":" \t &apos; Class name to create object for"},{"label":"libName","comment":"Script containing className","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperjsonArrayToObjects","qn":"libName","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Script containing className&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Script containing className","inlinecomment":" \t &apos; Script containing className"}]},{"label":"reset","comment":"Resets the holder object containing the return value. This allows you to re-use the helper.","valuetype":"JsonConversionHelper","filenamebase":"reset_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"reset","codesample":"%REM\nUses a helper to deserialize JSON to a Person object, then resets it so it can be re-used by subsequent code. The mainHolder property will be re-initialized, but all converters or labels to ignore will still exist in the helper. So subsequent calls will also ignore &amp;quot;gender&amp;quot; label.\n%END REM\nDim json as String\nDim helper as New JsonConversionHelper()\nDim jd as Person\njson = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42,&amp;quot;gender&amp;quot;:&amp;quot;M&amp;quot;}|\nSet jd = helper.ignoreLabel(&amp;quot;gender&amp;quot;).fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)\nCall helper.reset()","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"()","signature":"Public Function reset() As JsonConversionHelper","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Resets the holder object containing the return value. This allows you to re-use the helper.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Resets the holder object containing the return value. This allows you to re-use the helper.","inlinecomment":" \t &apos; Resets the holder object containing the return value. This allows you to re-use the helper.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;Uses a helper to deserialize JSON to a Person object, then resets it so it can be re-used by subsequent code. The mainHolder property will be re-initialized, but all converters or labels to ignore will still exist in the helper. So subsequent calls will also ignore &amp;quot;gender&amp;quot; label.&lt;br /&gt;%END REM&lt;br /&gt;Dim json as String&lt;br /&gt;Dim helper as New JsonConversionHelper()&lt;br /&gt;Dim jd as Person&lt;br /&gt;json = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42,&amp;quot;gender&amp;quot;:&amp;quot;M&amp;quot;}|&lt;br /&gt;Set jd = helper.ignoreLabel(&amp;quot;gender&amp;quot;).fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)&lt;br /&gt;Call helper.reset()", "signatureelements":["Public","Function"]},{"label":"shouldIgnoreLabel","comment":"Checks whether to skip a label when parsing the JSON","valuetype":"Boolean","filenamebase":"shouldIgnoreLabel_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"shouldIgnoreLabel","codesample":"%REM\nThe code will print true for whether &amp;quot;gender&amp;quot; should be ignored, but false for &amp;quot;firstName&amp;quot;\n%END REM\nDim json as String\nDim helper as New JsonConversionHelper()\nDim jd as Person\njson = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42,&amp;quot;gender&amp;quot;:&amp;quot;M&amp;quot;}|\nSet jd = helper.ignoreLabel(&amp;quot;gender&amp;quot;).fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)\nPrint helper.shouldIgnoreLabel(&amp;quot;gender&amp;quot;)\nPrint helper.shouldIgnoreLabel(&amp;quot;firstName&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String)","signature":"Public Function shouldIgnoreLabel(labelName As String) As Boolean","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Checks whether to skip a label when parsing the JSON&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Checks whether to skip a label when parsing the JSON","inlinecomment":" \t &apos; Checks whether to skip a label when parsing the JSON","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;The code will print true for whether &amp;quot;gender&amp;quot; should be ignored, but false for &amp;quot;firstName&amp;quot;&lt;br /&gt;%END REM&lt;br /&gt;Dim json as String&lt;br /&gt;Dim helper as New JsonConversionHelper()&lt;br /&gt;Dim jd as Person&lt;br /&gt;json = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42,&amp;quot;gender&amp;quot;:&amp;quot;M&amp;quot;}|&lt;br /&gt;Set jd = helper.ignoreLabel(&amp;quot;gender&amp;quot;).fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)&lt;br /&gt;Print helper.shouldIgnoreLabel(&amp;quot;gender&amp;quot;)&lt;br /&gt;Print helper.shouldIgnoreLabel(&amp;quot;firstName&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label in JSON being parsed","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelpershouldIgnoreLabel","qn":"labelName","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label in JSON being parsed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label in JSON being parsed","inlinecomment":" \t &apos; Label in JSON being parsed"}]},{"label":"toJson","comment":"Main functon to serialize a VoltScript object / array to a JSON object","valuetype":"JsonObject","filenamebase":"toJson_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"toJson","codesample":"%REM\nCreates a person and converts it to a JsonObject\n%END REM\nDim helper as New JsonConversionHelper()\nDim jsonObj as JsonObject\nDim jd as New Person\njd.firstName = &amp;quot;John&amp;quot;\njd.lastName = &amp;quot;Doe&amp;quot;\njd.age = 42\nCall helper.withScalarConverter(&amp;quot;firstName&amp;quot;).withScalarConverter(&amp;quot;lastName&amp;quot;).withScalarConverter(&amp;quot;age&amp;quot;)\nSet jsonObj = helper.toJson(jd)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(obj As Variant)","signature":"Public Function toJson(obj As Variant) As JsonObject","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Main functon to serialize a VoltScript object / array to a JSON object&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Main functon to serialize a VoltScript object / array to a JSON object","inlinecomment":" \t &apos; Main functon to serialize a VoltScript object / array to a JSON object","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;Creates a person and converts it to a JsonObject&lt;br /&gt;%END REM&lt;br /&gt;Dim helper as New JsonConversionHelper()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim jd as New Person&lt;br /&gt;jd.firstName = &amp;quot;John&amp;quot;&lt;br /&gt;jd.lastName = &amp;quot;Doe&amp;quot;&lt;br /&gt;jd.age = 42&lt;br /&gt;Call helper.withScalarConverter(&amp;quot;firstName&amp;quot;).withScalarConverter(&amp;quot;lastName&amp;quot;).withScalarConverter(&amp;quot;age&amp;quot;)&lt;br /&gt;Set jsonObj = helper.toJson(jd)", "signatureelements":["Public","Function"], "arguments":[{"label":"obj","comment":"VoltScript object or array of VoltScript objects to serialize","valuetype":"Variant","filenamebase":"obj_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelpertoJson","qn":"obj","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;VoltScript object or array of VoltScript objects to serialize&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"VoltScript object or array of VoltScript objects to serialize","inlinecomment":" \t &apos; VoltScript object or array of VoltScript objects to serialize"}]},{"label":"toJsonString","comment":"Main function to serialize a VoltScript object / array to a string","valuetype":"String","filenamebase":"toJsonString_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"toJsonString","codesample":"%REM\nCreates a person and converts it to a string of pretty-printed JSON\n%END REM\nDim helper as New JsonConversionHelper()\nDim jd as New Person\njd.firstName = &amp;quot;John&amp;quot;\njd.lastName = &amp;quot;Doe&amp;quot;\njd.age = 42\nCall helper.withScalarConverter(&amp;quot;firstName&amp;quot;).withScalarConverter(&amp;quot;lastName&amp;quot;).withScalarConverter(&amp;quot;age&amp;quot;)\nPrint helper.toJsonString(jd, true)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(obj As Variant, prettify As Boolean)","signature":"Public Function toJsonString(obj As Variant, prettify As Boolean) As String","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Main function to serialize a VoltScript object / array to a string&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Main function to serialize a VoltScript object / array to a string","inlinecomment":" \t &apos; Main function to serialize a VoltScript object / array to a string","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;Creates a person and converts it to a string of pretty-printed JSON&lt;br /&gt;%END REM&lt;br /&gt;Dim helper as New JsonConversionHelper()&lt;br /&gt;Dim jd as New Person&lt;br /&gt;jd.firstName = &amp;quot;John&amp;quot;&lt;br /&gt;jd.lastName = &amp;quot;Doe&amp;quot;&lt;br /&gt;jd.age = 42&lt;br /&gt;Call helper.withScalarConverter(&amp;quot;firstName&amp;quot;).withScalarConverter(&amp;quot;lastName&amp;quot;).withScalarConverter(&amp;quot;age&amp;quot;)&lt;br /&gt;Print helper.toJsonString(jd, true)", "signatureelements":["Public","Function"], "arguments":[{"label":"obj","comment":"VoltScript object or array of VoltScript objects to serialize","valuetype":"Variant","filenamebase":"obj_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelpertoJsonString","qn":"obj","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;VoltScript object or array of VoltScript objects to serialize&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"VoltScript object or array of VoltScript objects to serialize","inlinecomment":" \t &apos; VoltScript object or array of VoltScript objects to serialize"},{"label":"prettify","comment":"Output prettified JSON string or compressed","valuetype":"Boolean","filenamebase":"prettify_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelpertoJsonString","qn":"prettify","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Output prettified JSON string or compressed&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Output prettified JSON string or compressed","inlinecomment":" \t &apos; Output prettified JSON string or compressed"}]},{"label":"toObject","comment":"Passes a JSON object to the helper and tells it what object type to create, defined in which file.","valuetype":"JsonConversionHelper","filenamebase":"toObject_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"toObject","codesample":"%REM\nCreates a custom constructor to call a Pet&amp;apos;s New method, which takes two parameters - name and type, in that order.\nThis code is found in deser-80 sample.\n%END REM\nDim pet as Pet\nDim helper as New JsonConversionHelper\nDim petConstructor as New JsonCustomConstructor()\nCall petConstructor.withParm(&amp;quot;name&amp;quot;, &amp;quot;&amp;quot;).withParam(&amp;quot;type&amp;quot;, &amp;quot;&amp;quot;)\nSet pet = helper.withCustomCostructor(petConstructor)._\n    toObject(source, &amp;quot;Pet&amp;quot;, &amp;quot;deser-80&amp;quot;)._\n    fromJson(source)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(source As JsonObject, className As String, libName As String)","signature":"Public Function toObject(source As JsonObject, className As String, libName As String) As JsonConversionHelper","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Passes a JSON object to the helper and tells it what object type to create, defined in which file.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Passes a JSON object to the helper and tells it what object type to create, defined in which file.","inlinecomment":" \t &apos; Passes a JSON object to the helper and tells it what object type to create, defined in which file.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;Creates a custom constructor to call a Pet&amp;apos;s New method, which takes two parameters - name and type, in that order.&lt;br /&gt;This code is found in deser-80 sample.&lt;br /&gt;%END REM&lt;br /&gt;Dim pet as Pet&lt;br /&gt;Dim helper as New JsonConversionHelper&lt;br /&gt;Dim petConstructor as New JsonCustomConstructor()&lt;br /&gt;Call petConstructor.withParm(&amp;quot;name&amp;quot;, &amp;quot;&amp;quot;).withParam(&amp;quot;type&amp;quot;, &amp;quot;&amp;quot;)&lt;br /&gt;Set pet = helper.withCustomCostructor(petConstructor)._&lt;br /&gt;    toObject(source, &amp;quot;Pet&amp;quot;, &amp;quot;deser-80&amp;quot;)._&lt;br /&gt;    fromJson(source)", "signatureelements":["Public","Function"], "arguments":[{"label":"source","comment":"JSON object to deserialize","valuetype":"JsonObject","filenamebase":"source_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelpertoObject","qn":"source","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;JSON object to deserialize&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"JSON object to deserialize","inlinecomment":" \t &apos; JSON object to deserialize"},{"label":"className","comment":"Class to create an instance of","valuetype":"String","filenamebase":"className_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelpertoObject","qn":"className","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Class to create an instance of&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Class to create an instance of","inlinecomment":" \t &apos; Class to create an instance of"},{"label":"libName","comment":"Script where the class is defined","valuetype":"String","filenamebase":"libName_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelpertoObject","qn":"libName","argumentindex":3,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Script where the class is defined&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Script where the class is defined","inlinecomment":" \t &apos; Script where the class is defined"}]},{"label":"withArrayConverter","comment":"Adds an array converter to this object","valuetype":"JsonConversionHelper","filenamebase":"withArrayConverter_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"withArrayConverter","codesample":"%REM\nThe following code is from ser-20.txt sample 1. Converts a Session object to a String, outputting &amp;quot;id&amp;quot; and &amp;quot;title&amp;quot; as strings, and using an arrayConverter to convert the &amp;quot;products&amp;quot; property of the Session (a Variant array) to a JSON array.\n%END REM\nDim sess as New Session\nDim json as String\nDim helper as New JsonConversionHelper\nsess.id = &amp;quot;Ad16&amp;quot;\nsess.title = &amp;quot;Collaborate around Business Applications in Communities&amp;quot;\nsess.products = Split(&amp;quot;Domino,Connections,Volt&amp;quot;, &amp;quot;,&amp;quot;)\nCall helper.withScalarConverter(&amp;quot;id&amp;quot;).withScalarConverter(&amp;quot;title&amp;quot;).withArrayConverter(&amp;quot;products&amp;quot;)\njson = helper.toJsonString(sess, true)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String)","signature":"Public Function withArrayConverter(labelName As String) As JsonConversionHelper","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds an array converter to this object&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds an array converter to this object","inlinecomment":" \t &apos; Adds an array converter to this object","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;The following code is from ser-20.txt sample 1. Converts a Session object to a String, outputting &amp;quot;id&amp;quot; and &amp;quot;title&amp;quot; as strings, and using an arrayConverter to convert the &amp;quot;products&amp;quot; property of the Session (a Variant array) to a JSON array.&lt;br /&gt;%END REM&lt;br /&gt;Dim sess as New Session&lt;br /&gt;Dim json as String&lt;br /&gt;Dim helper as New JsonConversionHelper&lt;br /&gt;sess.id = &amp;quot;Ad16&amp;quot;&lt;br /&gt;sess.title = &amp;quot;Collaborate around Business Applications in Communities&amp;quot;&lt;br /&gt;sess.products = Split(&amp;quot;Domino,Connections,Volt&amp;quot;, &amp;quot;,&amp;quot;)&lt;br /&gt;Call helper.withScalarConverter(&amp;quot;id&amp;quot;).withScalarConverter(&amp;quot;title&amp;quot;).withArrayConverter(&amp;quot;products&amp;quot;)&lt;br /&gt;json = helper.toJsonString(sess, true)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperwithArrayConverter","qn":"labelName","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)","inlinecomment":" \t &apos; Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)"}]},{"label":"withCustomConstructor","comment":"Passes a custom constructor to use to create the object during deserialization","valuetype":"JsonConversionHelper","filenamebase":"withCustomConstructor_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"withCustomConstructor","codesample":"%REM\nThe code below calls the Session class&amp;apos;s New method passing two parameters, the JSON object&amp;apos;s &amp;quot;id&amp;quot; and &amp;quot;title&amp;quot; elements, in that order.\nThe code can be found in the deser-70.txt example.\n%END REM\nDim sess as Session\nDim helper as New JsonConversionHelper\nDim sessionConstructor as New JsonCustomConstructor\nDim json as String\n  \njson = |{&amp;quot;id&amp;quot;:&amp;quot;Ad01&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Domino HA&amp;quot;}|\nCall sessionConstructor.withParam(&amp;quot;id&amp;quot;, &amp;quot;&amp;quot;).withTitle(&amp;quot;title&amp;quot;, &amp;quot;&amp;quot;)\nSet sess = helper.withCustomConstructor(sessionConstructor).fromJsonString(json, &amp;quot;Session&amp;quot;, &amp;quot;deser-70&amp;quot;)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(constructor As JsonCustomConstructor)","signature":"Public Function withCustomConstructor(constructor As JsonCustomConstructor) As JsonConversionHelper","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Passes a custom constructor to use to create the object during deserialization&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Passes a custom constructor to use to create the object during deserialization","inlinecomment":" \t &apos; Passes a custom constructor to use to create the object during deserialization","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;The code below calls the Session class&amp;apos;s New method passing two parameters, the JSON object&amp;apos;s &amp;quot;id&amp;quot; and &amp;quot;title&amp;quot; elements, in that order.&lt;br /&gt;The code can be found in the deser-70.txt example.&lt;br /&gt;%END REM&lt;br /&gt;Dim sess as Session&lt;br /&gt;Dim helper as New JsonConversionHelper&lt;br /&gt;Dim sessionConstructor as New JsonCustomConstructor&lt;br /&gt;Dim json as String&lt;br /&gt;  &lt;br /&gt;json = |{&amp;quot;id&amp;quot;:&amp;quot;Ad01&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;Domino HA&amp;quot;}|&lt;br /&gt;Call sessionConstructor.withParam(&amp;quot;id&amp;quot;, &amp;quot;&amp;quot;).withTitle(&amp;quot;title&amp;quot;, &amp;quot;&amp;quot;)&lt;br /&gt;Set sess = helper.withCustomConstructor(sessionConstructor).fromJsonString(json, &amp;quot;Session&amp;quot;, &amp;quot;deser-70&amp;quot;)", "signatureelements":["Public","Function"], "arguments":[{"label":"constructor","comment":"Custom constructor to use for creating the object","valuetype":"JsonCustomConstructor","filenamebase":"constructor_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperwithCustomConstructor","qn":"constructor","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Custom constructor to use for creating the object&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Custom constructor to use for creating the object","inlinecomment":" \t &apos; Custom constructor to use for creating the object"}]},{"label":"withCustomConverter","comment":"Adds a custom converter to this object","valuetype":"JsonConversionHelper","filenamebase":"withCustomConverter_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"withCustomConverter","codesample":"%REM\nEnsures that when extracting the gender element from a JSON object, the target class&amp;apos;s setGender method is called with the literal value &amp;quot;M&amp;quot;. \nThis is found in the CustomSetterTest sample, a hard-coded test for validation purposes only.\n%END REM\nDim helper as New JsonConversionHelper\nDim genderConverter as New JsonSetterConverter()\nCall genderConverter.forSetter(setGender).withLiteralParam(&amp;quot;M&amp;quot;)\nCall helper.withCustomConverter(&amp;quot;gender&amp;quot;, genderConverter)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String, converter As AbstractJsonConverter)","signature":"Public Function withCustomConverter(labelName As String, converter As AbstractJsonConverter) As JsonConversionHelper","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a custom converter to this object&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a custom converter to this object","inlinecomment":" \t &apos; Adds a custom converter to this object","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;Ensures that when extracting the gender element from a JSON object, the target class&amp;apos;s setGender method is called with the literal value &amp;quot;M&amp;quot;. &lt;br /&gt;This is found in the CustomSetterTest sample, a hard-coded test for validation purposes only.&lt;br /&gt;%END REM&lt;br /&gt;Dim helper as New JsonConversionHelper&lt;br /&gt;Dim genderConverter as New JsonSetterConverter()&lt;br /&gt;Call genderConverter.forSetter(setGender).withLiteralParam(&amp;quot;M&amp;quot;)&lt;br /&gt;Call helper.withCustomConverter(&amp;quot;gender&amp;quot;, genderConverter)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperwithCustomConverter","qn":"labelName","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)","inlinecomment":" \t &apos; Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)"},{"label":"converter","comment":"Custom converter to apply","valuetype":"AbstractJsonConverter","filenamebase":"converter_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperwithCustomConverter","qn":"converter","argumentindex":2,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Custom converter to apply&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Custom converter to apply","inlinecomment":" \t &apos; Custom converter to apply"}]},{"label":"withObject","comment":"Passes an existing object into the helper, so you can merge content from an additional JSON object into it.","valuetype":"JsonConversionHelper","filenamebase":"withObject_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"withObject","codesample":"%REM\nConverts a string of JSON to a Person object. The code is taken from the first deserialization example.\n%REM\nDim json as String\nDim parser as New JsonParser\nDim helper as New JsonConversionHelper()\nDim jd as New Person\njson = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|\nCall parser.loadFromJson(json)\nCall helper.withObject*jd).fromJson(parser.getRootObject)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(object As Variant)","signature":"Public Function withObject(object As Variant) As JsonConversionHelper","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Passes an existing object into the helper, so you can merge content from an additional JSON object into it.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Passes an existing object into the helper, so you can merge content from an additional JSON object into it.","inlinecomment":" \t &apos; Passes an existing object into the helper, so you can merge content from an additional JSON object into it.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;Converts a string of JSON to a Person object. The code is taken from the first deserialization example.&lt;br /&gt;%REM&lt;br /&gt;Dim json as String&lt;br /&gt;Dim parser as New JsonParser&lt;br /&gt;Dim helper as New JsonConversionHelper()&lt;br /&gt;Dim jd as New Person&lt;br /&gt;json = |{&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;age&amp;quot;:42}|&lt;br /&gt;Call parser.loadFromJson(json)&lt;br /&gt;Call helper.withObject*jd).fromJson(parser.getRootObject)", "signatureelements":["Public","Function"], "arguments":[{"label":"object","comment":"Object to merge properties into","valuetype":"Variant","filenamebase":"object_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperwithObject","qn":"object","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Object to merge properties into&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Object to merge properties into","inlinecomment":" \t &apos; Object to merge properties into"}]},{"label":"withScalarConverter","comment":"Adds a scalar converter to this object","valuetype":"JsonConversionHelper","filenamebase":"withScalarConverter_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"withScalarConverter","codesample":"%REM\nCreates a person and converts it to a JsonObject. Converts strings to JSON strings, numerics to JSON numbers.\n%END REM\nDim helper as New JsonConversionHelper()\nDim jsonObj as JsonObject\nDim jd as New Person\njd.firstName = &amp;quot;John&amp;quot;\njd.lastName = &amp;quot;Doe&amp;quot;\njd.age = 42\nCall helper.withScalarConverter(&amp;quot;firstName&amp;quot;).withScalarConverter(&amp;quot;lastName&amp;quot;).withScalarConverter(&amp;quot;age&amp;quot;)\nSet jsonObj = helper.toJson(jd)","signaturecode":2112,"instancecode":64,"f_returnsobject":1,"argumentsuffix":"(labelName As String)","signature":"Public Function withScalarConverter(labelName As String) As JsonConversionHelper","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Adds a scalar converter to this object&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Adds a scalar converter to this object","inlinecomment":" \t &apos; Adds a scalar converter to this object","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;Creates a person and converts it to a JsonObject. Converts strings to JSON strings, numerics to JSON numbers.&lt;br /&gt;%END REM&lt;br /&gt;Dim helper as New JsonConversionHelper()&lt;br /&gt;Dim jsonObj as JsonObject&lt;br /&gt;Dim jd as New Person&lt;br /&gt;jd.firstName = &amp;quot;John&amp;quot;&lt;br /&gt;jd.lastName = &amp;quot;Doe&amp;quot;&lt;br /&gt;jd.age = 42&lt;br /&gt;Call helper.withScalarConverter(&amp;quot;firstName&amp;quot;).withScalarConverter(&amp;quot;lastName&amp;quot;).withScalarConverter(&amp;quot;age&amp;quot;)&lt;br /&gt;Set jsonObj = helper.toJson(jd)", "signatureelements":["Public","Function"], "arguments":[{"label":"labelName","comment":"Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)","valuetype":"String","filenamebase":"labelName_ValuedElement","fqnprefix":"VoltScriptJSONConverterJsonConversionHelperwithScalarConverter","qn":"labelName","argumentindex":1,"commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)","inlinecomment":" \t &apos; Label to look for in the JSON object (for deserialization) or VoltScript object (for serialization)"}]},{"label":"suppressErrors","comment":"","valuetype":"Boolean","filenamebase":"suppressErrors_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"Get.suppressErrors","codesample":"","signaturecode":2306,"instancecode":256,"argumentsuffix":"","signature":"Public Property Get suppressErrors As Boolean","modifiers":"Public Get","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonConversionHelper","codesamplehtml":"", "signatureelements":["Public","Property","Get"]},{"label":"suppressErrors","comment":"","valuetype":"Boolean","filenamebase":"suppressErrors_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"Set.suppressErrors","codesample":"","signaturecode":2308,"instancecode":256,"argumentsuffix":"","signature":"Public Property Set suppressErrors As Boolean","modifiers":"Public Set","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"JsonConversionHelper","codesamplehtml":"", "signatureelements":["Public","Property","Set"]},{"label":"disableDebug","comment":"Disables debug printing, switched off by default.","valuetype":"","filenamebase":"disableDebug_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"disableDebug","codesample":"%REM\nEnables debug for the duration of converting a string of JSON to a Person, then disables debug again. The use case for this would be that deserialization is not working, so the developer is trying to trace progress to see where it is failing.\n%END REM\nDim helper as New JsonConversionHelper\nCall helper.enableDebug()\nCall helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)\nCall helper.disableDebug()","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub disableDebug()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Disables debug printing, switched off by default.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Disables debug printing, switched off by default.","inlinecomment":" \t &apos; Disables debug printing, switched off by default.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;Enables debug for the duration of converting a string of JSON to a Person, then disables debug again. The use case for this would be that deserialization is not working, so the developer is trying to trace progress to see where it is failing.&lt;br /&gt;%END REM&lt;br /&gt;Dim helper as New JsonConversionHelper&lt;br /&gt;Call helper.enableDebug()&lt;br /&gt;Call helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)&lt;br /&gt;Call helper.disableDebug()", "signatureelements":["Public","Sub"]},{"label":"Delete","comment":"Destructor, outputs (if in debug) which functions have been logged as encountered and erases converters List.","valuetype":"","filenamebase":"Delete_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"Delete","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub Delete()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Destructor, outputs (if in debug) which functions have been logged as encountered and erases converters List.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Destructor, outputs (if in debug) which functions have been logged as encountered and erases converters List.","inlinecomment":" \t &apos; Destructor, outputs (if in debug) which functions have been logged as encountered and erases converters List.","parentclassname":"JsonConversionHelper","codesamplehtml":"", "signatureelements":["Public","Sub"]},{"label":"enableDebug","comment":"Enables debug printing, switched off by default.","valuetype":"","filenamebase":"enableDebug_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"enableDebug","codesample":"%REM\nEnables debug for the duration of converting a string of JSON to a Person, then disables debug again. The use case for this would be that deserialization is not working, so the developer is trying to trace progress to see where it is failing.\n%END REM\nDim helper as New JsonConversionHelper\nCall helper.enableDebug()\nCall helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)\nCall helper.disableDebug()","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub enableDebug()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Enables debug printing, switched off by default.&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Enables debug printing, switched off by default.","inlinecomment":" \t &apos; Enables debug printing, switched off by default.","parentclassname":"JsonConversionHelper","codesamplehtml":"%REM&lt;br /&gt;Enables debug for the duration of converting a string of JSON to a Person, then disables debug again. The use case for this would be that deserialization is not working, so the developer is trying to trace progress to see where it is failing.&lt;br /&gt;%END REM&lt;br /&gt;Dim helper as New JsonConversionHelper&lt;br /&gt;Call helper.enableDebug()&lt;br /&gt;Call helper.fromJsonString(json, &amp;quot;Person&amp;quot;, &amp;quot;PersonClass&amp;quot;)&lt;br /&gt;Call helper.disableDebug()", "signatureelements":["Public","Sub"]},{"label":"New","comment":"Constructor","valuetype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptJSONConverter.JsonConversionHelper","qn":"New","codesample":"","signaturecode":2080,"instancecode":32,"f_returnsobject":0,"argumentsuffix":"()","signature":"Public Sub New()","modifiers":"Public","commentblock":"&lt;div class=&quot;description&quot;&gt;\t&lt;ul class=&quot;blockList&quot;&gt;\t\t&lt;li class=&quot;blockList&quot;&gt;\t\t\t&lt;div class=&quot;comments&quot;&gt;&lt;!-- comment --&gt;&lt;pre&gt;Constructor&lt;/pre&gt;&lt;/div&gt;\t\t\t&lt;hr /&gt;\t\t&lt;/li&gt;\t&lt;/ul&gt;&lt;/div&gt;","commenthtml":"Constructor","inlinecomment":" \t &apos; Constructor","parentclassname":"JsonConversionHelper","codesamplehtml":"", "signatureelements":["Public","Sub"]}]}
