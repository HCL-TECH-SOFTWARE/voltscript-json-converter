%REM
	Copyright 2022-2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the "License"); 
	you may not use this file except in compliance with the License. 
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, 
	software distributed under the License is distributed on an "AS IS" BASIS, 
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
	See the License for the specific language governing permissions and limitations under the License	
%END REM

Option Public
Option Declare
Use "../src/VoltScriptJsonConverter"
Use "../libs/VoltScriptTesting"
'Runs through addCustomConverter,fromJsonString,asNoArgsObject,createNoArgsObject,resetGlobals,fromJson,
'getCustomConverter,SamsaraScalarConverter

Class ObjectSummaryArr

    Private unid as String
    Private modified as String
    Private action as String

    Sub New(unid as String, modified as String, action as String)
        Me.unid = unid
        Me.modified = modified
        Me.action = action
    End Sub

    Function getUnid() as String
        getUnid = Me.unid
    End Function

    Function getModified() as String
        getModified = Me.modified
    End Function

    Function getAction() as String
        getAction = Me.action
    End Function

End Class

Function runObjArrayTest() as Boolean

    Dim testRunner as New TestRunner("Complex Object Array Class Conversion")
    Dim helper as new JsonConversionHelper
    Dim constructor as new JsonCustomConstructor
    Dim temp as Variant
    Dim objs() as ObjectSummaryArr
    Dim json as String
    Dim i as Integer
    Dim result as Boolean
    Call testRunner.setOutputFormat("BOTH")

	json = |[{"jsonUnid":"12345678901234567890123456789012","jsonModified":"2022-02-02T02:02:22Z","jsonAction":"modified"},
    {"jsonUnid":"12345678901234567890123456789013","jsonModified":"2023-06-01T02:02:22Z","jsonAction":"created"}]|
    'Call helper.enableDebug()
    
    Try
        Dim deserializeSuite as New TestSuite("Test Complex Object Class deserialization")
        Call testRunner.addTestSuite(deserializeSuite)
        Call deserializeSuite.describe("Deserialization")
        Call constructor.withParam("jsonUnid", "").withParam("jsonModified", "").withParam("jsonAction", "")
        Call helper.withCustomConstructor(constructor)
        temp = helper.fromJsonString(json, "ObjectSummaryArr", "../test/ComplexObjArrayTest")
        Redim objs(UBound(temp))
        For i = 0 to UBound(temp)
            Set objs(i) = temp(i)
        Next
        call deserializeSuite.addResult(True, "")
        Call testDeserializationOA(deserializeSuite, objs)
    Catch
        Call deserializeSuite.addError("Error deserializing JSON: " & Error() & " on line " & Erl, ||)
        print "Error " & Error() & " on line " & Erl
    Finally
        result = deserializeSuite.ranSuccessfully()
    end Try

    Try
        Dim serializeSuite as New TestSuite("Test Complex Object Class serialization")
        Call testRunner.addTestSuite(serializeSuite)
        Set helper = new JsonConversionHelper()
        Dim unidConverter as New JsonGetterConverter()
        Dim actionConverter as New JsonGetterConverter()
        Dim dateConverter as New JsonGetterConverter()
        Dim jsonObj as New JsonObject
        Call helper.withCustomConverter("jsonUnid", unidConverter.forGetter("getUnid"))._
            withCustomConverter("jsonModified", dateConverter.forGetter("getModified"))._
            withCustomConverter("jsonAction", actionConverter.forGetter("getAction"))
        'Call helper.enableDebug()
        Call serializeSuite.describe("Serialization")
        Set jsonObj = helper.toJson(objs)
        call serializeSuite.addResult(True, "")
        Call testSerializationOA(serializeSuite, jsonObj)
    Catch
        Call serializeSuite.addError("Error deserializing JSON: " & Error() & " on line " & Erl, ||)
        print "Error " & Error() & " on line " & Erl
    Finally
        result = result And serializeSuite.ranSuccessfully()
    end Try

    Return result
End Function

Function testDeserializationOA(testSuite as TestSuite, testObjs() as ObjectSummaryArr)

    On Error GoTo logErr

    Call testSuite.describe("Test testObjs is an array").assertTrue(IsArray(testObjs))
    Call testSuite.describe("Test two objects extracted").assertEqualsInteger(1, UBound(testObjs))
    Call testSuite.describe("Test unid").assertEqualsString("12345678901234567890123456789012", testObjs(0).getUnid(), false)
    Call testSuite.describe("Test action").assertEqualsString("modified", testObjs(0).getAction(), false)
    Call testSuite.describe("Test modified").assertEqualsString("2022-02-02T02:02:22Z", testObjs(0).getModified(), true)
    Call testSuite.describe("Test second unid").assertEqualsString("12345678901234567890123456789013", testObjs(1).getUnid(), false)
    Call testSuite.describe("Test second action").assertEqualsString("created", testObjs(1).getAction(), false)
    Call testSuite.describe("Test second modified").assertEqualsString("2023-06-01T02:02:22Z", testObjs(1).getModified(), true)

getOut:
    Exit Function

logErr:
    Call testSuite.addError(|Error | & Error() & |(| & Err() & |) on line | & CStr(Erl), ||)
	Resume Next

End Function

Function testSerializationOA(testSuite as TestSuite, jsonObj as JsonObject)

    Dim returnJson as String
	returnJson = |[{"jsonAction":"modified","jsonModified":"2022-02-02T02:02:22Z","jsonUnid":"12345678901234567890123456789012"},
    {"jsonAction":"created","jsonModified":"2023-06-01T02:02:22Z","jsonUnid":"12345678901234567890123456789013"}]|

    Call testSuite.describe("Test two objects extracted").assertEqualsInteger(2, jsonObj.childCount())
    Call testSuite.describe("Test unid").assertEqualsString("12345678901234567890123456789012", jsonObj.getChildren()(0).getChild("jsonUnid").scalarValue, false)
    Call testSuite.describe("Test action").assertEqualsString("modified", jsonObj.getChildren()(0).getChild("jsonAction").scalarValue, false)
    Call testSuite.describe("Test modified").assertEqualsString("2022-02-02T02:02:22Z", jsonObj.getChildren()(0).getChild("jsonModified").scalarValue, true)
    Call testSuite.describe("Test second unid").assertEqualsString("12345678901234567890123456789013", jsonObj.getChildren()(1).getChild("jsonUnid").scalarValue, false)
    Call testSuite.describe("Test second action").assertEqualsString("created", jsonObj.getChildren()(1).getChild("jsonAction").scalarValue, false)
    Call testSuite.describe("Test second modified").assertEqualsString("2023-06-01T02:02:22Z", jsonObj.getChildren()(1).getChild("jsonModified").scalarValue, true)
    
End Function