%REM
	Copyright 2022-2023 HCL America, Inc.
	Licensed under the Apache License, Version 2.0 (the "License"); 
	you may not use this file except in compliance with the License. 
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, 
	software distributed under the License is distributed on an "AS IS" BASIS, 
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
	See the License for the specific language governing permissions and limitations under the License	
%END REM

Option Public
Option Declare
Use "../src/VoltScriptJsonConverter"
Use "../libs/VoltScriptTesting"
'Runs through addCustomConverter,fromJsonString,asNoArgsObject,createNoArgsObject,resetGlobals,fromJson,
'getCustomConverter,SamsaraScalarConverter

Class ObjectSummaryObj

    Private unid as String
    Private modified as String
    Private action as String

    Sub New(unid as String, modified as String, action as String)
        Me.unid = unid
        Me.modified = modified
        Me.action = action
    End Sub

    Function getUnid() as String
        getUnid = Me.unid
    End Function

    Function getModified() as String
        getModified = Me.modified
    End Function

    Function getAction() as String
        getAction = Me.action
    End Function

End Class

Function runComplexObjTest() as Boolean

    Dim testRunner as New TestRunner("Complex Object Class Conversion")
    Dim helper as new JsonConversionHelper
    Dim constructor as new JsonCustomConstructor
    Dim obj as ObjectSummaryObj
    Dim json as String
    Dim result as Boolean
    Call testRunner.setOutputFormat("BOTH")
    
	json = |{"jsonUnid":"12345678901234567890123456789012","jsonModified":"2022-02-02T02:02:22Z","jsonAction":"modified"}|
    'Call helper.enableDebug()
    Call constructor.withParam("jsonUnid", "").withParam("jsonModified", "").withParam("jsonAction", "")
    Call helper.withCustomConstructor(constructor)
    
    Try
        Dim deserializeSuite as New TestSuite("Test Complex Object Class deserialization")
        Call testRunner.addTestSuite(deserializeSuite)
        Call deserializeSuite.describe("Deserialization")
        Set obj = helper.fromJsonString(json, "ObjectSummaryObj", "../test/ComplexObjTest")
        call deserializeSuite.addResult(True, "")
        Call testDeserializationCO(deserializeSuite, obj)
    Catch
        Call deserializeSuite.addError("Error deserializing JSON: " & Error() & " on line " & Erl, ||)
        print "Error " & Error() & " on line " & Erl
    Finally
        result = deserializeSuite.ranSuccessfully()
    end Try

    Try
        Dim serializeSuite as New TestSuite("Test Complex Object Class serialization")
        Call testRunner.addTestSuite(serializeSuite)
        Set helper = new JsonConversionHelper()
        Dim unidConverter as New JsonGetterConverter()
        Dim actionConverter as New JsonGetterConverter()
        Dim dateConverter as New JsonGetterConverter()
        Dim jsonObj as JsonObject
        Call helper.withCustomConverter("jsonModified", dateConverter.forGetter("getModified"))._
            withCustomConverter("jsonUnid", unidConverter.forGetter("getUnid"))._
            withCustomConverter("jsonAction", actionConverter.forGetter("getAction"))
        'Call helper.enableDebug()
        Set jsonObj = helper.toJson(obj)
        Call testSerializationCO(serializeSuite, jsonObj)
    Catch
        Call serializeSuite.addError("Error deserializing JSON: " & Error() & " on line " & Erl, ||)
        print "Error " & Error() & " on line " & Erl
    Finally
        result = result and serializeSuite.ranSuccessfully
    end Try

    return result
End Function

Function testDeserializationCO(testSuite as TestSuite, testObj as ObjectSummaryObj)

    On Error GoTo logErr

    Call testSuite.describe("Test unid").assertEqualsString("12345678901234567890123456789012", testObj.getUnid(), false)
    Call testSuite.describe("Test action").assertEqualsString("modified", testObj.getAction(), false)
    Call testSuite.describe("Test modified").assertEqualsString("2022-02-02T02:02:22Z", testObj.getModified(), true)

getOut:
    Exit Function

logErr:
    Call testSuite.addError(|Error | & Error() & |(| & Err() & |) on line | & CStr(Erl), ||)
	Resume Next

End Function

Function testSerializationCO(testSuite as TestSuite, testObj as JsonObject)

    On Error GoTo logErr

    Call testSuite.describe("Test unid").assertEqualsString("12345678901234567890123456789012", CStr(testObj.getChild("jsonUnid").scalarValue), false)
    Call testSuite.describe("Test action").assertEqualsString("modified", CStr(testObj.getChild("jsonAction").scalarValue), false)
    Call testSuite.describe("Test modified").assertEqualsString("2022-02-02T02:02:22Z", CStr(testObj.getChild("jsonModified").scalarValue), true)

getOut:
    Exit Function

logErr:
    Call testSuite.addError(|Error | & Error() & |(| & Err() & |) on line | & CStr(Erl), ||)
	Resume Next

End Function